{"version":3,"sources":["./cast/sender/webpack/bootstrap","./cast/sender/external [\"KalturaPlayer\"]","./cast/sender/./cast-state-manager.js","./cast/sender/./cast-tracks-manager.js","./cast/sender/./cast-playback-engine.js","./cast/sender/./cast-ui.js","./cast/sender/./cast-loader.js","./cast/sender/./cast-ads-controller.js","./cast/sender/./cast-ads-manager.js","./cast/sender/./cast-player.js","./cast/sender/./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","KalturaPlayer","State","core","FakeEvent","EventType","FakeEventTarget","StateType","CastStateManager","remotePlayer","remotePlayerController","_remotePlayer","_remotePlayerController","_currentState","IDLE","_previousState","_updateState","addEventListener","cast","framework","RemotePlayerEventType","PLAYER_STATE_CHANGED","this","duration","Date","now","playerState","toLowerCase","dispatchEvent","oldState","previousState","newState","currentState","removeEventListener","TextStyleConverter","remote","Track","getLogger","TextStyle","AudioTrack","VideoTrack","TextTrack","Utils","TrackType","Error","TRACK_TYPE_TO_INSTANCE","AUDIO","VIDEO","TEXT","CastTracksManager","_logger","_castSession","CastContext","getInstance","getCurrentSession","_textStyle","_bindEvents","tracks","mediaInfo","length","castTextTracks","filter","type","chrome","media","castVideoTracks","castAudioTracks","textTracks","_parseTextTracks","videoTracks","_parseVideoTracks","audioTracks","_parseAudioTracks","_tracks","concat","_addTextTrackOffOption","debug","_startOnMediaStatusUpdateInterval","TRACKS_CHANGED","copyDeep","_getTracksByType","video","find","track","active","audio","text","_selectVideoTrack","_selectAudioTrack","_selectTextTrack","offTrack","language","selectTrack","_stopOnMediaStatusUpdateInterval","_activeTrackIds","_mediaStatusIntervalId","setInterval","_onMediaStatusUpdate","INTERVAL_FREQUENCY","clearInterval","pushTextTrack","settings","id","trackId","index","label","kind","subType","push","inbandCastTextTracks","outbandCastTextTracks","forEach","trackContentId","some","inbandTrack","langComparer","warn","currentTrack","getActiveTracks","_selectTrack","VIDEO_TRACK_CHANGED","selectedVideoTrack","error","ERROR","Severity","RECOVERABLE","Category","CAST","Code","EDIT_TRACKS_INFO_ERROR","AUDIO_TRACK_CHANGED","selectedAudioTrack","CAST_EDIT_TRACKS_INFO_ERROR","TEXT_TRACK_CHANGED","selectedTextTrack","newTrack","onSuccess","onFailed","indexOf","splice","tracksInfoRequest","EditTracksInfoRequest","getMediaSession","editTracksInfo","_markActiveTrack","e","origTrack","localTextStyle","remoteTextStyle","mediaSession","activeTrackIds","every","includes","toCastTextStyle","textStyle","textTrackStyle","backgroundColor","fontFamily","fontScale","foregroundColor","style","toPlayerTextStyle","TEXT_STYLE_CHANGED","clone","CastPlaybackEngine","_toggleListeners","_liveCurrentTimeIntervalId","_resetFlags","_muted","_volume","playOrPause","canPause","_paused","_currentTime","_duration","_seeking","_onCurrentTimeChanged","_onIsPausedChanged","_onDurationChanged","_onVolumeLevelChanged","_onIsMutedChanged","_onIsMediaLoadedChanged","_onLiveCurrentTimeChanged","listen","listeners","IS_MEDIA_LOADED_CHANGED","IS_PAUSED_CHANGED","DURATION_CHANGED","VOLUME_LEVEL_CHANGED","IS_MUTED_CHANGED","keys","CURRENT_TIME_CHANGED","isMediaLoadedEvent","MEDIA_INFO_CHANGED","onMediaInfoChanged","streamType","StreamType","LIVE","_mediaSession","currentTime","_maybeDispatchTimeUpdate","_maybeEndPlayback","_maybeEndLivePlayback","isPaused","PAUSE","PLAY","DURATION_CHANGE","volumeLevel","VOLUME_CHANGE","isMuted","MUTE_CHANGE","mute","muted","_seekTargetTime","_seekForward","SEEKED","TIME_UPDATE","delta","Math","round","ENDED","range","liveSeekableRange","isLiveDone","muteOrUnmute","canControlVolume","setVolumeLevel","canSeek","SEEKING","seek","savedPlayerState","ui","Components","h","CastUI","props","className","playbackGuiWrapper","KeyboardControl","player","config","Loading","playerGui","OverlayPortal","BottomBar","SeekBarPlaybackContainer","showFramePreview","showTimeBubble","playerContainer","leftControls","PlaybackControls","RewindControl","step","ForwardControl","TimeDisplayPlaybackContainer","format","rightControls","VolumeControl","LanguageControl","CastControl","FullscreenControl","CastOverlay","OverlayAction","PrePlaybackPlayOverlay","CastAfterPlay","SeekBarLivePlaybackContainer","LiveTag","adGuiWrapper","TopBar","AdNotice","AdLearnMore","AdSkip","TimeDisplayAdsContainer","RemotePlayerUI","CastLoader","Promise","resolve","reject","window","isAvailable","_onGCastApiAvailable","_loadCastSDK","then","Dom","loadScriptAsync","toString","CustomActionMessage","CustomActionType","CastAdsController","sendMessage","CUSTOM_CHANNEL","SKIP_AD","EventManager","CastAdsManager","castPlayer","_castPlayer","_eventManager","_attachListeners","AD_MANIFEST_LOADED","_allAdsCompleted","AD_BREAK_START","_adBreak","AD_BREAK_END","ALL_ADS_COMPLETED","removeAll","destroy","Env","EngineType","AbrMode","BaseRemotePlayer","PlayerSnapshot","RemoteConnectedPayload","RemoteControl","RemoteDisconnectedPayload","RemoteAvailablePayload","RemoteSession","CustomMessageType","CustomMessage","CustomEventMessage","CastPlayer","castConfig","remoteControl","load","_initializeCastApi","_initializeRemotePlayer","browser","os","options","_mediaInfo","_castMedia","mediaConfig","sources","_playerConfig","plugins","_readyPromise","ended","_adsManager","adBreak","_engine","play","_loadOrSetMedia","getMediaConfig","pause","_mediaInfoIntervalId","_reset","_firstPlay","_ended","_isOnLiveEdge","_tracksManager","reset","_stateManager","_createReadyPromise","PLAYER_RESET","_destroyed","PLAYER_DESTROY","_castRemotePlayer","isLive","startMinutes","start","end","_castConfig","liveEdgeThreshold","getTracks","hideTextTrack","requestSession","endSession","_remoteSession","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","castContext","setOptions","CastContextEventType","CAST_STATE_CHANGED","event","payload","castState","CastState","NO_DEVICES_AVAILABLE","_remoteControl","onRemoteDeviceAvailable","_castContext","_addSessionLifecycleListeners","RemotePlayer","_castRemotePlayerController","RemotePlayerController","IS_CONNECTED_CHANGED","isConnected","_setupRemotePlayer","_setupLocalPlayer","addMessageListener","customChannel","customMessage","_onCustomMessage","_ui","snapshot","getPlayerSnapshot","getSessionId","getCastDevice","friendlyName","getSessionState","SessionState","SESSION_STARTED","onRemoteDeviceConnected","resuming","major","loadOptions","_getLoadOptions","_resumeSession","mediaObject","loadMedia","setMedia","getUIWrapper","_playbackStarted","CHANGE_SOURCE_STARTED","MediaInfo","request","LoadRequest","option","mediaOption","customData","_onLoadMediaSuccess","_onLoadMediaFailed","onRemoteDeviceDisconnected","listenOnce","MEDIA_LOADED","_onPause","_onEnded","_onPlayerStateChanged","allAdsCompleted","PLAYBACK_ENDED","PLAYING","CHANGE_SOURCE_ENDED","PLAYBACK_START","FIRST_PLAY","FIRST_PLAYING","paused","_triggerInitialPlayerEvents","parseTracks","_handleFirstPlay","startTime","playback","SOURCE_SELECTED","selectedSource","url","contentUrl","mimetype","contentType","LOADED_METADATA","ABR_MODE_CHANGED","AUTO","CRITICAL","CAST_LOAD_MEDIA_FAILED","SESSION_STATE_CHANGED","sessionState","SESSION_STARTING","onRemoteDeviceConnecting","SESSION_RESUMED","SESSION_ENDING","onRemoteDeviceDisconnecting","SESSION_START_FAILED","onRemoteDeviceConnectFailed","autoplay","isEqual","audioLanguage","textLanguage","advertising","adTagUrl","_adsController","castAdvertising","vast","breakClipId","Generator","uniqueId","breakId","breakClips","position","vastAdsRequest","_getAdsRequest","breaks","breakClipIds","vmapAdsRequest","externalCaptions","_getExternalCaptions","captions","caption","endsWith","mergeDeep","trackContentType","adsRequest","adsResponse","parsedCustomMessage","JSON","parse","EVENT","_handleCustomEvent","CAST_CUSTOM_MESSAGE_PARSING_ERROR","customEvent","to","vol","volume","seeking","metadata","images","playbackRate","Type","registerRemotePlayer","NAME","__NAME__","VERSION","__VERSION__","isSupported"],"mappings":"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","file":"playkit-cast-sender.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = KalturaPlayer;","//@flow\nimport {core} from 'kaltura-player-js';\n\nconst {State, FakeEvent, EventType, FakeEventTarget, StateType} = core;\n\nclass CastStateManager extends FakeEventTarget {\n  _currentState: State;\n  _previousState: State;\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _updateState: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n    this._updateState = this._updateState.bind(this);\n    this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n  }\n\n  _updateState(): void {\n    this._currentState.duration = Date.now() / 1000;\n    this._previousState = this._currentState;\n    if (this._remotePlayer.playerState) {\n      this._currentState = new State(this._remotePlayer.playerState.toLowerCase());\n    } else {\n      this._currentState = new State(StateType.IDLE);\n    }\n    this.dispatchEvent(\n      new FakeEvent(EventType.PLAYER_STATE_CHANGED, {\n        oldState: this.previousState,\n        newState: this.currentState\n      })\n    );\n  }\n\n  reset(): void {\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  destroy(): void {\n    this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  get currentState(): State {\n    return this._currentState;\n  }\n\n  get previousState(): State {\n    return this._previousState;\n  }\n}\n\nexport {CastStateManager};\n","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {TextStyleConverter} = remote;\nconst {Track, getLogger, TextStyle, AudioTrack, VideoTrack, TextTrack, Utils, TrackType, EventType, FakeEvent, FakeEventTarget, Error} = core;\nconst TRACK_TYPE_TO_INSTANCE: {[type: string]: Track} = {\n  [TrackType.AUDIO]: AudioTrack,\n  [TrackType.VIDEO]: VideoTrack,\n  [TrackType.TEXT]: TextTrack\n};\n\nclass CastTracksManager extends FakeEventTarget {\n  _remotePlayer: Object;\n  _castSession: Object;\n  _textStyle: TextStyle;\n  _activeTrackIds: Array<number> = [];\n  _tracks: Array<Track> = [];\n  _mediaStatusIntervalId: ?IntervalID;\n  _onMediaStatusUpdate: Function;\n  _logger: any;\n\n  constructor(remotePlayer: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._logger = getLogger('CastTracksManager');\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._textStyle = new TextStyle();\n    this._bindEvents();\n  }\n\n  parseTracks(): void {\n    const tracks = this._remotePlayer.mediaInfo.tracks;\n    if (tracks && tracks.length > 0) {\n      const castTextTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.TEXT);\n      const castVideoTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.VIDEO);\n      const castAudioTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.AUDIO);\n      const textTracks = this._parseTextTracks(castTextTracks);\n      const videoTracks = this._parseVideoTracks(castVideoTracks);\n      const audioTracks = this._parseAudioTracks(castAudioTracks);\n      this._tracks = audioTracks.concat(videoTracks).concat(textTracks);\n      this._addTextTrackOffOption();\n    }\n    this._logger.debug('Parse tracks', this._tracks);\n    this._startOnMediaStatusUpdateInterval();\n    this.dispatchEvent(new FakeEvent(EventType.TRACKS_CHANGED, {tracks: this._tracks}));\n  }\n\n  getTracks(type?: string): Array<Track> {\n    return Utils.Object.copyDeep(this._getTracksByType(type));\n  }\n\n  getActiveTracks(): Object {\n    return Utils.Object.copyDeep({\n      video: this._getTracksByType(TrackType.VIDEO).find(track => track.active),\n      audio: this._getTracksByType(TrackType.AUDIO).find(track => track.active),\n      text: this._getTracksByType(TrackType.TEXT).find(track => track.active)\n    });\n  }\n\n  selectTrack(track: ?Track): void {\n    if (track instanceof VideoTrack) {\n      this._selectVideoTrack(track);\n    } else if (track instanceof AudioTrack) {\n      this._selectAudioTrack(track);\n    } else if (track instanceof TextTrack) {\n      this._selectTextTrack(track);\n    }\n  }\n\n  hideTextTrack(): void {\n    const offTrack = this._tracks.find(t => t.language === 'off');\n    this.selectTrack(offTrack);\n  }\n\n  reset(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  destroy(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  set textStyle(style: TextStyle): void {\n    this._logger.debug('Setting text style', style);\n    const textTrackStyle = TextStyleConverter.toCastTextStyle(style);\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(null, textTrackStyle);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Setting text style succeed');\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      },\n      error => {\n        this._logger.debug('Setting text style failed', error);\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  get textStyle(): ?TextStyle {\n    return this._textStyle.clone();\n  }\n\n  _startOnMediaStatusUpdateInterval(): void {\n    if (!this._mediaStatusIntervalId) {\n      this._mediaStatusIntervalId = setInterval(this._onMediaStatusUpdate, INTERVAL_FREQUENCY);\n    }\n  }\n\n  _stopOnMediaStatusUpdateInterval(): void {\n    if (this._mediaStatusIntervalId) {\n      clearInterval(this._mediaStatusIntervalId);\n      this._mediaStatusIntervalId = null;\n    }\n  }\n\n  _bindEvents(): void {\n    this._onMediaStatusUpdate = this._onMediaStatusUpdate.bind(this);\n  }\n\n  _parseTextTracks(castTextTracks: Array<Object>): Array<TextTrack> {\n    const textTracks = [];\n    const pushTextTrack = track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        kind: track.subType || 'subtitles',\n        active: false\n      };\n      textTracks.push(new TextTrack(settings));\n    };\n    const inbandCastTextTracks = [];\n    const outbandCastTextTracks = [];\n    castTextTracks.forEach(track => {\n      if (track.trackContentId) {\n        outbandCastTextTracks.push(track);\n      } else {\n        inbandCastTextTracks.push(track);\n      }\n    });\n    inbandCastTextTracks.forEach(pushTextTrack);\n    outbandCastTextTracks.forEach(track => {\n      if (inbandCastTextTracks.some(inbandTrack => Track.langComparer(track.language, inbandTrack.language))) {\n        this._logger.warn('duplicated language, taking the inband option. Language: ', track.language);\n      } else {\n        pushTextTrack(track);\n      }\n    });\n    return textTracks;\n  }\n\n  _parseVideoTracks(castVideoTracks: Array<Object>): Array<VideoTrack> {\n    const videoTracks = [];\n    castVideoTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      videoTracks.push(new VideoTrack(settings));\n    });\n    return videoTracks;\n  }\n\n  _parseAudioTracks(castAudioTracks: Array<Object>): Array<AudioTrack> {\n    const audioTracks = [];\n    castAudioTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      audioTracks.push(new AudioTrack(settings));\n    });\n    return audioTracks;\n  }\n\n  _selectVideoTrack(track: VideoTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().video;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, {selectedVideoTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectAudioTrack(track: AudioTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().audio;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, {selectedAudioTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTextTrack(track: TextTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().text;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, {selectedTextTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTrack(newTrack: Track, currentTrack: ?Track, onSuccess: Function, onFailed: Function): void {\n    this._logger.debug('Select track', newTrack, currentTrack, this._activeTrackIds);\n    if (currentTrack) {\n      const index = this._activeTrackIds.indexOf(currentTrack.id);\n      if (index > -1) {\n        this._activeTrackIds.splice(index, 1);\n      }\n    }\n    if (newTrack.id && newTrack.language !== 'off') {\n      this._activeTrackIds.push(newTrack.id);\n    }\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(this._activeTrackIds);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Select track succeeded');\n        this._markActiveTrack(currentTrack, false);\n        this._markActiveTrack(newTrack, true);\n        onSuccess();\n      },\n      e => {\n        this._logger.debug('Select track failed', e);\n        onFailed(e);\n      }\n    );\n  }\n\n  _markActiveTrack(track: ?Track, active: boolean): void {\n    if (track) {\n      const {id, language} = track;\n      const origTrack = this._tracks.find(t => t.id === id || (t.language === language && language === 'off'));\n      if (origTrack) {\n        origTrack.active = active;\n      }\n    }\n  }\n\n  _addTextTrackOffOption(): void {\n    const textTracks = this._getTracksByType(TrackType.TEXT);\n    if (textTracks && textTracks.length) {\n      this._tracks.push(\n        new TextTrack({\n          active: true,\n          index: textTracks.length,\n          kind: 'subtitles',\n          label: 'Off',\n          language: 'off'\n        })\n      );\n    }\n  }\n\n  _getTracksByType(type?: string): Array<Track> {\n    return !type\n      ? this._tracks\n      : this._tracks.filter(track => {\n          if (type && TRACK_TYPE_TO_INSTANCE[type]) {\n            return track instanceof TRACK_TYPE_TO_INSTANCE[type];\n          }\n          return true;\n        });\n  }\n\n  _onMediaStatusUpdate(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const isTextStyleChanged = () => {\n        const localTextStyle = TextStyleConverter.toCastTextStyle(this.textStyle);\n        const remoteTextStyle = mediaSession.media.textTrackStyle;\n        if (remoteTextStyle) {\n          return !(\n            localTextStyle.backgroundColor === remoteTextStyle.backgroundColor &&\n            localTextStyle.fontFamily === remoteTextStyle.fontFamily &&\n            localTextStyle.fontScale === remoteTextStyle.fontScale &&\n            localTextStyle.foregroundColor === remoteTextStyle.foregroundColor\n          );\n        }\n        return false;\n      };\n      const isActiveTrackIdsChanged = () => {\n        if (mediaSession.activeTrackIds) {\n          return !(\n            this._activeTrackIds.length === mediaSession.activeTrackIds.length &&\n            this._activeTrackIds.every((value, index) => value === mediaSession.activeTrackIds[index])\n          );\n        }\n        return false;\n      };\n      if (isActiveTrackIdsChanged()) {\n        const diffIds = mediaSession.activeTrackIds.filter(i => !this._activeTrackIds.includes(i));\n        diffIds.forEach(id => {\n          const track = this._tracks.find(t => t.id === id);\n          this.selectTrack(track);\n        });\n      }\n      if (isTextStyleChanged()) {\n        const style = TextStyleConverter.toPlayerTextStyle(mediaSession.media.textTrackStyle);\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      }\n    }\n  }\n}\n\nexport {CastTracksManager};\n","// @flow\nimport {core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {EventType, FakeEvent, FakeEventTarget} = core;\n\nclass CastPlaybackEngine extends FakeEventTarget {\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _mediaSession: Object;\n  _muted: boolean = false;\n  _volume: number = 1;\n  _paused: boolean = false;\n  _currentTime: number = 0;\n  _duration: number = 0;\n  _seeking: boolean = false;\n  _seekForward: boolean;\n  _seekTargetTime: ?number;\n  _liveCurrentTimeIntervalId: IntervalID;\n  _onCurrentTimeChanged: Function;\n  _onIsPausedChanged: Function;\n  _onDurationChanged: Function;\n  _onVolumeLevelChanged: Function;\n  _onIsMutedChanged: Function;\n  _onIsMediaLoadedChanged: Function;\n  _onLiveCurrentTimeChanged: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._bindEvents();\n    this._toggleListeners(true);\n  }\n\n  reset(): void {\n    this._toggleListeners(false);\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._resetFlags();\n    this._toggleListeners(true);\n  }\n\n  destroy(): void {\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._toggleListeners(false);\n    this._muted = false;\n    this._volume = 1;\n    this._resetFlags();\n  }\n\n  play(): void {\n    this._remotePlayerController.playOrPause();\n  }\n\n  pause(): void {\n    if (this._remotePlayer.canPause) {\n      this._remotePlayerController.playOrPause();\n    }\n  }\n\n  set muted(value: boolean) {\n    if ((value && !this.muted) || (!value && this.muted)) {\n      this._remotePlayerController.muteOrUnmute();\n    }\n  }\n\n  set volume(value: number) {\n    if (this._remotePlayer.canControlVolume) {\n      this._remotePlayer.volumeLevel = value;\n      this._remotePlayerController.setVolumeLevel();\n    }\n  }\n\n  set currentTime(value: number) {\n    if (this._remotePlayer.canSeek) {\n      this._seeking = true;\n      this.dispatchEvent(new FakeEvent(EventType.SEEKING));\n      this._remotePlayer.currentTime = this._seekTargetTime = value;\n      this._seekForward = value > this.currentTime;\n      this._remotePlayerController.seek();\n    }\n  }\n\n  get duration(): ?number {\n    return this._duration;\n  }\n\n  get paused(): ?boolean {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.isPaused;\n    }\n    return this._paused;\n  }\n\n  get seeking(): ?boolean {\n    return this._seeking;\n  }\n\n  get muted(): ?boolean {\n    return this._muted;\n  }\n\n  get currentTime(): number {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.currentTime;\n    }\n    return this._currentTime;\n  }\n\n  get volume(): ?number {\n    return this._volume;\n  }\n\n  _resetFlags(): void {\n    this._paused = false;\n    this._currentTime = 0;\n    this._duration = 0;\n    this._seeking = false;\n  }\n\n  _bindEvents(): void {\n    this._onCurrentTimeChanged = this._onCurrentTimeChanged.bind(this);\n    this._onIsPausedChanged = this._onIsPausedChanged.bind(this);\n    this._onDurationChanged = this._onDurationChanged.bind(this);\n    this._onVolumeLevelChanged = this._onVolumeLevelChanged.bind(this);\n    this._onIsMutedChanged = this._onIsMutedChanged.bind(this);\n    this._onIsMediaLoadedChanged = this._onIsMediaLoadedChanged.bind(this);\n    this._onLiveCurrentTimeChanged = this._onLiveCurrentTimeChanged.bind(this);\n  }\n\n  _toggleListeners(listen: boolean): void {\n    const listeners = {\n      [cast.framework.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED]: this._onIsMediaLoadedChanged,\n      [cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED]: this._onIsPausedChanged,\n      [cast.framework.RemotePlayerEventType.DURATION_CHANGED]: this._onDurationChanged,\n      [cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED]: this._onVolumeLevelChanged,\n      [cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED]: this._onIsMutedChanged\n    };\n    if (listen) {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.addEventListener(e, listeners[e]));\n    } else {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.removeEventListener(e, listeners[e]));\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n    }\n  }\n\n  _onIsMediaLoadedChanged(isMediaLoadedEvent: Object): void {\n    const onMediaInfoChanged = () => {\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n      if (this._remotePlayer.mediaInfo.streamType === chrome.cast.media.StreamType.LIVE) {\n        this._mediaSession = cast.framework.CastContext.getInstance().getCurrentSession().getMediaSession();\n        this._liveCurrentTimeIntervalId = setInterval(this._onLiveCurrentTimeChanged, INTERVAL_FREQUENCY);\n      } else {\n        this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n      }\n    };\n    if (isMediaLoadedEvent.value) {\n      this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n    }\n  }\n\n  _onCurrentTimeChanged(): void {\n    this._currentTime = this._remotePlayer.currentTime;\n    this._maybeDispatchTimeUpdate();\n    this._maybeEndPlayback();\n  }\n\n  _onLiveCurrentTimeChanged(): void {\n    this._currentTime = this._mediaSession.currentTime;\n    this._maybeDispatchTimeUpdate();\n    this._maybeEndLivePlayback();\n  }\n\n  _onIsPausedChanged(): void {\n    this._paused = this._remotePlayer.isPaused;\n    if (this._paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    } else {\n      this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    }\n  }\n\n  _onDurationChanged(): void {\n    this._duration = this._remotePlayer.duration;\n    this.dispatchEvent(new FakeEvent(EventType.DURATION_CHANGE));\n  }\n\n  _onVolumeLevelChanged(): void {\n    this._volume = this._remotePlayer.volumeLevel;\n    this.dispatchEvent(new FakeEvent(EventType.VOLUME_CHANGE));\n  }\n\n  _onIsMutedChanged(): void {\n    this._muted = this._remotePlayer.isMuted;\n    this.dispatchEvent(new FakeEvent(EventType.MUTE_CHANGE, {mute: this.muted}));\n  }\n\n  _maybeDispatchTimeUpdate(): void {\n    if (!this._seeking) {\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    } else if (\n      this._seekTargetTime &&\n      ((this._seekForward && this.currentTime >= this._seekTargetTime) || (!this._seekForward && this.currentTime <= this._seekTargetTime))\n    ) {\n      this._seeking = false;\n      this._seekTargetTime = null;\n      this.dispatchEvent(new FakeEvent(EventType.SEEKED));\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    }\n  }\n\n  _maybeEndPlayback(): void {\n    const delta = Math.round(this._duration - this._currentTime);\n    if (this._currentTime !== 0 && this._duration !== 0 && delta <= 1) {\n      this._currentTime = this._duration;\n      this._paused = true;\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n\n  _maybeEndLivePlayback(): void {\n    const range = this._mediaSession.liveSeekableRange;\n    if (range && range.isLiveDone) {\n      this._paused = true;\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n}\n\nexport {CastPlaybackEngine};\n","// @flow\n/** @jsx h */\nimport {cast, ui} from 'kaltura-player-js';\n\n// eslint-disable-next-line no-unused-vars\nconst {style, Components, h} = ui;\nconst {RemotePlayerUI} = cast;\n\nclass CastUI extends RemotePlayerUI {\n  playbackUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.OverlayPortal />\n          <Components.BottomBar>\n            <Components.SeekBarPlaybackContainer showFramePreview showTimeBubble player={props.player} playerContainer={props.playerContainer} />\n            <div className={style.leftControls}>\n              <Components.PlaybackControls player={props.player} />\n              <Components.RewindControl player={props.player} step={10} />\n              <Components.ForwardControl player={props.player} step={10} />\n              <Components.TimeDisplayPlaybackContainer format=\"current / total\" />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.LanguageControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n          <Components.CastOverlay player={props.player} />\n          <Components.OverlayAction player={props.player} />\n          <Components.PlaybackControls player={props.player} />\n        </div>\n        <Components.PrePlaybackPlayOverlay player={props.player} />\n        <Components.CastAfterPlay player={props.player} />\n      </div>\n    );\n  }\n\n  liveUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.OverlayPortal />\n          <Components.BottomBar>\n            <Components.SeekBarLivePlaybackContainer showFramePreview showTimeBubble player={props.player} playerContainer={props.playerContainer} />\n            <div className={style.leftControls}>\n              <Components.PlaybackControls player={props.player} />\n              <Components.LiveTag player={props.player} />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.LanguageControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n          <Components.CastOverlay player={props.player} />\n          <Components.OverlayAction player={props.player} />\n          <Components.PlaybackControls player={props.player} />\n        </div>\n        <Components.PrePlaybackPlayOverlay player={props.player} />\n        <Components.CastAfterPlay player={props.player} />\n      </div>\n    );\n  }\n\n  idleUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWrapper}>\n        <Components.Loading player={props.player} />\n        <Components.CastOverlay player={props.player} />\n      </div>\n    );\n  }\n\n  adsUI(props: Object): any {\n    return (\n      <div className={style.adGuiWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.CastOverlay player={props.player} />\n          <Components.OverlayAction player={props.player} />\n          <div>\n            <Components.TopBar>\n              <div className={style.leftControls}>\n                <Components.AdNotice />\n              </div>\n              <div className={style.rightControls}>\n                <Components.AdLearnMore />\n              </div>\n            </Components.TopBar>\n            <Components.AdSkip player={props.player} />\n          </div>\n          <Components.BottomBar>\n            <div className={style.leftControls}>\n              <Components.PlaybackControls player={props.player} />\n              <Components.TimeDisplayAdsContainer />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n          <Components.PlaybackControls player={props.player} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {CastUI};\n","// @flow\nimport {core} from 'kaltura-player-js';\n\nconst {Utils, getLogger} = core;\n\nconst SENDER_SDK_URL: string = '//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';\n\nclass CastLoader {\n  static _logger: any = getLogger('CastLoader');\n\n  static load(): Promise<*> {\n    return new Promise((resolve, reject) => {\n      window['__onGCastApiAvailable'] = isAvailable => CastLoader._onGCastApiAvailable(isAvailable, resolve);\n      CastLoader._loadCastSDK()\n        .then(() => CastLoader._logger.debug('Cast sender lib has been loaded successfully'))\n        .catch(e => {\n          CastLoader._logger.debug('Cast sender lib loading failed', e);\n          reject(e);\n        });\n    });\n  }\n\n  static _loadCastSDK(): Promise<*> {\n    if (window['cast'] && window['cast']['framework']) {\n      return Promise.resolve();\n    }\n    return Utils.Dom.loadScriptAsync(SENDER_SDK_URL);\n  }\n\n  static _onGCastApiAvailable(isAvailable: boolean, resolve: Function): void {\n    CastLoader._logger.debug(`onGCastApiAvailable, isAvailable: ${isAvailable.toString()}`);\n    if (isAvailable) {\n      resolve();\n    } else {\n      CastLoader._logger.debug(`Google cast API isn't available yet`);\n    }\n  }\n}\n\nexport {CastLoader};\n","// @flow\nimport {CUSTOM_CHANNEL} from './cast-player';\nimport {cast as remote} from 'kaltura-player-js';\n\nconst {CustomActionMessage, CustomActionType} = remote;\n\n/**\n * Cast Ads Controller.\n * @class CastAdsController\n */\nclass CastAdsController {\n  _castSession: Object;\n\n  constructor() {\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n  }\n\n  /**\n   * Skips on an ad.\n   * @returns {void}\n   * @memberof CastAdsController\n   * @instance\n   */\n  skipAd(): void {\n    this._castSession.sendMessage(CUSTOM_CHANNEL, new CustomActionMessage(CustomActionType.SKIP_AD));\n  }\n}\n\nexport {CastAdsController};\n","// @flow\nimport {CastPlayer} from './cast-player';\nimport {core} from 'kaltura-player-js';\n\nconst {EventManager, EventType, FakeEventTarget} = core;\n\nclass CastAdsManager extends FakeEventTarget {\n  _castPlayer: CastPlayer;\n  _adBreak: boolean = false;\n  _allAdsCompleted: boolean = true;\n  _eventManager: EventManager;\n\n  constructor(castPlayer: CastPlayer) {\n    super();\n    this._castPlayer = castPlayer;\n    this._eventManager = new EventManager();\n    this._attachListeners();\n  }\n\n  _attachListeners(): void {\n    this._eventManager.listen(this._castPlayer, EventType.AD_MANIFEST_LOADED, () => {\n      this._allAdsCompleted = false;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_START, () => {\n      this._adBreak = true;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_END, () => {\n      this._adBreak = false;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.ALL_ADS_COMPLETED, () => {\n      this._allAdsCompleted = true;\n    });\n  }\n\n  get adBreak(): boolean {\n    return this._adBreak;\n  }\n\n  get allAdsCompleted(): boolean {\n    return this._allAdsCompleted;\n  }\n\n  reset(): void {\n    this._eventManager.removeAll();\n    this._adBreak = false;\n    this._allAdsCompleted = true;\n    this._attachListeners();\n  }\n\n  destroy(): void {\n    this._adBreak = false;\n    this._allAdsCompleted = true;\n    this._eventManager.destroy();\n  }\n}\n\nexport {CastAdsManager};\n","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {CastStateManager} from './cast-state-manager';\nimport {CastTracksManager} from './cast-tracks-manager';\nimport {CastPlaybackEngine} from './cast-playback-engine';\nimport {CastUI} from './cast-ui';\nimport {CastLoader} from './cast-loader';\nimport {CastAdsController} from './cast-ads-controller';\nimport {CastAdsManager} from './cast-ads-manager';\n\nconst {Env, Track, TextStyle, EventType, StateType, FakeEvent, Utils, EngineType, AbrMode, Error} = core;\nconst {\n  BaseRemotePlayer,\n  PlayerSnapshot,\n  RemoteControl,\n  RemoteConnectedPayload,\n  RemoteDisconnectedPayload,\n  RemoteAvailablePayload,\n  RemoteSession,\n  TextStyleConverter,\n  CustomMessageType,\n  CustomMessage,\n  CustomEventMessage\n} = remote;\n\nexport const INTERVAL_FREQUENCY = 500;\nexport const SECONDS_TO_MINUTES_DIVIDER = 60;\nexport const CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\n\n/**\n * The threshold in seconds from duration that we still consider it as live edge\n * @type {number}\n * @const\n */\nconst LIVE_EDGE_THRESHOLD: number = 10;\n\n/**\n * Cast Sender Player.\n * @class CastPlayer\n * @param {CastConfigObject} config - The cast configuration.\n * @param {RemoteControl} remoteControl - The remote control.\n * @extends BaseRemotePlayer\n */\nclass CastPlayer extends BaseRemotePlayer {\n  /**\n   * The remote player type.\n   * @static\n   * @type {string}\n   * @memberof CastPlayer\n   * @override\n   */\n  static Type: string = 'chromecast';\n\n  /**\n   * @function isSupported\n   * @static\n   * @returns {boolean} - Whether the cast player is supported in the current runtime environment.\n   * @memberof CastPlayer\n   * @override\n   */\n  static isSupported(): boolean {\n    return Env.browser.name === 'Chrome' && Env.os.name !== 'iOS';\n  }\n\n  /**\n   * The default cast configuration.\n   * @static\n   * @type {Object}\n   * @memberof CastPlayer\n   * @override\n   */\n  static defaultConfig: Object = {\n    liveEdgeThreshold: 5\n  };\n\n  _remoteSession: RemoteSession;\n  _castSession: Object;\n  _castContext: Object;\n  _castRemotePlayer: Object;\n  _castRemotePlayerController: Object;\n  _ui: CastUI;\n  _stateManager: CastStateManager;\n  _tracksManager: CastTracksManager;\n  _engine: CastPlaybackEngine;\n  _readyPromise: ?Promise<*> = null;\n  _mediaInfo: ?Object = null;\n  _firstPlay: boolean = true;\n  _ended: boolean = false;\n  _playbackStarted: boolean = false;\n  _reset: boolean = true;\n  _destroyed: boolean = false;\n  _isOnLiveEdge: boolean = false;\n  _mediaInfoIntervalId: IntervalID;\n  _adsController: CastAdsController;\n  _adsManager: CastAdsManager;\n\n  constructor(castConfig: CastConfigObject, remoteControl: RemoteControl) {\n    super('CastPlayer', castConfig, remoteControl);\n    CastLoader.load()\n      .then(() => {\n        this._initializeCastApi();\n        this._initializeRemotePlayer();\n      })\n      .catch(e => {\n        CastPlayer._logger.error('Cast initialized error', e);\n      });\n  }\n\n  /**\n   * Loads a media to the receiver application.\n   * @param {ProviderMediaInfoObject} mediaInfo - The entry media info.\n   * @param {Object} [options] - The request options. See {@link https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.LoadRequest|chrome.cast.media.LoadRequest}\n   * @returns {Promise<void>} - Promise to indicate load succeed or failed.\n   * @instance\n   * @memberof CastPlayer\n   */\n  loadMedia(mediaInfo: Object, options?: Object): Promise<*> {\n    CastPlayer._logger.debug('Load media', mediaInfo, options);\n    this._mediaInfo = mediaInfo;\n    return this._castMedia({mediaInfo}, options);\n  }\n\n  /**\n   * Set a media to the receiver application.\n   * @param {ProviderMediaConfigObject} mediaConfig - The entry media config.\n   * @param {Object} [options] - The request options. See {@link https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.LoadRequest|chrome.cast.media.LoadRequest}\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  setMedia(mediaConfig: Object, options?: Object): void {\n    CastPlayer._logger.debug('Set media', mediaConfig, options);\n    this._castMedia({mediaConfig}, options);\n  }\n\n  /**\n   * Gets the media Info.\n   * @returns {ProviderMediaInfoObject} - The media info.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getMediaInfo(): ?Object {\n    return Utils.Object.copyDeep(this._mediaInfo);\n  }\n\n  /**\n   * Gets the media config.\n   * @returns {ProviderMediaConfigObject} - The media config.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getMediaConfig(): ?Object {\n    const mediaConfig = {\n      sources: this._playerConfig.sources,\n      plugins: this._playerConfig.plugins\n    };\n    return Utils.Object.copyDeep(mediaConfig);\n  }\n\n  /**\n   * The cast player readiness.\n   * @returns {Promise<*>} - Promise which resolved when the cast player is ready.\n   * @instance\n   * @memberof CastPlayer\n   */\n  ready(): Promise<*> {\n    return this._readyPromise ? this._readyPromise : Promise.resolve();\n  }\n\n  /**\n   * Start/resume playback.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  play(): void {\n    if (!this.ended || this._adsManager.adBreak) {\n      this._engine.play();\n    } else {\n      this._loadOrSetMedia({\n        mediaInfo: this._mediaInfo,\n        mediaConfig: this.getMediaConfig()\n      });\n    }\n  }\n\n  /**\n   * Pause playback.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  pause(): void {\n    this._engine.pause();\n  }\n\n  /**\n   * Stops and reset the cast player.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  reset(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._reset) return;\n    this._reset = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._isOnLiveEdge = false;\n    this._tracksManager.reset();\n    this._engine.reset();\n    this._adsManager.reset();\n    this._stateManager.reset();\n    this._readyPromise = this._createReadyPromise();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_RESET));\n  }\n\n  /**\n   * Destroys the cast player.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  destroy(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._isOnLiveEdge = false;\n    this._readyPromise = null;\n    this._eventManager.destroy();\n    this._tracksManager.destroy();\n    this._engine.destroy();\n    this._adsManager.destroy();\n    this._stateManager.destroy();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_DESTROY));\n  }\n\n  /**\n   * @returns {boolean} - Whether the current playback is a live playback.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isLive(): boolean {\n    const mediaInfo = this._castRemotePlayer.mediaInfo;\n    return mediaInfo ? mediaInfo.streamType === chrome.cast.media.StreamType.LIVE : false;\n  }\n\n  /**\n   * Get whether the video is seeked to live edge in dvr\n   * @returns {boolean} - Whether the video is seeked to live edge in dvr\n   * @public\n   */\n  isOnLiveEdge(): boolean {\n    return this._isOnLiveEdge;\n  }\n\n  /**\n   * @returns {boolean} - Whether the current live playback has DVR window. In case of non-live playback will return false.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isDvr(): boolean {\n    if (this.isLive()) {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        const range = mediaSession.liveSeekableRange;\n        if (range) {\n          const startMinutes = range.start / SECONDS_TO_MINUTES_DIVIDER;\n          const endMinutes = range.end / SECONDS_TO_MINUTES_DIVIDER;\n          return endMinutes - startMinutes > this._castConfig.liveEdgeThreshold;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Seeks to the live edge.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  seekToLiveEdge(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        this._engine.currentTime = range.end;\n      }\n    }\n  }\n\n  /**\n   * @returns {number} - The start time of the DVR window.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getStartTimeOfDvrWindow(): number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        return range.start;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * @function enableAdaptiveBitrate\n   * @description Enables automatic adaptive bitrate switching.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  /**\n   * @function isAdaptiveBitrateEnabled\n   * @returns {boolean} - Whether adaptive bitrate is enabled.\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  /**\n   * @param {string} [type] - Track type.\n   * @returns {Array<Track>} - The cast player tracks.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getTracks(type?: string): Array<Track> {\n    return this._tracksManager.getTracks(type);\n  }\n\n  /**\n   * @returns {Object} - The cast player active tracks.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getActiveTracks(): Object {\n    return this._tracksManager.getActiveTracks();\n  }\n\n  /**\n   * Select a certain track to be active.\n   * @param {Track} track - The track to activate.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  selectTrack(track: ?Track): void {\n    this._tracksManager.selectTrack(track);\n  }\n\n  /**\n   * Hides the active text track.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  hideTextTrack(): void {\n    this._tracksManager.hideTextTrack();\n  }\n\n  /**\n   * Start casting.\n   * @returns {Promise<*>} - A promise to indicate session is starting, or failed\n   * @instance\n   * @memberof CastPlayer\n   */\n  startCasting(): Promise<*> {\n    return cast && cast.framework ? cast.framework.CastContext.getInstance().requestSession() : Promise.reject();\n  }\n\n  /**\n   * @returns {boolean} - Whether casting is available.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isCastAvailable(): boolean {\n    return !!this._castRemotePlayer;\n  }\n\n  /**\n   * Stops the current cast session.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  stopCasting(): void {\n    this._castSession.endSession(true);\n  }\n\n  /**\n   * Gets the current remote session.\n   * @returns {RemoteSession} - The remote session.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getCastSession(): RemoteSession {\n    return Utils.Object.copyDeep(this._remoteSession);\n  }\n\n  /**\n   * @return {CastAdsController} - The cast ads controller.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get ads(): ?CastAdsController {\n    return this._adsController;\n  }\n\n  /**\n   * Setter.\n   * @param {TextStyle} style - The text style to set.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set textStyle(style: TextStyle): void {\n    this._tracksManager.textStyle = style;\n  }\n\n  /**\n   * Getter.\n   * @returns {TextStyle} - The current text style.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get textStyle(): ?TextStyle {\n    return this._tracksManager.textStyle;\n  }\n\n  /**\n   * Setter.\n   * @param {number} to - The number to set in seconds.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set currentTime(to: number): void {\n    this._engine.currentTime = to;\n  }\n\n  /**\n   * Getter.\n   * @returns {number} - The current time in seconds.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get currentTime(): ?number {\n    return this._engine.currentTime;\n  }\n\n  /**\n   * @returns {number} - The duration in seconds.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get duration(): ?number {\n    return this._engine.duration;\n  }\n\n  /**\n   * Setter.\n   * @param {number} vol - The volume to set in the range of 0-1.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set volume(vol: number): void {\n    this._engine.volume = vol;\n  }\n\n  /**\n   * Getter.\n   * @returns {number} - The current volume in the range of 0-1.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get volume(): ?number {\n    return this._engine.volume;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in paused state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get paused(): ?boolean {\n    return this._engine.paused;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in ended state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get ended(): ?boolean {\n    return this._ended;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in seeking state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get seeking(): ?boolean {\n    return this._engine.seeking;\n  }\n\n  /**\n   * Setter.\n   * @param {boolean} mute - The mute value to set.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set muted(mute: boolean): void {\n    this._engine.muted = mute;\n  }\n\n  /**\n   * Getter.\n   * @returns {boolean} - The muted state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get muted(): ?boolean {\n    return this._engine.muted;\n  }\n\n  /**\n   * @returns {string} - The current playing source url.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get src(): ?string {\n    if (this._castRemotePlayer.mediaInfo) {\n      return this._castRemotePlayer.mediaInfo.contentUrl;\n    }\n    return '';\n  }\n\n  /**\n   * @returns {string} - The current poster url.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get poster(): string {\n    try {\n      return this._castRemotePlayer.mediaInfo.metadata.images[0].url;\n    } catch (e) {\n      return '';\n    }\n  }\n\n  /**\n   * @returns {string} - The current playback rate.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get playbackRate(): ?number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      return mediaSession.playbackRate;\n    }\n    return null;\n  }\n\n  /**\n   * @returns {string} - The active engine type.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get engineType(): ?string {\n    return EngineType.CAST;\n  }\n\n  /**\n   * @returns {string} - The remote player type.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get type(): string {\n    return CastPlayer.Type;\n  }\n\n  /**\n   * @name config\n   * @returns {Object} - The runtime cast player config.\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  _initializeCastApi(): void {\n    const options: Object = {};\n\n    options.receiverApplicationId = this._castConfig.receiverApplicationId || chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;\n    options.autoJoinPolicy = this._castConfig.autoJoinPolicy || chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n\n    CastPlayer._logger.debug('Init cast API with options', options);\n    const castContext = cast.framework.CastContext.getInstance();\n    castContext.setOptions(options);\n    castContext.addEventListener(cast.framework.CastContextEventType.CAST_STATE_CHANGED, event => {\n      const payload = new RemoteAvailablePayload(this, event.castState !== cast.framework.CastState.NO_DEVICES_AVAILABLE);\n      this._remoteControl.onRemoteDeviceAvailable(payload);\n    });\n  }\n\n  _initializeRemotePlayer(): void {\n    this._castContext = cast.framework.CastContext.getInstance();\n    this._addSessionLifecycleListeners();\n    this._castRemotePlayer = new cast.framework.RemotePlayer();\n    this._castRemotePlayerController = new cast.framework.RemotePlayerController(this._castRemotePlayer);\n    this._castRemotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, () => {\n      if (this._castRemotePlayer.isConnected) {\n        this._setupRemotePlayer();\n      } else {\n        this._setupLocalPlayer();\n      }\n    });\n  }\n\n  _setupRemotePlayer(): void {\n    CastPlayer._logger.debug('Setup remote player');\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._castSession.addMessageListener(CUSTOM_CHANNEL, (customChannel, customMessage) => this._onCustomMessage(customChannel, customMessage));\n    this._tracksManager = new CastTracksManager(this._castRemotePlayer);\n    this._engine = new CastPlaybackEngine(this._castRemotePlayer, this._castRemotePlayerController);\n    this._stateManager = new CastStateManager(this._castRemotePlayer, this._castRemotePlayerController);\n    this._adsManager = new CastAdsManager(this);\n    this._ui = new CastUI();\n    this._attachListeners();\n    const snapshot = this._remoteControl.getPlayerSnapshot();\n    this._playerConfig = snapshot.config;\n    this._remoteSession = new RemoteSession(\n      this._castSession.getSessionId(),\n      this._castSession.getCastDevice().friendlyName,\n      this._castSession.getSessionState() !== cast.framework.SessionState.SESSION_STARTED\n    );\n    const payload = new RemoteConnectedPayload(this, this._remoteSession, this._ui);\n    this._remoteControl.onRemoteDeviceConnected(payload);\n    if (this._remoteSession.resuming && !(Env.browser.major >= 73 && Env.os.name === 'Android')) {\n      // Android Chrome 73 and up gets SESSION_RESUMED also in the initial session\n      this._resumeSession();\n    } else if (snapshot) {\n      const loadOptions = this._getLoadOptions(snapshot);\n      this._loadOrSetMedia(snapshot, loadOptions);\n    }\n  }\n\n  _loadOrSetMedia(mediaObject: Object, options?: Object): void {\n    const {mediaInfo, mediaConfig} = mediaObject;\n    if (mediaInfo) {\n      this.loadMedia(mediaInfo, options);\n    } else if (mediaConfig) {\n      this.setMedia({sources: mediaObject.mediaConfig.sources, plugins: {}}, options);\n    }\n  }\n\n  _castMedia(mediaObject: Object, options?: Object): Promise<*> {\n    this.reset();\n    this._remoteControl.getUIWrapper().reset();\n\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_STARTED));\n    }\n    const media = new chrome.cast.media.MediaInfo();\n    const request = new chrome.cast.media.LoadRequest(media);\n\n    if (options) {\n      Object.keys(options).forEach(option => {\n        if (option !== 'media') {\n          // $FlowFixMe\n          request[option] = options[option];\n        } else {\n          // $FlowFixMe\n          Object.keys(options.media).forEach(mediaOption => {\n            // $FlowFixMe\n            media[mediaOption] = options.media[mediaOption];\n          });\n        }\n      });\n    }\n\n    media.customData = media.customData || {};\n    media.customData.mediaInfo = mediaObject.mediaInfo;\n    media.customData.mediaConfig = mediaObject.mediaConfig;\n    return this._castSession.loadMedia(request).then(\n      () => this._onLoadMediaSuccess(),\n      error => this._onLoadMediaFailed(error)\n    );\n  }\n\n  _setupLocalPlayer(): void {\n    CastPlayer._logger.debug('Setup local player');\n    const snapshot = new PlayerSnapshot(this);\n    const payload = new RemoteDisconnectedPayload(this, snapshot);\n    this.pause();\n    this.destroy();\n    this._remoteControl.onRemoteDeviceDisconnected(payload);\n  }\n\n  _createReadyPromise(): void {\n    this._readyPromise = new Promise(resolve => {\n      this._eventManager.listenOnce(this, EventType.TRACKS_CHANGED, () => {\n        this.dispatchEvent(new FakeEvent(EventType.MEDIA_LOADED));\n        resolve();\n      });\n    });\n  }\n\n  _attachListeners(): void {\n    this._eventManager.listen(this._engine, EventType.TIME_UPDATE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.PAUSE, e => this._onPause(e));\n    this._eventManager.listen(this._engine, EventType.PLAY, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.VOLUME_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.MUTE_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.DURATION_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.ENDED, e => this._onEnded(e));\n    this._eventManager.listen(this._engine, EventType.SEEKING, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.SEEKED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TRACKS_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.VIDEO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.AUDIO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_STYLE_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.ERROR, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._stateManager, EventType.PLAYER_STATE_CHANGED, e => this._onPlayerStateChanged(e));\n  }\n\n  _onPause(e: FakeEvent): void {\n    this._isOnLiveEdge = false;\n    this._eventManager.listenOnce(this._engine, EventType.PLAY, () => {\n      this._isOnLiveEdge = true;\n    });\n    this.dispatchEvent(e);\n  }\n\n  _onEnded(e: FakeEvent): void {\n    this._ended = true;\n    this.dispatchEvent(e);\n    if (this._adsManager.allAdsCompleted) {\n      this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n    } else {\n      this._eventManager.listenOnce(this, EventType.ALL_ADS_COMPLETED, () => {\n        this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n      });\n    }\n  }\n\n  _onPlayerStateChanged(e: FakeEvent): void {\n    if (this._ended) return;\n    if (this._stateManager.currentState.type === StateType.PLAYING) {\n      this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    }\n    this.dispatchEvent(e);\n  }\n\n  _handleFirstPlay(): void {\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_ENDED));\n    }\n    this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_START));\n    this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAYING));\n    this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    if (this.paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    }\n    this._firstPlay = false;\n    this._playbackStarted = true;\n  }\n\n  _resumeSession(): void {\n    this._readyPromise = this._createReadyPromise();\n    this._mediaInfoIntervalId = setInterval(() => {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession && mediaSession.customData) {\n        clearInterval(this._mediaInfoIntervalId);\n        this._mediaInfo = mediaSession.customData.mediaInfo;\n        CastPlayer._logger.debug('Resuming session with media info', this._mediaInfo);\n        this._onLoadMediaSuccess();\n      }\n    }, INTERVAL_FREQUENCY);\n  }\n\n  _onLoadMediaSuccess(): void {\n    CastPlayer._logger.debug('Load media success');\n    this._reset = false;\n    this._triggerInitialPlayerEvents();\n    this._tracksManager.parseTracks();\n    this._handleFirstPlay();\n    let startTime = this._playerConfig.playback.startTime;\n    if (this.isLive() && (startTime === -1 || (typeof this.duration === 'number' && startTime >= this.duration - LIVE_EDGE_THRESHOLD))) {\n      this._isOnLiveEdge = true;\n    }\n  }\n\n  _triggerInitialPlayerEvents(): void {\n    this.dispatchEvent(\n      new FakeEvent(EventType.SOURCE_SELECTED, {\n        selectedSource: [\n          {\n            url: this._castRemotePlayer.mediaInfo.contentUrl,\n            mimetype: this._castRemotePlayer.mediaInfo.contentType\n          }\n        ]\n      })\n    );\n    this.dispatchEvent(new FakeEvent(EventType.LOADED_METADATA));\n    this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, {mode: AbrMode.AUTO}));\n  }\n\n  _onLoadMediaFailed(error: Object): void {\n    CastPlayer._logger.debug('Load media falied', error);\n    this.dispatchEvent(\n      new FakeEvent(EventType.ERROR, new Error(Error.Severity.CRITICAL, Error.Category.CAST, Error.Code.CAST_LOAD_MEDIA_FAILED, error))\n    );\n  }\n\n  _addSessionLifecycleListeners(): void {\n    this._castContext.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, event => {\n      switch (event.sessionState) {\n        case cast.framework.SessionState.SESSION_STARTING:\n          this._remoteControl.onRemoteDeviceConnecting();\n          break;\n        case cast.framework.SessionState.SESSION_RESUMED:\n          if (Env.browser.major >= 73 && Env.os.name === 'Android') {\n            this._remoteControl.onRemoteDeviceConnecting();\n          }\n          break;\n        case cast.framework.SessionState.SESSION_ENDING:\n          this._remoteControl.onRemoteDeviceDisconnecting();\n          break;\n        case cast.framework.SessionState.SESSION_START_FAILED:\n          this._remoteControl.onRemoteDeviceConnectFailed();\n          break;\n      }\n    });\n  }\n\n  _getLoadOptions(snapshot: PlayerSnapshot): Object {\n    const loadOptions = {\n      autoplay: this._playerConfig.playback.autoplay,\n      currentTime: this._playerConfig.playback.startTime,\n      media: {}\n    };\n    if (this.textStyle && !this.textStyle.isEqual(snapshot.textStyle)) {\n      loadOptions.media.textTrackStyle = TextStyleConverter.toCastTextStyle(snapshot.textStyle);\n    }\n    loadOptions.media.customData = {\n      audioLanguage: this._playerConfig.playback.audioLanguage,\n      textLanguage: this._playerConfig.playback.textLanguage\n    };\n    if (snapshot.advertising && snapshot.advertising.adTagUrl) {\n      this._adsController = new CastAdsController();\n      const castAdvertising = this._castConfig.advertising;\n      if (!castAdvertising || !castAdvertising.vast) {\n        loadOptions.media.vmapAdsRequest = this._getAdsRequest(snapshot.advertising);\n      } else {\n        const breakClipId = Utils.Generator.uniqueId(5);\n        const breakId = Utils.Generator.uniqueId(5);\n        const breakClips = [\n          {\n            id: breakClipId,\n            position: 0,\n            vastAdsRequest: this._getAdsRequest(snapshot.advertising)\n          }\n        ];\n        const breaks = [\n          {\n            breakClipIds: [breakClipId],\n            id: breakId,\n            position: 0\n          }\n        ];\n        loadOptions.media.breakClips = breakClips;\n        loadOptions.media.breaks = breaks;\n      }\n    }\n    const externalCaptions = this._getExternalCaptions();\n    externalCaptions.length && (loadOptions.media.tracks = externalCaptions);\n    return loadOptions;\n  }\n\n  _getExternalCaptions() {\n    const externalCaptions = [];\n    if (this._playerConfig.sources.captions && this._playerConfig.sources.captions.length) {\n      this._playerConfig.sources.captions.forEach((caption, index) => {\n        if (caption.type === 'vtt' || caption.url.endsWith('.vtt')) {\n          let newTrack;\n          newTrack = new chrome.cast.media.Track(index + 1, chrome.cast.media.TrackType.TEXT);\n          Utils.Object.mergeDeep(newTrack, {\n            trackContentId: caption.url,\n            trackContentType: 'text/vtt',\n            name: caption.label,\n            language: caption.language\n          });\n          externalCaptions.push(newTrack);\n        } else {\n          CastPlayer._logger.warn(`Text track type ${caption.type} is unsupported by Cast receiver`);\n        }\n      });\n    }\n    return externalCaptions;\n  }\n\n  _getAdsRequest(advertising: Object): Object {\n    const adsRequest = {};\n    if (advertising.adTagUrl) {\n      adsRequest.adTagUrl = advertising.adTagUrl;\n    }\n    if (advertising.adsResponse) {\n      adsRequest.adsResponse = advertising.adsResponse;\n    }\n    return adsRequest;\n  }\n\n  _onCustomMessage(customChannel: string, customMessage: CustomMessage): void {\n    try {\n      const parsedCustomMessage = JSON.parse(customMessage);\n      CastPlayer._logger.debug('Custom message received', parsedCustomMessage);\n      switch (parsedCustomMessage.type) {\n        case CustomMessageType.EVENT:\n          this._handleCustomEvent(parsedCustomMessage);\n          break;\n      }\n    } catch (e) {\n      this.dispatchEvent(\n        new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_CUSTOM_MESSAGE_PARSING_ERROR, e))\n      );\n    }\n  }\n\n  _handleCustomEvent(customEvent: CustomEventMessage): void {\n    this.dispatchEvent(new FakeEvent(customEvent.event, customEvent.payload));\n  }\n}\n\nexport {CastPlayer};\n","// @flow\nimport {CastPlayer} from './cast-player';\nimport {cast} from 'kaltura-player-js';\n\nconst {registerRemotePlayer} = cast;\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nconst NAME = __NAME__;\nconst VERSION = __VERSION__;\n\nexport {CastPlayer as RemotePlayer};\nexport {VERSION, NAME};\n\nif (CastPlayer.isSupported()) {\n  registerRemotePlayer(CastPlayer.Type, CastPlayer);\n}\n"],"sourceRoot":""}