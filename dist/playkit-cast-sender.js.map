{"version":3,"sources":["./cast/sender/webpack/universalModuleDefinition","./cast/sender/playkit-cast-sender.js","./cast/sender/webpack/bootstrap 55af7330cf1fb9b776e6","./cast/sender/external {\"commonjs\":\"kaltura-player-js\",\"commonjs2\":\"kaltura-player-js\",\"amd\":\"kaltura-player-js\",\"root\":[\"KalturaPlayer\"]}","./cast/sender/./cast-player.js","./cast/sender/./index.js","./cast/sender/./cast-state-manager.js","./cast/sender/./cast-tracks-manager.js","./cast/sender/./cast-playack-engine.js","./cast/sender/./cast-ui.js","./cast/sender/./cast-loader.js","./cast/sender/./cast-ads-controller.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_0__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","CastPlayer","CUSTOM_CHANNEL","SECONDS_TO_MINUTES_DIVIDER","INTERVAL_FREQUENCY","undefined","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_kalturaPlayerJs","_castStateManager","_castTracksManager","_castPlayackEngine","_castUi","_castLoader","_castAdsController","Env","core","EventType","Track","TextStyle","StateType","FakeEvent","Utils","EngineType","AbrMode","Error","BaseRemotePlayer","cast","PlayerSnapshot","RemoteConnectedPayload","RemoteControl","RemoteDisconnectedPayload","RemoteAvailablePayload","RemoteSession","TextStyleConverter","CustomMessageType","CustomMessage","CustomEventMessage","_BaseRemotePlayer","config","remoteControl","_this","getPrototypeOf","_readyPromise","_mediaInfo","_firstPlay","_ended","_playbackStarted","_reset","_destroyed","CastLoader","load","then","_initializeCastApi","_initializeRemotePlayer","catch","e","_logger","error","browser","mediaInfo","options","_this2","debug","reset","_remoteControl","getUIWrapper","dispatchEvent","CHANGE_SOURCE_STARTED","media","chrome","MediaInfo","request","LoadRequest","keys","forEach","option","mediaOption","customData","_castSession","loadMedia","_onLoadMediaSuccess","_onLoadMediaFailed","copyDeep","Promise","resolve","paused","_engine","play","pause","clearInterval","_mediaInfoIntervalId","_tracksManager","_stateManager","_createReadyPromise","PLAYER_RESET","_eventManager","destroy","PLAYER_DESTROY","_castRemotePlayer","streamType","StreamType","LIVE","isLive","mediaSession","getMediaSession","range","liveSeekableRange","startMinutes","start","end","_config","dvrThreshold","currentTime","type","getTracks","getActiveTracks","track","selectTrack","hideTextTrack","framework","CastContext","getInstance","requestSession","reject","endSession","_remoteSession","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","setOptions","payload","onRemoteDeviceAvailable","_this3","_castContext","_addSessionLifecycleListeners","RemotePlayer","_castRemotePlayerController","RemotePlayerController","addEventListener","RemotePlayerEventType","IS_CONNECTED_CHANGED","isConnected","_setupRemotePlayer","_setupLocalPlayer","_this4","getCurrentSession","addMessageListener","customChannel","customMessage","_onCustomMessage","CastTracksManager","CastPlaybackEngine","CastStateManager","_ui","CastUI","_attachListeners","snapshot","getPlayerSnapshot","getSessionId","getCastDevice","friendlyName","getSessionState","SessionState","SESSION_STARTED","onRemoteDeviceConnected","resuming","_resumeSession","loadOptions","_getLoadOptions","onRemoteDeviceDisconnected","_this5","listenOnce","TRACKS_CHANGED","MEDIA_LOADED","_this6","listen","TIME_UPDATE","PAUSE","PLAY","VOLUME_CHANGE","MUTE_CHANGE","DURATION_CHANGE","ENDED","_onEnded","TEXT_TRACK_CHANGED","VIDEO_TRACK_CHANGED","AUDIO_TRACK_CHANGED","TEXT_STYLE_CHANGED","ERROR","PLAYER_STATE_CHANGED","_onPlayerStateChanged","currentState","PLAYING","CHANGE_SOURCE_ENDED","FIRST_PLAY","PLAYBACK_STARTED","_this7","setInterval","_triggerInitialPlayerEvents","parseTracks","_handleFirstPlay","SOURCE_SELECTED","selectedSource","url","contentUrl","mimetype","contentType","LOADED_METADATA","ABR_MODE_CHANGED","mode","AUTO","Severity","CRITICAL","Category","CAST","Code","CAST_LOAD_MEDIA_FAILED","_this8","CastContextEventType","SESSION_STATE_CHANGED","event","sessionState","SESSION_STARTING","onRemoteDeviceConnecting","SESSION_ENDING","onRemoteDeviceDisconnecting","SESSION_START_FAILED","onRemoteDeviceConnectFailed","autoplay","startTime","textStyle","isEqual","textTrackStyle","toCastTextStyle","audioLanguage","textLanguage","advertising","adTagUrl","_adsController","CastAdsController","castAdvertising","vast","breakClipId","Generator","uniqueId","breakId","breakClips","id","position","vastAdsRequest","_getAdsRequest","breaks","breakClipIds","vmapAdsRequest","adsRequest","adsResponse","parsedCustomMessage","JSON","parse","EVENT","_handleCustomEvent","RECOVERABLE","CAST_CUSTOM_MESSAGE_PARSING_ERROR","customEvent","set","style","to","duration","vol","volume","seeking","mute","muted","metadata","images","playbackRate","HTML5","Type","defaultConfig","NAME","VERSION","_castPlayer","registerRemotePlayer","isSupported","State","FakeEventTarget","_FakeEventTarget","remotePlayer","remotePlayerController","_remotePlayer","_remotePlayerController","_currentState","IDLE","_previousState","_updateState","bind","Date","now","playerState","toLowerCase","oldState","previousState","newState","removeEventListener","_defineProperty","obj","_TRACK_TYPE_TO_INSTAN","getLogger","AudioTrack","VideoTrack","TextTrack","TrackType","TRACK_TYPE_TO_INSTANCE","AUDIO","VIDEO","TEXT","_activeTrackIds","_tracks","_textStyle","_bindEvents","tracks","castTextTracks","filter","t","castVideoTracks","castAudioTracks","textTracks","_parseTextTracks","videoTracks","_parseVideoTracks","audioTracks","_parseAudioTracks","concat","_addTextTrackOffOption","_startOnMediaStatusUpdateInterval","_getTracksByType","video","find","active","audio","text","_selectVideoTrack","_selectAudioTrack","_selectTextTrack","offTrack","language","_stopOnMediaStatusUpdateInterval","_mediaStatusIntervalId","_onMediaStatusUpdate","settings","trackId","index","label","kind","subType","push","currentTrack","_selectTrack","selectedVideoTrack","EDIT_TRACKS_INFO_ERROR","selectedAudioTrack","CAST_EDIT_TRACKS_INFO_ERROR","selectedTextTrack","newTrack","onSuccess","onFailed","indexOf","splice","tracksInfoRequest","EditTracksInfoRequest","editTracksInfo","_markActiveTrack","origTrack","lastTrack","activeTrackIds","every","includes","localTextStyle","remoteTextStyle","backgroundColor","fontFamily","fontScale","foregroundColor","toPlayerTextStyle","clone","_muted","_volume","_paused","_currentTime","_duration","_seeking","_toggleListeners","_liveCurrentTimeIntervalId","_resetFlags","playOrPause","canPause","_onCurrentTimeChanged","_onIsPausedChanged","_onDurationChanged","_onVolumeLevelChanged","_onIsMutedChanged","_onIsMediaLoadedChanged","_onLiveCurrentTimeChanged","_listeners","listeners","IS_MEDIA_LOADED_CHANGED","IS_PAUSED_CHANGED","DURATION_CHANGED","VOLUME_LEVEL_CHANGED","IS_MUTED_CHANGED","CURRENT_TIME_CHANGED","isMediaLoadedEvent","onMediaInfoChanged","MEDIA_INFO_CHANGED","_mediaSession","_maybeEndPlayback","_maybeEndLivePlayback","isPaused","volumeLevel","isMuted","delta","Math","round","isLiveDone","muteOrUnmute","canControlVolume","setVolumeLevel","canSeek","seek","savedPlayerState","ui","Components","RemotePlayerUI","_RemotePlayerUI","apply","arguments","h","className","playbackGuiWWrapper","KeyboardControl","player","Loading","playerGui","OverlayPortal","BottomBar","SeekBarPlaybackContainer","showFramePreview","showTimeBubble","playerContainer","leftControls","PlayPauseControl","RewindControl","step","TimeDisplayPlaybackContainer","format","rightControls","VolumeControl","LanguageControl","CastControl","FullscreenControl","PrePlaybackPlayOverlay","CastOverlay","OverlayAction","CastAfterPlay","SeekBarLivePlaybackContainer","LiveTag","adGuiWrapper","TopBar","AdNotice","AdLearnMore","AdSkip","TimeDisplayAdsContainer","window","isAvailable","_onGCastApiAvailable","_loadCastSDK","Dom","loadScriptAsync","toString","CustomActionMessage","CustomActionType","sendMessage","SKIP_AD"],"mappings":"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","file":"playkit-cast-sender.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"kaltura-player-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sender\", [\"kaltura-player-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sender\"] = factory(require(\"kaltura-player-js\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"cast\"] = root[\"KalturaPlayer\"][\"cast\"] || {}, root[\"KalturaPlayer\"][\"cast\"][\"sender\"] = factory(root[\"KalturaPlayer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"kaltura-player-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sender\", [\"kaltura-player-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sender\"] = factory(require(\"kaltura-player-js\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"cast\"] = root[\"KalturaPlayer\"][\"cast\"] || {}, root[\"KalturaPlayer\"][\"cast\"][\"sender\"] = factory(root[\"KalturaPlayer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastPlayer = exports.CUSTOM_CHANNEL = exports.SECONDS_TO_MINUTES_DIVIDER = exports.INTERVAL_FREQUENCY = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _castStateManager = __webpack_require__(3);\n\nvar _castTracksManager = __webpack_require__(4);\n\nvar _castPlayackEngine = __webpack_require__(5);\n\nvar _castUi = __webpack_require__(6);\n\nvar _castLoader = __webpack_require__(7);\n\nvar _castAdsController = __webpack_require__(8);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Env = _kalturaPlayerJs.core.Env,\n    Track = _kalturaPlayerJs.core.Track,\n    TextStyle = _kalturaPlayerJs.core.TextStyle,\n    EventType = _kalturaPlayerJs.core.EventType,\n    StateType = _kalturaPlayerJs.core.StateType,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    Utils = _kalturaPlayerJs.core.Utils,\n    EngineType = _kalturaPlayerJs.core.EngineType,\n    AbrMode = _kalturaPlayerJs.core.AbrMode,\n    Error = _kalturaPlayerJs.core.Error;\nvar BaseRemotePlayer = _kalturaPlayerJs.cast.BaseRemotePlayer,\n    PlayerSnapshot = _kalturaPlayerJs.cast.PlayerSnapshot,\n    RemoteControl = _kalturaPlayerJs.cast.RemoteControl,\n    RemoteConnectedPayload = _kalturaPlayerJs.cast.RemoteConnectedPayload,\n    RemoteDisconnectedPayload = _kalturaPlayerJs.cast.RemoteDisconnectedPayload,\n    RemoteAvailablePayload = _kalturaPlayerJs.cast.RemoteAvailablePayload,\n    RemoteSession = _kalturaPlayerJs.cast.RemoteSession,\n    TextStyleConverter = _kalturaPlayerJs.cast.TextStyleConverter,\n    CustomMessageType = _kalturaPlayerJs.cast.CustomMessageType,\n    CustomMessage = _kalturaPlayerJs.cast.CustomMessage,\n    CustomEventMessage = _kalturaPlayerJs.cast.CustomEventMessage;\nvar INTERVAL_FREQUENCY = exports.INTERVAL_FREQUENCY = 500;\nvar SECONDS_TO_MINUTES_DIVIDER = exports.SECONDS_TO_MINUTES_DIVIDER = 60;\nvar CUSTOM_CHANNEL = exports.CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\n\nvar CastPlayer = function (_BaseRemotePlayer) {\n  _inherits(CastPlayer, _BaseRemotePlayer);\n\n  _createClass(CastPlayer, null, [{\n    key: 'isSupported',\n    value: function isSupported() {\n      return Env.browser.name === 'Chrome';\n    }\n  }]);\n\n  function CastPlayer(config, remoteControl) {\n    _classCallCheck(this, CastPlayer);\n\n    var _this = _possibleConstructorReturn(this, (CastPlayer.__proto__ || Object.getPrototypeOf(CastPlayer)).call(this, 'CastPlayer', config, remoteControl));\n\n    _this._readyPromise = null;\n    _this._mediaInfo = null;\n    _this._firstPlay = true;\n    _this._ended = false;\n    _this._playbackStarted = false;\n    _this._reset = true;\n    _this._destroyed = false;\n\n    _castLoader.CastLoader.load().then(function () {\n      _this._initializeCastApi();\n      _this._initializeRemotePlayer();\n    }).catch(function (e) {\n      _this._logger.error('Cast initialized error', e);\n    });\n    return _this;\n  }\n\n  _createClass(CastPlayer, [{\n    key: 'loadMedia',\n    value: function loadMedia(mediaInfo, options) {\n      var _this2 = this;\n\n      this._logger.debug('Load media', mediaInfo, options);\n      this.reset();\n      this._remoteControl.getUIWrapper().reset();\n      this._mediaInfo = mediaInfo;\n\n      if (this._playbackStarted) {\n        this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_STARTED));\n      }\n      var media = new chrome.cast.media.MediaInfo();\n      var request = new chrome.cast.media.LoadRequest(media);\n\n      if (options) {\n        Object.keys(options).forEach(function (option) {\n          if (option !== 'media') {\n            request[option] = options[option];\n          } else {\n            Object.keys(options.media).forEach(function (mediaOption) {\n              media[mediaOption] = options.media[mediaOption];\n            });\n          }\n        });\n      }\n\n      media.customData = media.customData || {};\n      media.customData.mediaInfo = mediaInfo;\n      return this._castSession.loadMedia(request).then(function () {\n        return _this2._onLoadMediaSuccess();\n      }, function (error) {\n        return _this2._onLoadMediaFailed(error);\n      });\n    }\n  }, {\n    key: 'getMediaInfo',\n    value: function getMediaInfo() {\n      return Utils.Object.copyDeep(this._mediaInfo);\n    }\n  }, {\n    key: 'ready',\n    value: function ready() {\n      return this._readyPromise ? this._readyPromise : Promise.resolve();\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      if (this.paused) {\n        this._engine.play();\n      } else if (this._ended && this._mediaInfo) {\n        this.loadMedia(this._mediaInfo);\n      }\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (!this.paused) {\n        this._engine.pause();\n      }\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      clearInterval(this._mediaInfoIntervalId);\n      if (this._reset) return;\n      this._reset = true;\n      this._firstPlay = true;\n      this._ended = false;\n      this._tracksManager.reset();\n      this._engine.reset();\n      this._stateManager.reset();\n      this._readyPromise = this._createReadyPromise();\n      this.dispatchEvent(new FakeEvent(EventType.PLAYER_RESET));\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      clearInterval(this._mediaInfoIntervalId);\n      if (this._destroyed) return;\n      this._destroyed = true;\n      this._firstPlay = true;\n      this._ended = false;\n      this._readyPromise = null;\n      this._eventManager.destroy();\n      this._tracksManager.destroy();\n      this._engine.destroy();\n      this._stateManager.destroy();\n      this.dispatchEvent(new FakeEvent(EventType.PLAYER_DESTROY));\n    }\n  }, {\n    key: 'isLive',\n    value: function isLive() {\n      var mediaInfo = this._castRemotePlayer.mediaInfo;\n      return mediaInfo ? mediaInfo.streamType === chrome.cast.media.StreamType.LIVE : false;\n    }\n  }, {\n    key: 'isDvr',\n    value: function isDvr() {\n      if (this.isLive()) {\n        var mediaSession = this._castSession.getMediaSession();\n        if (mediaSession) {\n          var range = mediaSession.liveSeekableRange;\n          if (range) {\n            var startMinutes = range.start / SECONDS_TO_MINUTES_DIVIDER;\n            var endMinutes = range.end / SECONDS_TO_MINUTES_DIVIDER;\n            return endMinutes - startMinutes > this._config.dvrThreshold;\n          }\n        }\n      }\n      return false;\n    }\n  }, {\n    key: 'seekToLiveEdge',\n    value: function seekToLiveEdge() {\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        var range = mediaSession.liveSeekableRange;\n        if (range) {\n          this._engine.currentTime = range.end;\n        }\n      }\n    }\n  }, {\n    key: 'getStartTimeOfDvrWindow',\n    value: function getStartTimeOfDvrWindow() {\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        var range = mediaSession.liveSeekableRange;\n        if (range) {\n          return range.start;\n        }\n      }\n      return 0;\n    }\n  }, {\n    key: 'getTracks',\n    value: function getTracks(type) {\n      return this._tracksManager.getTracks(type);\n    }\n  }, {\n    key: 'getActiveTracks',\n    value: function getActiveTracks() {\n      return this._tracksManager.getActiveTracks();\n    }\n  }, {\n    key: 'selectTrack',\n    value: function selectTrack(track) {\n      this._tracksManager.selectTrack(track);\n    }\n  }, {\n    key: 'hideTextTrack',\n    value: function hideTextTrack() {\n      this._tracksManager.hideTextTrack();\n    }\n  }, {\n    key: 'startCasting',\n    value: function startCasting() {\n      return cast && cast.framework ? cast.framework.CastContext.getInstance().requestSession() : Promise.reject();\n    }\n  }, {\n    key: 'isCastAvailable',\n    value: function isCastAvailable() {\n      return !!this._castRemotePlayer;\n    }\n  }, {\n    key: 'stopCasting',\n    value: function stopCasting() {\n      this._castSession.endSession(true);\n    }\n  }, {\n    key: 'getCastSession',\n    value: function getCastSession() {\n      return Utils.Object.copyDeep(this._remoteSession);\n    }\n  }, {\n    key: '_initializeCastApi',\n    value: function _initializeCastApi() {\n      var options = {};\n\n      options.receiverApplicationId = this._config.receiverApplicationId || chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;\n      options.autoJoinPolicy = this._config.autoJoinPolicy || chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n\n      this._logger.debug('Init cast API with options', options);\n      cast.framework.CastContext.getInstance().setOptions(options);\n\n      var payload = new RemoteAvailablePayload(this, true);\n      this._remoteControl.onRemoteDeviceAvailable(payload);\n    }\n  }, {\n    key: '_initializeRemotePlayer',\n    value: function _initializeRemotePlayer() {\n      var _this3 = this;\n\n      this._castContext = cast.framework.CastContext.getInstance();\n      this._addSessionLifecycleListeners();\n      this._castRemotePlayer = new cast.framework.RemotePlayer();\n      this._castRemotePlayerController = new cast.framework.RemotePlayerController(this._castRemotePlayer);\n      this._castRemotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, function () {\n        if (_this3._castRemotePlayer.isConnected) {\n          _this3._setupRemotePlayer();\n        } else {\n          _this3._setupLocalPlayer();\n        }\n      });\n    }\n  }, {\n    key: '_setupRemotePlayer',\n    value: function _setupRemotePlayer() {\n      var _this4 = this;\n\n      this._logger.debug('Setup remote player');\n      this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n      this._castSession.addMessageListener(CUSTOM_CHANNEL, function (customChannel, customMessage) {\n        return _this4._onCustomMessage(customChannel, customMessage);\n      });\n      this._tracksManager = new _castTracksManager.CastTracksManager(this._castRemotePlayer);\n      this._engine = new _castPlayackEngine.CastPlaybackEngine(this._castRemotePlayer, this._castRemotePlayerController);\n      this._stateManager = new _castStateManager.CastStateManager(this._castRemotePlayer, this._castRemotePlayerController);\n      this._ui = new _castUi.CastUI();\n      this._attachListeners();\n      var snapshot = this._remoteControl.getPlayerSnapshot();\n      this._remoteSession = new RemoteSession(this._castSession.getSessionId(), this._castSession.getCastDevice().friendlyName, this._castSession.getSessionState() !== cast.framework.SessionState.SESSION_STARTED);\n      var payload = new RemoteConnectedPayload(this, this._remoteSession, this._ui);\n      this._remoteControl.onRemoteDeviceConnected(payload);\n      if (this._remoteSession.resuming) {\n        this._resumeSession();\n      } else if (snapshot && snapshot.mediaInfo) {\n        var mediaInfo = snapshot.mediaInfo;\n        var loadOptions = this._getLoadOptions(snapshot);\n        this.loadMedia(mediaInfo, loadOptions);\n      }\n    }\n  }, {\n    key: '_setupLocalPlayer',\n    value: function _setupLocalPlayer() {\n      this._logger.debug('Setup local player');\n      var snapshot = new PlayerSnapshot(this);\n      var payload = new RemoteDisconnectedPayload(this, snapshot);\n      this.pause();\n      this.destroy();\n      this._remoteControl.onRemoteDeviceDisconnected(payload);\n    }\n  }, {\n    key: '_createReadyPromise',\n    value: function _createReadyPromise() {\n      var _this5 = this;\n\n      this._readyPromise = new Promise(function (resolve) {\n        _this5._eventManager.listenOnce(_this5, EventType.TRACKS_CHANGED, function () {\n          _this5.dispatchEvent(new FakeEvent(EventType.MEDIA_LOADED));\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: '_attachListeners',\n    value: function _attachListeners() {\n      var _this6 = this;\n\n      this._eventManager.listen(this._engine, EventType.TIME_UPDATE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.PAUSE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.PLAY, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.VOLUME_CHANGE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.MUTE_CHANGE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.DURATION_CHANGE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.ENDED, function (e) {\n        return _this6._onEnded(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.TRACKS_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.TEXT_TRACK_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.VIDEO_TRACK_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.AUDIO_TRACK_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.TEXT_STYLE_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.ERROR, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._stateManager, EventType.PLAYER_STATE_CHANGED, function (e) {\n        return _this6._onPlayerStateChanged(e);\n      });\n    }\n  }, {\n    key: '_onEnded',\n    value: function _onEnded(e) {\n      this._ended = true;\n      this.dispatchEvent(e);\n    }\n  }, {\n    key: '_onPlayerStateChanged',\n    value: function _onPlayerStateChanged(e) {\n      if (this._ended) return;\n      if (this._stateManager.currentState.type === StateType.PLAYING) {\n        this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n      }\n      this.dispatchEvent(e);\n    }\n  }, {\n    key: '_handleFirstPlay',\n    value: function _handleFirstPlay() {\n      if (this._playbackStarted) {\n        this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_ENDED));\n      }\n      this.dispatchEvent(new FakeEvent(EventType.PLAY));\n      this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAY));\n      this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n      this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_STARTED));\n      if (this.paused) {\n        this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n      }\n      this._firstPlay = false;\n      this._playbackStarted = true;\n    }\n  }, {\n    key: '_resumeSession',\n    value: function _resumeSession() {\n      var _this7 = this;\n\n      this._readyPromise = this._createReadyPromise();\n      this._mediaInfoIntervalId = setInterval(function () {\n        var mediaSession = _this7._castSession.getMediaSession();\n        if (mediaSession && mediaSession.customData) {\n          clearInterval(_this7._mediaInfoIntervalId);\n          _this7._mediaInfo = mediaSession.customData.mediaInfo;\n          _this7._logger.debug('Resuming session with media info', _this7._mediaInfo);\n          _this7._onLoadMediaSuccess();\n        }\n      }, INTERVAL_FREQUENCY);\n    }\n  }, {\n    key: '_onLoadMediaSuccess',\n    value: function _onLoadMediaSuccess() {\n      this._logger.debug('Load media success');\n      this._reset = false;\n      this._triggerInitialPlayerEvents();\n      this._tracksManager.parseTracks();\n      this._handleFirstPlay();\n    }\n  }, {\n    key: '_triggerInitialPlayerEvents',\n    value: function _triggerInitialPlayerEvents() {\n      this.dispatchEvent(new FakeEvent(EventType.SOURCE_SELECTED, {\n        selectedSource: [{\n          url: this._castRemotePlayer.mediaInfo.contentUrl,\n          mimetype: this._castRemotePlayer.mediaInfo.contentType\n        }]\n      }));\n      this.dispatchEvent(new FakeEvent(EventType.LOADED_METADATA));\n      this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, { mode: AbrMode.AUTO }));\n    }\n  }, {\n    key: '_onLoadMediaFailed',\n    value: function _onLoadMediaFailed(error) {\n      this._logger.debug('Load media falied', error);\n      this.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.CRITICAL, Error.Category.CAST, Error.Code.CAST_LOAD_MEDIA_FAILED, error)));\n    }\n  }, {\n    key: '_addSessionLifecycleListeners',\n    value: function _addSessionLifecycleListeners() {\n      var _this8 = this;\n\n      this._castContext.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, function (event) {\n        switch (event.sessionState) {\n          case cast.framework.SessionState.SESSION_STARTING:\n            _this8._remoteControl.onRemoteDeviceConnecting();\n            break;\n          case cast.framework.SessionState.SESSION_ENDING:\n            _this8._remoteControl.onRemoteDeviceDisconnecting();\n            break;\n          case cast.framework.SessionState.SESSION_START_FAILED:\n            _this8._remoteControl.onRemoteDeviceConnectFailed();\n            break;\n        }\n      });\n    }\n  }, {\n    key: '_getLoadOptions',\n    value: function _getLoadOptions(snapshot) {\n      var loadOptions = {\n        autoplay: snapshot.autoplay,\n        currentTime: snapshot.startTime,\n        media: {}\n      };\n      if (this.textStyle && !this.textStyle.isEqual(snapshot.textStyle)) {\n        loadOptions.media.textTrackStyle = TextStyleConverter.toCastTextStyle(snapshot.textStyle);\n      }\n      loadOptions.media.customData = {\n        audioLanguage: snapshot.audioLanguage,\n        textLanguage: snapshot.textLanguage\n      };\n      if (snapshot.advertising && snapshot.advertising.adTagUrl) {\n        this._adsController = new _castAdsController.CastAdsController();\n        var castAdvertising = this._config.advertising;\n        if (!castAdvertising || !castAdvertising.vast) {\n          loadOptions.media.vmapAdsRequest = this._getAdsRequest(snapshot.advertising);\n        } else {\n          var breakClipId = Utils.Generator.uniqueId(5);\n          var breakId = Utils.Generator.uniqueId(5);\n          var breakClips = [{\n            id: breakClipId,\n            position: 0,\n            vastAdsRequest: this._getAdsRequest(snapshot.advertising)\n          }];\n          var breaks = [{\n            breakClipIds: [breakClipId],\n            id: breakId,\n            position: 0\n          }];\n          loadOptions.media.breakClips = breakClips;\n          loadOptions.media.breaks = breaks;\n        }\n      }\n      return loadOptions;\n    }\n  }, {\n    key: '_getAdsRequest',\n    value: function _getAdsRequest(advertising) {\n      var adsRequest = {};\n      if (advertising.adTagUrl) {\n        adsRequest.adTagUrl = advertising.adTagUrl;\n      }\n      if (advertising.adsResponse) {\n        adsRequest.adsResponse = advertising.adsResponse;\n      }\n      return adsRequest;\n    }\n  }, {\n    key: '_onCustomMessage',\n    value: function _onCustomMessage(customChannel, customMessage) {\n      try {\n        var parsedCustomMessage = JSON.parse(customMessage);\n        this._logger.debug('Custom message received', parsedCustomMessage);\n        switch (parsedCustomMessage.type) {\n          case CustomMessageType.EVENT:\n            this._handleCustomEvent(parsedCustomMessage);\n            break;\n        }\n      } catch (e) {\n        this.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_CUSTOM_MESSAGE_PARSING_ERROR, e)));\n      }\n    }\n  }, {\n    key: '_handleCustomEvent',\n    value: function _handleCustomEvent(customEvent) {\n      this.dispatchEvent(new FakeEvent(customEvent.event, customEvent.payload));\n    }\n  }, {\n    key: 'ads',\n    get: function get() {\n      return this._adsController;\n    }\n  }, {\n    key: 'textStyle',\n    set: function set(style) {\n      this._tracksManager.textStyle = style;\n    },\n    get: function get() {\n      return this._tracksManager.textStyle;\n    }\n  }, {\n    key: 'currentTime',\n    set: function set(to) {\n      this._engine.currentTime = to;\n    },\n    get: function get() {\n      return this._engine.currentTime;\n    }\n  }, {\n    key: 'duration',\n    get: function get() {\n      return this._engine.duration;\n    }\n  }, {\n    key: 'volume',\n    set: function set(vol) {\n      this._engine.volume = vol;\n    },\n    get: function get() {\n      return this._engine.volume;\n    }\n  }, {\n    key: 'paused',\n    get: function get() {\n      return this._engine.paused;\n    }\n  }, {\n    key: 'ended',\n    get: function get() {\n      return this._ended;\n    }\n  }, {\n    key: 'seeking',\n    get: function get() {\n      return this._engine.seeking;\n    }\n  }, {\n    key: 'muted',\n    set: function set(mute) {\n      this._engine.muted = mute;\n    },\n    get: function get() {\n      return this._engine.muted;\n    }\n  }, {\n    key: 'src',\n    get: function get() {\n      if (this._castRemotePlayer.mediaInfo) {\n        return this._castRemotePlayer.mediaInfo.contentUrl;\n      }\n    }\n  }, {\n    key: 'poster',\n    get: function get() {\n      try {\n        return this._castRemotePlayer.mediaInfo.metadata.images[0].url;\n      } catch (e) {\n        return '';\n      }\n    }\n  }, {\n    key: 'playbackRate',\n    get: function get() {\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        return mediaSession.playbackRate;\n      }\n    }\n  }, {\n    key: 'engineType',\n    get: function get() {\n      return EngineType.HTML5;\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return CastPlayer.Type;\n    }\n  }]);\n\n  return CastPlayer;\n}(BaseRemotePlayer);\n\nCastPlayer.Type = 'chromecast';\nCastPlayer.defaultConfig = {\n  dvrThreshold: 5\n};\nexports.CastPlayer = CastPlayer;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NAME = exports.VERSION = exports.RemotePlayer = undefined;\n\nvar _castPlayer = __webpack_require__(1);\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar registerRemotePlayer = _kalturaPlayerJs.cast.registerRemotePlayer;\nexports.RemotePlayer = _castPlayer.CastPlayer;\nexports.VERSION = \"0.1.1\";\nexports.NAME = \"@playkit-js/playkit-js-cast-sender\";\n\n\nif (_castPlayer.CastPlayer.isSupported()) {\n  registerRemotePlayer(_castPlayer.CastPlayer.Type, _castPlayer.CastPlayer);\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastStateManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar State = _kalturaPlayerJs.core.State,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    EventType = _kalturaPlayerJs.core.EventType,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget,\n    StateType = _kalturaPlayerJs.core.StateType;\n\nvar CastStateManager = function (_FakeEventTarget) {\n  _inherits(CastStateManager, _FakeEventTarget);\n\n  function CastStateManager(remotePlayer, remotePlayerController) {\n    _classCallCheck(this, CastStateManager);\n\n    var _this = _possibleConstructorReturn(this, (CastStateManager.__proto__ || Object.getPrototypeOf(CastStateManager)).call(this));\n\n    _this._remotePlayer = remotePlayer;\n    _this._remotePlayerController = remotePlayerController;\n    _this._currentState = new State(StateType.IDLE);\n    _this._previousState = new State(StateType.IDLE);\n    _this._updateState = _this._updateState.bind(_this);\n    _this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, _this._updateState);\n    return _this;\n  }\n\n  _createClass(CastStateManager, [{\n    key: '_updateState',\n    value: function _updateState() {\n      this._currentState.duration = Date.now() / 1000;\n      this._previousState = this._currentState;\n      if (this._remotePlayer.playerState) {\n        this._currentState = new State(this._remotePlayer.playerState.toLowerCase());\n      } else {\n        this._currentState = new State(StateType.IDLE);\n      }\n      this.dispatchEvent(new FakeEvent(EventType.PLAYER_STATE_CHANGED, {\n        oldState: this.previousState,\n        newState: this.currentState\n      }));\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._currentState = new State(StateType.IDLE);\n      this._previousState = new State(StateType.IDLE);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n      this._currentState = new State(StateType.IDLE);\n      this._previousState = new State(StateType.IDLE);\n    }\n  }, {\n    key: 'currentState',\n    get: function get() {\n      return this._currentState;\n    }\n  }, {\n    key: 'previousState',\n    get: function get() {\n      return this._previousState;\n    }\n  }]);\n\n  return CastStateManager;\n}(FakeEventTarget);\n\nexports.CastStateManager = CastStateManager;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastTracksManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _TRACK_TYPE_TO_INSTAN;\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _castPlayer = __webpack_require__(1);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TextStyleConverter = _kalturaPlayerJs.cast.TextStyleConverter;\nvar Track = _kalturaPlayerJs.core.Track,\n    getLogger = _kalturaPlayerJs.core.getLogger,\n    TextStyle = _kalturaPlayerJs.core.TextStyle,\n    AudioTrack = _kalturaPlayerJs.core.AudioTrack,\n    VideoTrack = _kalturaPlayerJs.core.VideoTrack,\n    TextTrack = _kalturaPlayerJs.core.TextTrack,\n    Utils = _kalturaPlayerJs.core.Utils,\n    TrackType = _kalturaPlayerJs.core.TrackType,\n    EventType = _kalturaPlayerJs.core.EventType,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget;\n\nvar TRACK_TYPE_TO_INSTANCE = (_TRACK_TYPE_TO_INSTAN = {}, _defineProperty(_TRACK_TYPE_TO_INSTAN, TrackType.AUDIO, AudioTrack), _defineProperty(_TRACK_TYPE_TO_INSTAN, TrackType.VIDEO, VideoTrack), _defineProperty(_TRACK_TYPE_TO_INSTAN, TrackType.TEXT, TextTrack), _TRACK_TYPE_TO_INSTAN);\n\nvar CastTracksManager = function (_FakeEventTarget) {\n  _inherits(CastTracksManager, _FakeEventTarget);\n\n  function CastTracksManager(remotePlayer) {\n    _classCallCheck(this, CastTracksManager);\n\n    var _this = _possibleConstructorReturn(this, (CastTracksManager.__proto__ || Object.getPrototypeOf(CastTracksManager)).call(this));\n\n    _this._activeTrackIds = [];\n    _this._tracks = [];\n\n    _this._remotePlayer = remotePlayer;\n    _this._logger = getLogger('CastTracksManager');\n    _this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    _this._textStyle = new TextStyle();\n    _this._bindEvents();\n    return _this;\n  }\n\n  _createClass(CastTracksManager, [{\n    key: 'parseTracks',\n    value: function parseTracks() {\n      var tracks = this._remotePlayer.mediaInfo.tracks;\n      if (tracks && tracks.length > 0) {\n        var castTextTracks = tracks.filter(function (t) {\n          return t.type === chrome.cast.media.TrackType.TEXT;\n        });\n        var castVideoTracks = tracks.filter(function (t) {\n          return t.type === chrome.cast.media.TrackType.VIDEO;\n        });\n        var castAudioTracks = tracks.filter(function (t) {\n          return t.type === chrome.cast.media.TrackType.AUDIO;\n        });\n        var textTracks = this._parseTextTracks(castTextTracks);\n        var videoTracks = this._parseVideoTracks(castVideoTracks);\n        var audioTracks = this._parseAudioTracks(castAudioTracks);\n        this._tracks = audioTracks.concat(videoTracks).concat(textTracks);\n        this._addTextTrackOffOption();\n      }\n      this._logger.debug('Parse tracks', this._tracks);\n      this._startOnMediaStatusUpdateInterval();\n      this.dispatchEvent(new FakeEvent(EventType.TRACKS_CHANGED, { tracks: this._tracks }));\n    }\n  }, {\n    key: 'getTracks',\n    value: function getTracks(type) {\n      return Utils.Object.copyDeep(this._getTracksByType(type));\n    }\n  }, {\n    key: 'getActiveTracks',\n    value: function getActiveTracks() {\n      return Utils.Object.copyDeep({\n        video: this._getTracksByType(TrackType.VIDEO).find(function (track) {\n          return track.active;\n        }),\n        audio: this._getTracksByType(TrackType.AUDIO).find(function (track) {\n          return track.active;\n        }),\n        text: this._getTracksByType(TrackType.TEXT).find(function (track) {\n          return track.active;\n        })\n      });\n    }\n  }, {\n    key: 'selectTrack',\n    value: function selectTrack(track) {\n      if (track instanceof VideoTrack) {\n        this._selectVideoTrack(track);\n      } else if (track instanceof AudioTrack) {\n        this._selectAudioTrack(track);\n      } else if (track instanceof TextTrack) {\n        this._selectTextTrack(track);\n      }\n    }\n  }, {\n    key: 'hideTextTrack',\n    value: function hideTextTrack() {\n      var offTrack = this._tracks.find(function (t) {\n        return t.language === 'off';\n      });\n      this.selectTrack(offTrack);\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._stopOnMediaStatusUpdateInterval();\n      this._tracks = [];\n      this._activeTrackIds = [];\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._stopOnMediaStatusUpdateInterval();\n      this._tracks = [];\n      this._activeTrackIds = [];\n    }\n  }, {\n    key: '_startOnMediaStatusUpdateInterval',\n    value: function _startOnMediaStatusUpdateInterval() {\n      this._mediaStatusIntervalId = setInterval(this._onMediaStatusUpdate, _castPlayer.INTERVAL_FREQUENCY);\n    }\n  }, {\n    key: '_stopOnMediaStatusUpdateInterval',\n    value: function _stopOnMediaStatusUpdateInterval() {\n      if (this._mediaStatusIntervalId) {\n        clearInterval(this._mediaStatusIntervalId);\n        this._mediaStatusIntervalId = null;\n      }\n    }\n  }, {\n    key: '_bindEvents',\n    value: function _bindEvents() {\n      this._onMediaStatusUpdate = this._onMediaStatusUpdate.bind(this);\n    }\n  }, {\n    key: '_parseTextTracks',\n    value: function _parseTextTracks(castTextTracks) {\n      var textTracks = [];\n      castTextTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          kind: track.subType || 'subtitles',\n          active: false\n        };\n        textTracks.push(new TextTrack(settings));\n      });\n      return textTracks;\n    }\n  }, {\n    key: '_parseVideoTracks',\n    value: function _parseVideoTracks(castVideoTracks) {\n      var videoTracks = [];\n      castVideoTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          active: false\n        };\n        videoTracks.push(new VideoTrack(settings));\n      });\n      return videoTracks;\n    }\n  }, {\n    key: '_parseAudioTracks',\n    value: function _parseAudioTracks(castAudioTracks) {\n      var audioTracks = [];\n      castAudioTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          active: false\n        };\n        audioTracks.push(new AudioTrack(settings));\n      });\n      return audioTracks;\n    }\n  }, {\n    key: '_selectVideoTrack',\n    value: function _selectVideoTrack(track) {\n      var _this2 = this;\n\n      this._stopOnMediaStatusUpdateInterval();\n      var currentTrack = this.getActiveTracks().video;\n      this._selectTrack(track, currentTrack, function () {\n        _this2.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, { selectedVideoTrack: track }));\n        _this2._startOnMediaStatusUpdateInterval();\n      }, function (error) {\n        _this2.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    }\n  }, {\n    key: '_selectAudioTrack',\n    value: function _selectAudioTrack(track) {\n      var _this3 = this;\n\n      this._stopOnMediaStatusUpdateInterval();\n      var currentTrack = this.getActiveTracks().audio;\n      this._selectTrack(track, currentTrack, function () {\n        _this3.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, { selectedAudioTrack: track }));\n        _this3._startOnMediaStatusUpdateInterval();\n      }, function (error) {\n        _this3.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    }\n  }, {\n    key: '_selectTextTrack',\n    value: function _selectTextTrack(track) {\n      var _this4 = this;\n\n      this._stopOnMediaStatusUpdateInterval();\n      var currentTrack = this.getActiveTracks().text;\n      this._selectTrack(track, currentTrack, function () {\n        _this4.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, { selectedTextTrack: track }));\n        _this4._startOnMediaStatusUpdateInterval();\n      }, function (error) {\n        _this4.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    }\n  }, {\n    key: '_selectTrack',\n    value: function _selectTrack(newTrack, currentTrack, onSuccess, onFailed) {\n      var _this5 = this;\n\n      this._logger.debug('Select track', newTrack, currentTrack, this._activeTrackIds);\n      if (currentTrack) {\n        var index = this._activeTrackIds.indexOf(currentTrack.id);\n        if (index > -1) {\n          this._activeTrackIds.splice(index, 1);\n        }\n      }\n      if (newTrack.id && newTrack.language !== 'off') {\n        this._activeTrackIds.push(newTrack.id);\n      }\n      var tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(this._activeTrackIds);\n      var mediaSession = this._castSession.getMediaSession();\n      mediaSession.editTracksInfo(tracksInfoRequest, function () {\n        _this5._logger.debug('Select track succeeded');\n        _this5._markActiveTrack(currentTrack, false);\n        _this5._markActiveTrack(newTrack, true);\n        onSuccess();\n      }, function (e) {\n        _this5._logger.debug('Select track failed', e);\n        onFailed(e);\n      });\n    }\n  }, {\n    key: '_markActiveTrack',\n    value: function _markActiveTrack(track, active) {\n      if (track) {\n        var id = track.id;\n        var origTrack = this._tracks.find(function (t) {\n          return t.id === id;\n        });\n        if (origTrack) {\n          origTrack.active = active;\n        }\n      }\n    }\n  }, {\n    key: '_addTextTrackOffOption',\n    value: function _addTextTrackOffOption() {\n      var textTracks = this._getTracksByType(TrackType.TEXT);\n      var lastTrack = textTracks[textTracks.length - 1];\n      if (textTracks && textTracks.length) {\n        this._tracks.push(new TextTrack({\n          id: lastTrack.id + 1,\n          active: true,\n          index: lastTrack.index + 1,\n          kind: 'subtitles',\n          label: 'Off',\n          language: 'off'\n        }));\n      }\n    }\n  }, {\n    key: '_getTracksByType',\n    value: function _getTracksByType(type) {\n      return !type ? this._tracks : this._tracks.filter(function (track) {\n        if (type && TRACK_TYPE_TO_INSTANCE[type]) {\n          return track instanceof TRACK_TYPE_TO_INSTANCE[type];\n        }\n        return true;\n      });\n    }\n  }, {\n    key: '_onMediaStatusUpdate',\n    value: function _onMediaStatusUpdate() {\n      var _this6 = this;\n\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        var isTextStyleChanged = function isTextStyleChanged() {\n          var localTextStyle = TextStyleConverter.toCastTextStyle(_this6.textStyle);\n          var remoteTextStyle = mediaSession.media.textTrackStyle;\n          if (remoteTextStyle) {\n            return !(localTextStyle.backgroundColor === remoteTextStyle.backgroundColor && localTextStyle.fontFamily === remoteTextStyle.fontFamily && localTextStyle.fontScale === remoteTextStyle.fontScale && localTextStyle.foregroundColor === remoteTextStyle.foregroundColor);\n          }\n          return false;\n        };\n        var isActiveTrackIdsChanged = function isActiveTrackIdsChanged() {\n          if (mediaSession.activeTrackIds) {\n            return !(_this6._activeTrackIds.length === mediaSession.activeTrackIds.length && _this6._activeTrackIds.every(function (value, index) {\n              return value === mediaSession.activeTrackIds[index];\n            }));\n          }\n          return false;\n        };\n        if (isActiveTrackIdsChanged()) {\n          var diffIds = mediaSession.activeTrackIds.filter(function (i) {\n            return !_this6._activeTrackIds.includes(i);\n          });\n          diffIds.forEach(function (id) {\n            var track = _this6._tracks.find(function (t) {\n              return t.id === id;\n            });\n            _this6.selectTrack(track);\n          });\n        }\n        if (isTextStyleChanged()) {\n          var style = TextStyleConverter.toPlayerTextStyle(mediaSession.media.textTrackStyle);\n          this._textStyle = style;\n          this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, { textStyle: style }));\n        }\n      }\n    }\n  }, {\n    key: 'textStyle',\n    set: function set(style) {\n      var _this7 = this;\n\n      this._logger.debug('Setting text style', style);\n      var textTrackStyle = TextStyleConverter.toCastTextStyle(style);\n      var tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(null, textTrackStyle);\n      var mediaSession = this._castSession.getMediaSession();\n      mediaSession.editTracksInfo(tracksInfoRequest, function () {\n        _this7._logger.debug('Setting text style succeed');\n        _this7._textStyle = style;\n        _this7.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, { textStyle: style }));\n      }, function (error) {\n        _this7._logger.debug('Setting text style failed', error);\n        _this7.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    },\n    get: function get() {\n      return this._textStyle.clone();\n    }\n  }]);\n\n  return CastTracksManager;\n}(FakeEventTarget);\n\nexports.CastTracksManager = CastTracksManager;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastPlaybackEngine = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _castPlayer = __webpack_require__(1);\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventType = _kalturaPlayerJs.core.EventType,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget;\n\nvar CastPlaybackEngine = function (_FakeEventTarget) {\n  _inherits(CastPlaybackEngine, _FakeEventTarget);\n\n  function CastPlaybackEngine(remotePlayer, remotePlayerController) {\n    _classCallCheck(this, CastPlaybackEngine);\n\n    var _this = _possibleConstructorReturn(this, (CastPlaybackEngine.__proto__ || Object.getPrototypeOf(CastPlaybackEngine)).call(this));\n\n    _this._muted = false;\n    _this._volume = 1;\n    _this._paused = false;\n    _this._currentTime = 0;\n    _this._duration = 0;\n    _this._seeking = false;\n\n    _this._remotePlayer = remotePlayer;\n    _this._remotePlayerController = remotePlayerController;\n    _this._bindEvents();\n    _this._toggleListeners(true);\n    return _this;\n  }\n\n  _createClass(CastPlaybackEngine, [{\n    key: 'reset',\n    value: function reset() {\n      this._toggleListeners(false);\n      clearInterval(this._liveCurrentTimeIntervalId);\n      this._resetFlags();\n      this._toggleListeners(true);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      clearInterval(this._liveCurrentTimeIntervalId);\n      this._toggleListeners(false);\n      this._muted = false;\n      this._volume = 1;\n      this._resetFlags();\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      this._remotePlayerController.playOrPause();\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this._remotePlayer.canPause) {\n        this._remotePlayerController.playOrPause();\n      }\n    }\n  }, {\n    key: '_resetFlags',\n    value: function _resetFlags() {\n      this._paused = false;\n      this._currentTime = 0;\n      this._duration = 0;\n      this._seeking = false;\n    }\n  }, {\n    key: '_bindEvents',\n    value: function _bindEvents() {\n      this._onCurrentTimeChanged = this._onCurrentTimeChanged.bind(this);\n      this._onIsPausedChanged = this._onIsPausedChanged.bind(this);\n      this._onDurationChanged = this._onDurationChanged.bind(this);\n      this._onVolumeLevelChanged = this._onVolumeLevelChanged.bind(this);\n      this._onIsMutedChanged = this._onIsMutedChanged.bind(this);\n      this._onIsMediaLoadedChanged = this._onIsMediaLoadedChanged.bind(this);\n      this._onLiveCurrentTimeChanged = this._onLiveCurrentTimeChanged.bind(this);\n    }\n  }, {\n    key: '_toggleListeners',\n    value: function _toggleListeners(listen) {\n      var _listeners,\n          _this2 = this;\n\n      var listeners = (_listeners = {}, _defineProperty(_listeners, cast.framework.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED, this._onIsMediaLoadedChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED, this._onIsPausedChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.DURATION_CHANGED, this._onDurationChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED, this._onVolumeLevelChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED, this._onIsMutedChanged), _listeners);\n      if (listen) {\n        Object.keys(listeners).forEach(function (e) {\n          return _this2._remotePlayerController.addEventListener(e, listeners[e]);\n        });\n      } else {\n        Object.keys(listeners).forEach(function (e) {\n          return _this2._remotePlayerController.removeEventListener(e, listeners[e]);\n        });\n        this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n      }\n    }\n  }, {\n    key: '_onIsMediaLoadedChanged',\n    value: function _onIsMediaLoadedChanged(isMediaLoadedEvent) {\n      var _this3 = this;\n\n      var onMediaInfoChanged = function onMediaInfoChanged() {\n        _this3._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n        if (_this3._remotePlayer.mediaInfo.streamType === chrome.cast.media.StreamType.LIVE) {\n          _this3._mediaSession = cast.framework.CastContext.getInstance().getCurrentSession().getMediaSession();\n          _this3._liveCurrentTimeIntervalId = setInterval(_this3._onLiveCurrentTimeChanged, _castPlayer.INTERVAL_FREQUENCY);\n        } else {\n          _this3._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, _this3._onCurrentTimeChanged);\n        }\n      };\n      if (isMediaLoadedEvent.value) {\n        this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n      }\n    }\n  }, {\n    key: '_onCurrentTimeChanged',\n    value: function _onCurrentTimeChanged() {\n      this._currentTime = this._remotePlayer.currentTime;\n      this._seeking = false;\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n      this._maybeEndPlayback();\n    }\n  }, {\n    key: '_onLiveCurrentTimeChanged',\n    value: function _onLiveCurrentTimeChanged() {\n      this._currentTime = this._mediaSession.currentTime;\n      this._seeking = false;\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n      this._maybeEndLivePlayback();\n    }\n  }, {\n    key: '_onIsPausedChanged',\n    value: function _onIsPausedChanged() {\n      this._paused = this._remotePlayer.isPaused;\n      if (this._paused) {\n        this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n      } else {\n        this.dispatchEvent(new FakeEvent(EventType.PLAY));\n      }\n    }\n  }, {\n    key: '_onDurationChanged',\n    value: function _onDurationChanged() {\n      this._duration = this._remotePlayer.duration;\n      this.dispatchEvent(new FakeEvent(EventType.DURATION_CHANGE));\n    }\n  }, {\n    key: '_onVolumeLevelChanged',\n    value: function _onVolumeLevelChanged() {\n      this._volume = this._remotePlayer.volumeLevel;\n      this.dispatchEvent(new FakeEvent(EventType.VOLUME_CHANGE));\n    }\n  }, {\n    key: '_onIsMutedChanged',\n    value: function _onIsMutedChanged() {\n      this._muted = this._remotePlayer.isMuted;\n      this.dispatchEvent(new FakeEvent(EventType.MUTE_CHANGE, { mute: this.muted }));\n    }\n  }, {\n    key: '_maybeEndPlayback',\n    value: function _maybeEndPlayback() {\n      var delta = Math.round(this._duration - this._currentTime);\n      if (this._currentTime !== 0 && this._duration !== 0 && delta <= 1) {\n        this._currentTime = this._duration;\n        this.dispatchEvent(new FakeEvent(EventType.ENDED));\n      }\n    }\n  }, {\n    key: '_maybeEndLivePlayback',\n    value: function _maybeEndLivePlayback() {\n      var range = this._mediaSession.liveSeekableRange;\n      if (range && range.isLiveDone) {\n        this.dispatchEvent(new FakeEvent(EventType.ENDED));\n      }\n    }\n  }, {\n    key: 'muted',\n    set: function set(value) {\n      if (value && !this.muted || !value && this.muted) {\n        this._remotePlayerController.muteOrUnmute();\n      }\n    },\n    get: function get() {\n      return this._muted;\n    }\n  }, {\n    key: 'volume',\n    set: function set(value) {\n      if (this._remotePlayer.canControlVolume) {\n        this._remotePlayer.volumeLevel = value;\n        this._remotePlayerController.setVolumeLevel();\n      }\n    },\n    get: function get() {\n      return this._volume;\n    }\n  }, {\n    key: 'currentTime',\n    set: function set(value) {\n      if (this._remotePlayer.canSeek) {\n        this._seeking = true;\n        this._remotePlayer.currentTime = value;\n        this._remotePlayerController.seek();\n      }\n    },\n    get: function get() {\n      if (this._remotePlayer.savedPlayerState) {\n        return this._remotePlayer.savedPlayerState.currentTime;\n      }\n      return this._currentTime;\n    }\n  }, {\n    key: 'duration',\n    get: function get() {\n      return this._duration;\n    }\n  }, {\n    key: 'paused',\n    get: function get() {\n      if (this._remotePlayer.savedPlayerState) {\n        return this._remotePlayer.savedPlayerState.isPaused;\n      }\n      return this._paused;\n    }\n  }, {\n    key: 'seeking',\n    get: function get() {\n      return this._seeking;\n    }\n  }]);\n\n  return CastPlaybackEngine;\n}(FakeEventTarget);\n\nexports.CastPlaybackEngine = CastPlaybackEngine;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastUI = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// eslint-disable-next-line no-unused-vars\nvar style = _kalturaPlayerJs.ui.style,\n    Components = _kalturaPlayerJs.ui.Components;\nvar RemotePlayerUI = _kalturaPlayerJs.cast.RemotePlayerUI;\n\nvar CastUI = function (_RemotePlayerUI) {\n  _inherits(CastUI, _RemotePlayerUI);\n\n  function CastUI() {\n    _classCallCheck(this, CastUI);\n\n    return _possibleConstructorReturn(this, (CastUI.__proto__ || Object.getPrototypeOf(CastUI)).apply(this, arguments));\n  }\n\n  _createClass(CastUI, [{\n    key: \"playbackUI\",\n    value: function playbackUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.playbackGuiWWrapper },\n        _kalturaPlayerJs.ui.h(Components.KeyboardControl, { player: props.player, config: props.config }),\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(\n          \"div\",\n          { className: style.playerGui, id: \"player-gui\" },\n          _kalturaPlayerJs.ui.h(Components.OverlayPortal, null),\n          _kalturaPlayerJs.ui.h(\n            Components.BottomBar,\n            null,\n            _kalturaPlayerJs.ui.h(Components.SeekBarPlaybackContainer, { showFramePreview: true, showTimeBubble: true, player: props.player, playerContainer: props.playerContainer }),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.leftControls },\n              _kalturaPlayerJs.ui.h(Components.PlayPauseControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.RewindControl, { player: props.player, step: 10 }),\n              _kalturaPlayerJs.ui.h(Components.TimeDisplayPlaybackContainer, { format: \"current / total\" })\n            ),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.rightControls },\n              _kalturaPlayerJs.ui.h(Components.VolumeControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.LanguageControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.CastControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.FullscreenControl, { player: props.player })\n            )\n          )\n        ),\n        _kalturaPlayerJs.ui.h(Components.PrePlaybackPlayOverlay, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.OverlayAction, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.CastAfterPlay, { player: props.player })\n      );\n    }\n  }, {\n    key: \"liveUI\",\n    value: function liveUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.playbackGuiWWrapper },\n        _kalturaPlayerJs.ui.h(Components.KeyboardControl, { player: props.player, config: props.config }),\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(\n          \"div\",\n          { className: style.playerGui, id: \"player-gui\" },\n          _kalturaPlayerJs.ui.h(Components.OverlayPortal, null),\n          _kalturaPlayerJs.ui.h(\n            Components.BottomBar,\n            null,\n            _kalturaPlayerJs.ui.h(Components.SeekBarLivePlaybackContainer, { showFramePreview: true, showTimeBubble: true, player: props.player, playerContainer: props.playerContainer }),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.leftControls },\n              _kalturaPlayerJs.ui.h(Components.PlayPauseControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.LiveTag, { player: props.player })\n            ),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.rightControls },\n              _kalturaPlayerJs.ui.h(Components.VolumeControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.LanguageControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.CastControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.FullscreenControl, { player: props.player })\n            )\n          )\n        ),\n        _kalturaPlayerJs.ui.h(Components.PrePlaybackPlayOverlay, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.OverlayAction, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.CastAfterPlay, { player: props.player })\n      );\n    }\n  }, {\n    key: \"idleUI\",\n    value: function idleUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.playbackGuiWWrapper },\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player })\n      );\n    }\n  }, {\n    key: \"adsUI\",\n    value: function adsUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.adGuiWrapper },\n        _kalturaPlayerJs.ui.h(Components.KeyboardControl, { player: props.player, config: props.config }),\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(\n          \"div\",\n          { className: style.playerGui, id: \"player-gui\" },\n          _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player }),\n          _kalturaPlayerJs.ui.h(Components.OverlayAction, { player: props.player }),\n          _kalturaPlayerJs.ui.h(\n            \"div\",\n            null,\n            _kalturaPlayerJs.ui.h(\n              Components.TopBar,\n              null,\n              _kalturaPlayerJs.ui.h(\n                \"div\",\n                { className: style.leftControls },\n                _kalturaPlayerJs.ui.h(Components.AdNotice, null)\n              ),\n              _kalturaPlayerJs.ui.h(\n                \"div\",\n                { className: style.rightControls },\n                _kalturaPlayerJs.ui.h(Components.AdLearnMore, null)\n              )\n            ),\n            _kalturaPlayerJs.ui.h(Components.AdSkip, { player: props.player })\n          ),\n          _kalturaPlayerJs.ui.h(\n            Components.BottomBar,\n            null,\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.leftControls },\n              _kalturaPlayerJs.ui.h(Components.PlayPauseControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.TimeDisplayAdsContainer, null)\n            ),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.rightControls },\n              _kalturaPlayerJs.ui.h(Components.VolumeControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.CastControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.FullscreenControl, { player: props.player })\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return CastUI;\n}(RemotePlayerUI);\n\nexports.CastUI = CastUI;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastLoader = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Utils = _kalturaPlayerJs.core.Utils,\n    getLogger = _kalturaPlayerJs.core.getLogger;\n\n\nvar SENDER_SDK_URL = '//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';\n\nvar CastLoader = function () {\n  function CastLoader() {\n    _classCallCheck(this, CastLoader);\n  }\n\n  _createClass(CastLoader, null, [{\n    key: 'load',\n    value: function load() {\n      return new Promise(function (resolve, reject) {\n        window['__onGCastApiAvailable'] = function (isAvailable) {\n          return CastLoader._onGCastApiAvailable(isAvailable, resolve);\n        };\n        CastLoader._loadCastSDK().then(function () {\n          return CastLoader._logger.debug('Cast sender lib has been loaded successfully');\n        }).catch(function (e) {\n          CastLoader._logger.debug('Cast sender lib loading failed', e);\n          reject(e);\n        });\n      });\n    }\n  }, {\n    key: '_loadCastSDK',\n    value: function _loadCastSDK() {\n      if (window['cast'] && window['cast']['framework']) {\n        return Promise.resolve();\n      }\n      return Utils.Dom.loadScriptAsync(SENDER_SDK_URL);\n    }\n  }, {\n    key: '_onGCastApiAvailable',\n    value: function _onGCastApiAvailable(isAvailable, resolve) {\n      CastLoader._logger.debug('onGCastApiAvailable, isAvailable: ' + isAvailable.toString());\n      if (isAvailable) {\n        resolve();\n      } else {\n        CastLoader._logger.debug('Google cast API isn\\'t available yet');\n      }\n    }\n  }]);\n\n  return CastLoader;\n}();\n\nCastLoader._logger = getLogger('CastLoader');\nexports.CastLoader = CastLoader;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastAdsController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _castPlayer = __webpack_require__(1);\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CustomActionMessage = _kalturaPlayerJs.cast.CustomActionMessage,\n    CustomActionType = _kalturaPlayerJs.cast.CustomActionType;\n\nvar CastAdsController = function () {\n  function CastAdsController() {\n    _classCallCheck(this, CastAdsController);\n\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n  }\n\n  _createClass(CastAdsController, [{\n    key: 'skipAd',\n    value: function skipAd() {\n      this._castSession.sendMessage(_castPlayer.CUSTOM_CHANNEL, new CustomActionMessage(CustomActionType.SKIP_AD));\n    }\n  }]);\n\n  return CastAdsController;\n}();\n\nexports.CastAdsController = CastAdsController;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// playkit-cast-sender.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 55af7330cf1fb9b776e6","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"kaltura-player-js\",\"commonjs2\":\"kaltura-player-js\",\"amd\":\"kaltura-player-js\",\"root\":[\"KalturaPlayer\"]}\n// module id = 0\n// module chunks = 0","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {CastStateManager} from './cast-state-manager';\nimport {CastTracksManager} from './cast-tracks-manager';\nimport {CastPlaybackEngine} from './cast-playack-engine';\nimport {CastUI} from './cast-ui';\nimport {CastLoader} from './cast-loader';\nimport {CastAdsController} from './cast-ads-controller';\n\nconst {Env, Track, TextStyle, EventType, StateType, FakeEvent, Utils, EngineType, AbrMode, Error} = core;\nconst {\n  BaseRemotePlayer,\n  PlayerSnapshot,\n  RemoteControl,\n  RemoteConnectedPayload,\n  RemoteDisconnectedPayload,\n  RemoteAvailablePayload,\n  RemoteSession,\n  TextStyleConverter,\n  CustomMessageType,\n  CustomMessage,\n  CustomEventMessage\n} = remote;\n\nexport const INTERVAL_FREQUENCY = 500;\nexport const SECONDS_TO_MINUTES_DIVIDER = 60;\nexport const CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\n\nclass CastPlayer extends BaseRemotePlayer {\n  static Type: string = 'chromecast';\n\n  static isSupported(): boolean {\n    return Env.browser.name === 'Chrome';\n  }\n\n  static defaultConfig: Object = {\n    dvrThreshold: 5\n  };\n\n  _remoteSession: RemoteSession;\n  _castSession: Object;\n  _castContext: Object;\n  _castRemotePlayer: Object;\n  _castRemotePlayerController: Object;\n  _ui: CastUI;\n  _stateManager: CastStateManager;\n  _tracksManager: CastTracksManager;\n  _engine: CastPlaybackEngine;\n  _readyPromise: ?Promise<*> = null;\n  _mediaInfo: ?Object = null;\n  _firstPlay: boolean = true;\n  _ended: boolean = false;\n  _playbackStarted: boolean = false;\n  _reset: boolean = true;\n  _destroyed: boolean = false;\n  _mediaInfoIntervalId: number;\n  _adsController: CastAdsController;\n\n  constructor(config: Object, remoteControl: RemoteControl) {\n    super('CastPlayer', config, remoteControl);\n    CastLoader.load()\n      .then(() => {\n        this._initializeCastApi();\n        this._initializeRemotePlayer();\n      })\n      .catch(e => {\n        this._logger.error('Cast initialized error', e);\n      });\n  }\n\n  loadMedia(mediaInfo: Object, options?: Object): Promise<*> {\n    this._logger.debug('Load media', mediaInfo, options);\n    this.reset();\n    this._remoteControl.getUIWrapper().reset();\n    this._mediaInfo = mediaInfo;\n\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_STARTED));\n    }\n    const media = new chrome.cast.media.MediaInfo();\n    const request = new chrome.cast.media.LoadRequest(media);\n\n    if (options) {\n      Object.keys(options).forEach(option => {\n        if (option !== 'media') {\n          request[option] = options[option];\n        } else {\n          Object.keys(options.media).forEach(mediaOption => {\n            media[mediaOption] = options.media[mediaOption];\n          });\n        }\n      });\n    }\n\n    media.customData = media.customData || {};\n    media.customData.mediaInfo = mediaInfo;\n    return this._castSession.loadMedia(request).then(() => this._onLoadMediaSuccess(), error => this._onLoadMediaFailed(error));\n  }\n\n  getMediaInfo(): ?Object {\n    return Utils.Object.copyDeep(this._mediaInfo);\n  }\n\n  ready(): Promise<*> {\n    return this._readyPromise ? this._readyPromise : Promise.resolve();\n  }\n\n  play(): void {\n    if (this.paused) {\n      this._engine.play();\n    } else if (this._ended && this._mediaInfo) {\n      this.loadMedia(this._mediaInfo);\n    }\n  }\n\n  pause(): void {\n    if (!this.paused) {\n      this._engine.pause();\n    }\n  }\n\n  reset(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._reset) return;\n    this._reset = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._tracksManager.reset();\n    this._engine.reset();\n    this._stateManager.reset();\n    this._readyPromise = this._createReadyPromise();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_RESET));\n  }\n\n  destroy(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._readyPromise = null;\n    this._eventManager.destroy();\n    this._tracksManager.destroy();\n    this._engine.destroy();\n    this._stateManager.destroy();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_DESTROY));\n  }\n\n  isLive(): boolean {\n    const mediaInfo = this._castRemotePlayer.mediaInfo;\n    return mediaInfo ? mediaInfo.streamType === chrome.cast.media.StreamType.LIVE : false;\n  }\n\n  isDvr(): boolean {\n    if (this.isLive()) {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        const range = mediaSession.liveSeekableRange;\n        if (range) {\n          const startMinutes = range.start / SECONDS_TO_MINUTES_DIVIDER;\n          const endMinutes = range.end / SECONDS_TO_MINUTES_DIVIDER;\n          return endMinutes - startMinutes > this._config.dvrThreshold;\n        }\n      }\n    }\n    return false;\n  }\n\n  seekToLiveEdge(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        this._engine.currentTime = range.end;\n      }\n    }\n  }\n\n  getStartTimeOfDvrWindow(): number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        return range.start;\n      }\n    }\n    return 0;\n  }\n\n  getTracks(type?: string): Array<Track> {\n    return this._tracksManager.getTracks(type);\n  }\n\n  getActiveTracks(): Object {\n    return this._tracksManager.getActiveTracks();\n  }\n\n  selectTrack(track: ?Track): void {\n    this._tracksManager.selectTrack(track);\n  }\n\n  hideTextTrack(): void {\n    this._tracksManager.hideTextTrack();\n  }\n\n  startCasting(): Promise<*> {\n    return cast && cast.framework ? cast.framework.CastContext.getInstance().requestSession() : Promise.reject();\n  }\n\n  isCastAvailable(): boolean {\n    return !!this._castRemotePlayer;\n  }\n\n  stopCasting(): void {\n    this._castSession.endSession(true);\n  }\n\n  getCastSession(): RemoteSession {\n    return Utils.Object.copyDeep(this._remoteSession);\n  }\n\n  get ads(): ?CastAdsController {\n    return this._adsController;\n  }\n\n  set textStyle(style: TextStyle): void {\n    this._tracksManager.textStyle = style;\n  }\n\n  get textStyle(): ?TextStyle {\n    return this._tracksManager.textStyle;\n  }\n\n  set currentTime(to: number): void {\n    this._engine.currentTime = to;\n  }\n\n  get currentTime(): ?number {\n    return this._engine.currentTime;\n  }\n\n  get duration(): ?number {\n    return this._engine.duration;\n  }\n\n  set volume(vol: number): void {\n    this._engine.volume = vol;\n  }\n\n  get volume(): ?number {\n    return this._engine.volume;\n  }\n\n  get paused(): ?boolean {\n    return this._engine.paused;\n  }\n\n  get ended(): ?boolean {\n    return this._ended;\n  }\n\n  get seeking(): ?boolean {\n    return this._engine.seeking;\n  }\n\n  set muted(mute: boolean): void {\n    this._engine.muted = mute;\n  }\n\n  get muted(): ?boolean {\n    return this._engine.muted;\n  }\n\n  get src(): ?string {\n    if (this._castRemotePlayer.mediaInfo) {\n      return this._castRemotePlayer.mediaInfo.contentUrl;\n    }\n  }\n\n  get poster(): string {\n    try {\n      return this._castRemotePlayer.mediaInfo.metadata.images[0].url;\n    } catch (e) {\n      return '';\n    }\n  }\n\n  get playbackRate(): ?number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      return mediaSession.playbackRate;\n    }\n  }\n\n  get engineType(): ?string {\n    return EngineType.HTML5;\n  }\n\n  get type(): string {\n    return CastPlayer.Type;\n  }\n\n  _initializeCastApi(): void {\n    const options: Object = {};\n\n    options.receiverApplicationId = this._config.receiverApplicationId || chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;\n    options.autoJoinPolicy = this._config.autoJoinPolicy || chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n\n    this._logger.debug('Init cast API with options', options);\n    cast.framework.CastContext.getInstance().setOptions(options);\n\n    const payload = new RemoteAvailablePayload(this, true);\n    this._remoteControl.onRemoteDeviceAvailable(payload);\n  }\n\n  _initializeRemotePlayer(): void {\n    this._castContext = cast.framework.CastContext.getInstance();\n    this._addSessionLifecycleListeners();\n    this._castRemotePlayer = new cast.framework.RemotePlayer();\n    this._castRemotePlayerController = new cast.framework.RemotePlayerController(this._castRemotePlayer);\n    this._castRemotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, () => {\n      if (this._castRemotePlayer.isConnected) {\n        this._setupRemotePlayer();\n      } else {\n        this._setupLocalPlayer();\n      }\n    });\n  }\n\n  _setupRemotePlayer(): void {\n    this._logger.debug('Setup remote player');\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._castSession.addMessageListener(CUSTOM_CHANNEL, (customChannel, customMessage) => this._onCustomMessage(customChannel, customMessage));\n    this._tracksManager = new CastTracksManager(this._castRemotePlayer);\n    this._engine = new CastPlaybackEngine(this._castRemotePlayer, this._castRemotePlayerController);\n    this._stateManager = new CastStateManager(this._castRemotePlayer, this._castRemotePlayerController);\n    this._ui = new CastUI();\n    this._attachListeners();\n    const snapshot = this._remoteControl.getPlayerSnapshot();\n    this._remoteSession = new RemoteSession(\n      this._castSession.getSessionId(),\n      this._castSession.getCastDevice().friendlyName,\n      this._castSession.getSessionState() !== cast.framework.SessionState.SESSION_STARTED\n    );\n    const payload = new RemoteConnectedPayload(this, this._remoteSession, this._ui);\n    this._remoteControl.onRemoteDeviceConnected(payload);\n    if (this._remoteSession.resuming) {\n      this._resumeSession();\n    } else if (snapshot && snapshot.mediaInfo) {\n      const mediaInfo = snapshot.mediaInfo;\n      const loadOptions = this._getLoadOptions(snapshot);\n      this.loadMedia(mediaInfo, loadOptions);\n    }\n  }\n\n  _setupLocalPlayer(): void {\n    this._logger.debug('Setup local player');\n    const snapshot = new PlayerSnapshot(this);\n    const payload = new RemoteDisconnectedPayload(this, snapshot);\n    this.pause();\n    this.destroy();\n    this._remoteControl.onRemoteDeviceDisconnected(payload);\n  }\n\n  _createReadyPromise(): void {\n    this._readyPromise = new Promise(resolve => {\n      this._eventManager.listenOnce(this, EventType.TRACKS_CHANGED, () => {\n        this.dispatchEvent(new FakeEvent(EventType.MEDIA_LOADED));\n        resolve();\n      });\n    });\n  }\n\n  _attachListeners(): void {\n    this._eventManager.listen(this._engine, EventType.TIME_UPDATE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.PAUSE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.PLAY, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.VOLUME_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.MUTE_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.DURATION_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.ENDED, e => this._onEnded(e));\n    this._eventManager.listen(this._tracksManager, EventType.TRACKS_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.VIDEO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.AUDIO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_STYLE_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.ERROR, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._stateManager, EventType.PLAYER_STATE_CHANGED, e => this._onPlayerStateChanged(e));\n  }\n\n  _onEnded(e: FakeEvent): void {\n    this._ended = true;\n    this.dispatchEvent(e);\n  }\n\n  _onPlayerStateChanged(e: FakeEvent): void {\n    if (this._ended) return;\n    if (this._stateManager.currentState.type === StateType.PLAYING) {\n      this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    }\n    this.dispatchEvent(e);\n  }\n\n  _handleFirstPlay(): void {\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_ENDED));\n    }\n    this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_STARTED));\n    if (this.paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    }\n    this._firstPlay = false;\n    this._playbackStarted = true;\n  }\n\n  _resumeSession(): void {\n    this._readyPromise = this._createReadyPromise();\n    this._mediaInfoIntervalId = setInterval(() => {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession && mediaSession.customData) {\n        clearInterval(this._mediaInfoIntervalId);\n        this._mediaInfo = mediaSession.customData.mediaInfo;\n        this._logger.debug('Resuming session with media info', this._mediaInfo);\n        this._onLoadMediaSuccess();\n      }\n    }, INTERVAL_FREQUENCY);\n  }\n\n  _onLoadMediaSuccess(): void {\n    this._logger.debug('Load media success');\n    this._reset = false;\n    this._triggerInitialPlayerEvents();\n    this._tracksManager.parseTracks();\n    this._handleFirstPlay();\n  }\n\n  _triggerInitialPlayerEvents(): void {\n    this.dispatchEvent(\n      new FakeEvent(EventType.SOURCE_SELECTED, {\n        selectedSource: [\n          {\n            url: this._castRemotePlayer.mediaInfo.contentUrl,\n            mimetype: this._castRemotePlayer.mediaInfo.contentType\n          }\n        ]\n      })\n    );\n    this.dispatchEvent(new FakeEvent(EventType.LOADED_METADATA));\n    this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, {mode: AbrMode.AUTO}));\n  }\n\n  _onLoadMediaFailed(error: Object): void {\n    this._logger.debug('Load media falied', error);\n    this.dispatchEvent(\n      new FakeEvent(EventType.ERROR, new Error(Error.Severity.CRITICAL, Error.Category.CAST, Error.Code.CAST_LOAD_MEDIA_FAILED, error))\n    );\n  }\n\n  _addSessionLifecycleListeners(): void {\n    this._castContext.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, event => {\n      switch (event.sessionState) {\n        case cast.framework.SessionState.SESSION_STARTING:\n          this._remoteControl.onRemoteDeviceConnecting();\n          break;\n        case cast.framework.SessionState.SESSION_ENDING:\n          this._remoteControl.onRemoteDeviceDisconnecting();\n          break;\n        case cast.framework.SessionState.SESSION_START_FAILED:\n          this._remoteControl.onRemoteDeviceConnectFailed();\n          break;\n      }\n    });\n  }\n\n  _getLoadOptions(snapshot: PlayerSnapshot): Object {\n    const loadOptions = {\n      autoplay: snapshot.autoplay,\n      currentTime: snapshot.startTime,\n      media: {}\n    };\n    if (this.textStyle && !this.textStyle.isEqual(snapshot.textStyle)) {\n      loadOptions.media.textTrackStyle = TextStyleConverter.toCastTextStyle(snapshot.textStyle);\n    }\n    loadOptions.media.customData = {\n      audioLanguage: snapshot.audioLanguage,\n      textLanguage: snapshot.textLanguage\n    };\n    if (snapshot.advertising && snapshot.advertising.adTagUrl) {\n      this._adsController = new CastAdsController();\n      const castAdvertising = this._config.advertising;\n      if (!castAdvertising || !castAdvertising.vast) {\n        loadOptions.media.vmapAdsRequest = this._getAdsRequest(snapshot.advertising);\n      } else {\n        const breakClipId = Utils.Generator.uniqueId(5);\n        const breakId = Utils.Generator.uniqueId(5);\n        const breakClips = [\n          {\n            id: breakClipId,\n            position: 0,\n            vastAdsRequest: this._getAdsRequest(snapshot.advertising)\n          }\n        ];\n        const breaks = [\n          {\n            breakClipIds: [breakClipId],\n            id: breakId,\n            position: 0\n          }\n        ];\n        loadOptions.media.breakClips = breakClips;\n        loadOptions.media.breaks = breaks;\n      }\n    }\n    return loadOptions;\n  }\n\n  _getAdsRequest(advertising: Object): Object {\n    const adsRequest = {};\n    if (advertising.adTagUrl) {\n      adsRequest.adTagUrl = advertising.adTagUrl;\n    }\n    if (advertising.adsResponse) {\n      adsRequest.adsResponse = advertising.adsResponse;\n    }\n    return adsRequest;\n  }\n\n  _onCustomMessage(customChannel: string, customMessage: CustomMessage): void {\n    try {\n      const parsedCustomMessage = JSON.parse(customMessage);\n      this._logger.debug('Custom message received', parsedCustomMessage);\n      switch (parsedCustomMessage.type) {\n        case CustomMessageType.EVENT:\n          this._handleCustomEvent(parsedCustomMessage);\n          break;\n      }\n    } catch (e) {\n      this.dispatchEvent(\n        new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_CUSTOM_MESSAGE_PARSING_ERROR, e))\n      );\n    }\n  }\n\n  _handleCustomEvent(customEvent: CustomEventMessage): void {\n    this.dispatchEvent(new FakeEvent(customEvent.event, customEvent.payload));\n  }\n}\n\nexport {CastPlayer};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-player.js","// @flow\nimport {CastPlayer} from './cast-player';\nimport {cast} from 'kaltura-player-js';\n\nconst {registerRemotePlayer} = cast;\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\nexport {CastPlayer as RemotePlayer};\nexport {__VERSION__ as VERSION, __NAME__ as NAME};\n\nif (CastPlayer.isSupported()) {\n  registerRemotePlayer(CastPlayer.Type, CastPlayer);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","//@flow\nimport {core} from 'kaltura-player-js';\n\nconst {State, FakeEvent, EventType, FakeEventTarget, StateType} = core;\n\nclass CastStateManager extends FakeEventTarget {\n  _currentState: State;\n  _previousState: State;\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _updateState: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n    this._updateState = this._updateState.bind(this);\n    this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n  }\n\n  _updateState(): void {\n    this._currentState.duration = Date.now() / 1000;\n    this._previousState = this._currentState;\n    if (this._remotePlayer.playerState) {\n      this._currentState = new State(this._remotePlayer.playerState.toLowerCase());\n    } else {\n      this._currentState = new State(StateType.IDLE);\n    }\n    this.dispatchEvent(\n      new FakeEvent(EventType.PLAYER_STATE_CHANGED, {\n        oldState: this.previousState,\n        newState: this.currentState\n      })\n    );\n  }\n\n  reset(): void {\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  destroy(): void {\n    this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  get currentState(): State {\n    return this._currentState;\n  }\n\n  get previousState(): State {\n    return this._previousState;\n  }\n}\n\nexport {CastStateManager};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-state-manager.js","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {TextStyleConverter} = remote;\nconst {Track, getLogger, TextStyle, AudioTrack, VideoTrack, TextTrack, Utils, TrackType, EventType, FakeEvent, FakeEventTarget} = core;\nconst TRACK_TYPE_TO_INSTANCE: {[type: string]: Track} = {\n  [TrackType.AUDIO]: AudioTrack,\n  [TrackType.VIDEO]: VideoTrack,\n  [TrackType.TEXT]: TextTrack\n};\n\nclass CastTracksManager extends FakeEventTarget {\n  _remotePlayer: Object;\n  _castSession: Object;\n  _textStyle: TextStyle;\n  _activeTrackIds: Array<number> = [];\n  _tracks: Array<Track> = [];\n  _mediaStatusIntervalId: ?number;\n  _onMediaStatusUpdate: Function;\n  _logger: any;\n\n  constructor(remotePlayer: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._logger = getLogger('CastTracksManager');\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._textStyle = new TextStyle();\n    this._bindEvents();\n  }\n\n  parseTracks(): void {\n    const tracks = this._remotePlayer.mediaInfo.tracks;\n    if (tracks && tracks.length > 0) {\n      const castTextTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.TEXT);\n      const castVideoTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.VIDEO);\n      const castAudioTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.AUDIO);\n      const textTracks = this._parseTextTracks(castTextTracks);\n      const videoTracks = this._parseVideoTracks(castVideoTracks);\n      const audioTracks = this._parseAudioTracks(castAudioTracks);\n      this._tracks = audioTracks.concat(videoTracks).concat(textTracks);\n      this._addTextTrackOffOption();\n    }\n    this._logger.debug('Parse tracks', this._tracks);\n    this._startOnMediaStatusUpdateInterval();\n    this.dispatchEvent(new FakeEvent(EventType.TRACKS_CHANGED, {tracks: this._tracks}));\n  }\n\n  getTracks(type?: string): Array<Track> {\n    return Utils.Object.copyDeep(this._getTracksByType(type));\n  }\n\n  getActiveTracks(): Object {\n    return Utils.Object.copyDeep({\n      video: this._getTracksByType(TrackType.VIDEO).find(track => track.active),\n      audio: this._getTracksByType(TrackType.AUDIO).find(track => track.active),\n      text: this._getTracksByType(TrackType.TEXT).find(track => track.active)\n    });\n  }\n\n  selectTrack(track: ?Track): void {\n    if (track instanceof VideoTrack) {\n      this._selectVideoTrack(track);\n    } else if (track instanceof AudioTrack) {\n      this._selectAudioTrack(track);\n    } else if (track instanceof TextTrack) {\n      this._selectTextTrack(track);\n    }\n  }\n\n  hideTextTrack(): void {\n    const offTrack = this._tracks.find(t => t.language === 'off');\n    this.selectTrack(offTrack);\n  }\n\n  reset(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  destroy(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  set textStyle(style: TextStyle): void {\n    this._logger.debug('Setting text style', style);\n    const textTrackStyle = TextStyleConverter.toCastTextStyle(style);\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(null, textTrackStyle);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Setting text style succeed');\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      },\n      error => {\n        this._logger.debug('Setting text style failed', error);\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  get textStyle(): ?TextStyle {\n    return this._textStyle.clone();\n  }\n\n  _startOnMediaStatusUpdateInterval(): void {\n    this._mediaStatusIntervalId = setInterval(this._onMediaStatusUpdate, INTERVAL_FREQUENCY);\n  }\n\n  _stopOnMediaStatusUpdateInterval(): void {\n    if (this._mediaStatusIntervalId) {\n      clearInterval(this._mediaStatusIntervalId);\n      this._mediaStatusIntervalId = null;\n    }\n  }\n\n  _bindEvents(): void {\n    this._onMediaStatusUpdate = this._onMediaStatusUpdate.bind(this);\n  }\n\n  _parseTextTracks(castTextTracks: Array<Object>): Array<TextTrack> {\n    const textTracks = [];\n    castTextTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        kind: track.subType || 'subtitles',\n        active: false\n      };\n      textTracks.push(new TextTrack(settings));\n    });\n    return textTracks;\n  }\n\n  _parseVideoTracks(castVideoTracks: Array<Object>): Array<VideoTrack> {\n    const videoTracks = [];\n    castVideoTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      videoTracks.push(new VideoTrack(settings));\n    });\n    return videoTracks;\n  }\n\n  _parseAudioTracks(castAudioTracks: Array<Object>): Array<AudioTrack> {\n    const audioTracks = [];\n    castAudioTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      audioTracks.push(new AudioTrack(settings));\n    });\n    return audioTracks;\n  }\n\n  _selectVideoTrack(track: VideoTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().video;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, {selectedVideoTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectAudioTrack(track: AudioTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().audio;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, {selectedAudioTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTextTrack(track: TextTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().text;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, {selectedTextTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTrack(newTrack: Track, currentTrack: ?Track, onSuccess: Function, onFailed: Function): void {\n    this._logger.debug('Select track', newTrack, currentTrack, this._activeTrackIds);\n    if (currentTrack) {\n      const index = this._activeTrackIds.indexOf(currentTrack.id);\n      if (index > -1) {\n        this._activeTrackIds.splice(index, 1);\n      }\n    }\n    if (newTrack.id && newTrack.language !== 'off') {\n      this._activeTrackIds.push(newTrack.id);\n    }\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(this._activeTrackIds);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Select track succeeded');\n        this._markActiveTrack(currentTrack, false);\n        this._markActiveTrack(newTrack, true);\n        onSuccess();\n      },\n      e => {\n        this._logger.debug('Select track failed', e);\n        onFailed(e);\n      }\n    );\n  }\n\n  _markActiveTrack(track: ?Track, active: boolean): void {\n    if (track) {\n      const id = track.id;\n      const origTrack = this._tracks.find(t => t.id === id);\n      if (origTrack) {\n        origTrack.active = active;\n      }\n    }\n  }\n\n  _addTextTrackOffOption(): void {\n    const textTracks = this._getTracksByType(TrackType.TEXT);\n    const lastTrack = textTracks[textTracks.length - 1];\n    if (textTracks && textTracks.length) {\n      this._tracks.push(\n        new TextTrack({\n          id: lastTrack.id + 1,\n          active: true,\n          index: lastTrack.index + 1,\n          kind: 'subtitles',\n          label: 'Off',\n          language: 'off'\n        })\n      );\n    }\n  }\n\n  _getTracksByType(type?: string): Array<Track> {\n    return !type\n      ? this._tracks\n      : this._tracks.filter(track => {\n          if (type && TRACK_TYPE_TO_INSTANCE[type]) {\n            return track instanceof TRACK_TYPE_TO_INSTANCE[type];\n          }\n          return true;\n        });\n  }\n\n  _onMediaStatusUpdate(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const isTextStyleChanged = () => {\n        const localTextStyle = TextStyleConverter.toCastTextStyle(this.textStyle);\n        const remoteTextStyle = mediaSession.media.textTrackStyle;\n        if (remoteTextStyle) {\n          return !(\n            localTextStyle.backgroundColor === remoteTextStyle.backgroundColor &&\n            localTextStyle.fontFamily === remoteTextStyle.fontFamily &&\n            localTextStyle.fontScale === remoteTextStyle.fontScale &&\n            localTextStyle.foregroundColor === remoteTextStyle.foregroundColor\n          );\n        }\n        return false;\n      };\n      const isActiveTrackIdsChanged = () => {\n        if (mediaSession.activeTrackIds) {\n          return !(\n            this._activeTrackIds.length === mediaSession.activeTrackIds.length &&\n            this._activeTrackIds.every((value, index) => value === mediaSession.activeTrackIds[index])\n          );\n        }\n        return false;\n      };\n      if (isActiveTrackIdsChanged()) {\n        const diffIds = mediaSession.activeTrackIds.filter(i => !this._activeTrackIds.includes(i));\n        diffIds.forEach(id => {\n          const track = this._tracks.find(t => t.id === id);\n          this.selectTrack(track);\n        });\n      }\n      if (isTextStyleChanged()) {\n        const style = TextStyleConverter.toPlayerTextStyle(mediaSession.media.textTrackStyle);\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      }\n    }\n  }\n}\n\nexport {CastTracksManager};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-tracks-manager.js","// @flow\nimport {core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {EventType, FakeEvent, FakeEventTarget} = core;\n\nclass CastPlaybackEngine extends FakeEventTarget {\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _mediaSession: Object;\n  _muted: boolean = false;\n  _volume: number = 1;\n  _paused: boolean = false;\n  _currentTime: number = 0;\n  _duration: number = 0;\n  _seeking: boolean = false;\n  _liveCurrentTimeIntervalId: number;\n  _onCurrentTimeChanged: Function;\n  _onIsPausedChanged: Function;\n  _onDurationChanged: Function;\n  _onVolumeLevelChanged: Function;\n  _onIsMutedChanged: Function;\n  _onIsMediaLoadedChanged: Function;\n  _onLiveCurrentTimeChanged: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._bindEvents();\n    this._toggleListeners(true);\n  }\n\n  reset(): void {\n    this._toggleListeners(false);\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._resetFlags();\n    this._toggleListeners(true);\n  }\n\n  destroy(): void {\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._toggleListeners(false);\n    this._muted = false;\n    this._volume = 1;\n    this._resetFlags();\n  }\n\n  play(): void {\n    this._remotePlayerController.playOrPause();\n  }\n\n  pause(): void {\n    if (this._remotePlayer.canPause) {\n      this._remotePlayerController.playOrPause();\n    }\n  }\n\n  set muted(value: boolean) {\n    if ((value && !this.muted) || (!value && this.muted)) {\n      this._remotePlayerController.muteOrUnmute();\n    }\n  }\n\n  set volume(value: number) {\n    if (this._remotePlayer.canControlVolume) {\n      this._remotePlayer.volumeLevel = value;\n      this._remotePlayerController.setVolumeLevel();\n    }\n  }\n\n  set currentTime(value: number) {\n    if (this._remotePlayer.canSeek) {\n      this._seeking = true;\n      this._remotePlayer.currentTime = value;\n      this._remotePlayerController.seek();\n    }\n  }\n\n  get duration(): ?number {\n    return this._duration;\n  }\n\n  get paused(): ?boolean {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.isPaused;\n    }\n    return this._paused;\n  }\n\n  get seeking(): ?boolean {\n    return this._seeking;\n  }\n\n  get muted(): ?boolean {\n    return this._muted;\n  }\n\n  get currentTime(): ?number {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.currentTime;\n    }\n    return this._currentTime;\n  }\n\n  get volume(): ?number {\n    return this._volume;\n  }\n\n  _resetFlags(): void {\n    this._paused = false;\n    this._currentTime = 0;\n    this._duration = 0;\n    this._seeking = false;\n  }\n\n  _bindEvents(): void {\n    this._onCurrentTimeChanged = this._onCurrentTimeChanged.bind(this);\n    this._onIsPausedChanged = this._onIsPausedChanged.bind(this);\n    this._onDurationChanged = this._onDurationChanged.bind(this);\n    this._onVolumeLevelChanged = this._onVolumeLevelChanged.bind(this);\n    this._onIsMutedChanged = this._onIsMutedChanged.bind(this);\n    this._onIsMediaLoadedChanged = this._onIsMediaLoadedChanged.bind(this);\n    this._onLiveCurrentTimeChanged = this._onLiveCurrentTimeChanged.bind(this);\n  }\n\n  _toggleListeners(listen: boolean): void {\n    const listeners = {\n      [cast.framework.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED]: this._onIsMediaLoadedChanged,\n      [cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED]: this._onIsPausedChanged,\n      [cast.framework.RemotePlayerEventType.DURATION_CHANGED]: this._onDurationChanged,\n      [cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED]: this._onVolumeLevelChanged,\n      [cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED]: this._onIsMutedChanged\n    };\n    if (listen) {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.addEventListener(e, listeners[e]));\n    } else {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.removeEventListener(e, listeners[e]));\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n    }\n  }\n\n  _onIsMediaLoadedChanged(isMediaLoadedEvent: Object): void {\n    const onMediaInfoChanged = () => {\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n      if (this._remotePlayer.mediaInfo.streamType === chrome.cast.media.StreamType.LIVE) {\n        this._mediaSession = cast.framework.CastContext.getInstance()\n          .getCurrentSession()\n          .getMediaSession();\n        this._liveCurrentTimeIntervalId = setInterval(this._onLiveCurrentTimeChanged, INTERVAL_FREQUENCY);\n      } else {\n        this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n      }\n    };\n    if (isMediaLoadedEvent.value) {\n      this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n    }\n  }\n\n  _onCurrentTimeChanged(): void {\n    this._currentTime = this._remotePlayer.currentTime;\n    this._seeking = false;\n    this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    this._maybeEndPlayback();\n  }\n\n  _onLiveCurrentTimeChanged(): void {\n    this._currentTime = this._mediaSession.currentTime;\n    this._seeking = false;\n    this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    this._maybeEndLivePlayback();\n  }\n\n  _onIsPausedChanged(): void {\n    this._paused = this._remotePlayer.isPaused;\n    if (this._paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    } else {\n      this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    }\n  }\n\n  _onDurationChanged(): void {\n    this._duration = this._remotePlayer.duration;\n    this.dispatchEvent(new FakeEvent(EventType.DURATION_CHANGE));\n  }\n\n  _onVolumeLevelChanged(): void {\n    this._volume = this._remotePlayer.volumeLevel;\n    this.dispatchEvent(new FakeEvent(EventType.VOLUME_CHANGE));\n  }\n\n  _onIsMutedChanged(): void {\n    this._muted = this._remotePlayer.isMuted;\n    this.dispatchEvent(new FakeEvent(EventType.MUTE_CHANGE, {mute: this.muted}));\n  }\n\n  _maybeEndPlayback(): void {\n    const delta = Math.round(this._duration - this._currentTime);\n    if (this._currentTime !== 0 && this._duration !== 0 && delta <= 1) {\n      this._currentTime = this._duration;\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n\n  _maybeEndLivePlayback(): void {\n    const range = this._mediaSession.liveSeekableRange;\n    if (range && range.isLiveDone) {\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n}\n\nexport {CastPlaybackEngine};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-playack-engine.js","// @flow\nimport {cast, ui} from 'kaltura-player-js';\n\n// eslint-disable-next-line no-unused-vars\nconst {style, Components} = ui;\nconst {RemotePlayerUI} = cast;\n\nclass CastUI extends RemotePlayerUI {\n  playbackUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.OverlayPortal />\n          <Components.BottomBar>\n            <Components.SeekBarPlaybackContainer showFramePreview showTimeBubble player={props.player} playerContainer={props.playerContainer} />\n            <div className={style.leftControls}>\n              <Components.PlayPauseControl player={props.player} />\n              <Components.RewindControl player={props.player} step={10} />\n              <Components.TimeDisplayPlaybackContainer format=\"current / total\" />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.LanguageControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n        </div>\n        <Components.PrePlaybackPlayOverlay player={props.player} />\n        <Components.CastOverlay player={props.player} />\n        <Components.OverlayAction player={props.player} />\n        <Components.CastAfterPlay player={props.player} />\n      </div>\n    );\n  }\n\n  liveUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.OverlayPortal />\n          <Components.BottomBar>\n            <Components.SeekBarLivePlaybackContainer showFramePreview showTimeBubble player={props.player} playerContainer={props.playerContainer} />\n            <div className={style.leftControls}>\n              <Components.PlayPauseControl player={props.player} />\n              <Components.LiveTag player={props.player} />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.LanguageControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n        </div>\n        <Components.PrePlaybackPlayOverlay player={props.player} />\n        <Components.CastOverlay player={props.player} />\n        <Components.OverlayAction player={props.player} />\n        <Components.CastAfterPlay player={props.player} />\n      </div>\n    );\n  }\n\n  idleUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWWrapper}>\n        <Components.Loading player={props.player} />\n        <Components.CastOverlay player={props.player} />\n      </div>\n    );\n  }\n\n  adsUI(props: Object): any {\n    return (\n      <div className={style.adGuiWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.CastOverlay player={props.player} />\n          <Components.OverlayAction player={props.player} />\n          <div>\n            <Components.TopBar>\n              <div className={style.leftControls}>\n                <Components.AdNotice />\n              </div>\n              <div className={style.rightControls}>\n                <Components.AdLearnMore />\n              </div>\n            </Components.TopBar>\n            <Components.AdSkip player={props.player} />\n          </div>\n          <Components.BottomBar>\n            <div className={style.leftControls}>\n              <Components.PlayPauseControl player={props.player} />\n              <Components.TimeDisplayAdsContainer />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {CastUI};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-ui.js","// @flow\nimport {core} from 'kaltura-player-js';\n\nconst {Utils, getLogger} = core;\n\nconst SENDER_SDK_URL: string = '//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';\n\nclass CastLoader {\n  static _logger: any = getLogger('CastLoader');\n\n  static load(): Promise<*> {\n    return new Promise((resolve, reject) => {\n      window['__onGCastApiAvailable'] = isAvailable => CastLoader._onGCastApiAvailable(isAvailable, resolve);\n      CastLoader._loadCastSDK()\n        .then(() => CastLoader._logger.debug('Cast sender lib has been loaded successfully'))\n        .catch(e => {\n          CastLoader._logger.debug('Cast sender lib loading failed', e);\n          reject(e);\n        });\n    });\n  }\n\n  static _loadCastSDK(): Promise<*> {\n    if (window['cast'] && window['cast']['framework']) {\n      return Promise.resolve();\n    }\n    return Utils.Dom.loadScriptAsync(SENDER_SDK_URL);\n  }\n\n  static _onGCastApiAvailable(isAvailable: boolean, resolve: Function): void {\n    CastLoader._logger.debug(`onGCastApiAvailable, isAvailable: ${isAvailable.toString()}`);\n    if (isAvailable) {\n      resolve();\n    } else {\n      CastLoader._logger.debug(`Google cast API isn't available yet`);\n    }\n  }\n}\n\nexport {CastLoader};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-loader.js","// @flow\nimport {CUSTOM_CHANNEL} from './cast-player';\nimport {cast as remote} from 'kaltura-player-js';\n\nconst {CustomActionMessage, CustomActionType} = remote;\n\nclass CastAdsController {\n  _castSession: Object;\n\n  constructor() {\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n  }\n\n  skipAd(): void {\n    this._castSession.sendMessage(CUSTOM_CHANNEL, new CustomActionMessage(CustomActionType.SKIP_AD));\n  }\n}\n\nexport {CastAdsController};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-ads-controller.js"],"sourceRoot":""}