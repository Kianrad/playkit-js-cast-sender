{"version":3,"sources":["./cast/sender/webpack/universalModuleDefinition","./cast/sender/playkit-cast-sender.js","./cast/sender/webpack/bootstrap 0afbb7351e3d5135738e","./cast/sender/external {\"commonjs\":\"kaltura-player-js\",\"commonjs2\":\"kaltura-player-js\",\"amd\":\"kaltura-player-js\",\"root\":[\"KalturaPlayer\"]}","./cast/sender/./cast-player.js","./cast/sender/./index.js","./cast/sender/./cast-state-manager.js","./cast/sender/./cast-tracks-manager.js","./cast/sender/./cast-playback-engine.js","./cast/sender/./cast-ui.js","./cast/sender/./cast-loader.js","./cast/sender/./cast-ads-controller.js","./cast/sender/./cast-ads-manager.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE_0__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","CastPlayer","CUSTOM_CHANNEL","SECONDS_TO_MINUTES_DIVIDER","INTERVAL_FREQUENCY","undefined","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_kalturaPlayerJs","_castStateManager","_castTracksManager","_castPlaybackEngine","_castUi","_castLoader","_castAdsController","_castAdsManager","Env","core","EventType","Track","TextStyle","StateType","FakeEvent","Utils","EngineType","AbrMode","Error","BaseRemotePlayer","cast","PlayerSnapshot","RemoteConnectedPayload","RemoteControl","RemoteDisconnectedPayload","RemoteAvailablePayload","RemoteSession","TextStyleConverter","CustomMessageType","CustomMessage","CustomEventMessage","_BaseRemotePlayer","castConfig","remoteControl","_this","getPrototypeOf","_readyPromise","_mediaInfo","_firstPlay","_ended","_playbackStarted","_reset","_destroyed","CastLoader","load","then","_initializeCastApi","_initializeRemotePlayer","catch","e","_logger","error","browser","mediaInfo","options","_this2","debug","reset","_remoteControl","getUIWrapper","dispatchEvent","CHANGE_SOURCE_STARTED","media","chrome","MediaInfo","request","LoadRequest","keys","forEach","option","mediaOption","customData","_castSession","loadMedia","_onLoadMediaSuccess","_onLoadMediaFailed","copyDeep","Promise","resolve","ended","_adsManager","adBreak","_engine","play","pause","clearInterval","_mediaInfoIntervalId","_tracksManager","_stateManager","_createReadyPromise","PLAYER_RESET","_eventManager","destroy","PLAYER_DESTROY","_castRemotePlayer","streamType","StreamType","LIVE","isLive","mediaSession","getMediaSession","range","liveSeekableRange","startMinutes","start","end","_castConfig","liveEdgeThreshold","currentTime","type","getTracks","getActiveTracks","track","selectTrack","hideTextTrack","framework","CastContext","getInstance","requestSession","reject","endSession","_remoteSession","receiverApplicationId","DEFAULT_MEDIA_RECEIVER_APP_ID","autoJoinPolicy","AutoJoinPolicy","ORIGIN_SCOPED","setOptions","payload","onRemoteDeviceAvailable","_this3","_castContext","_addSessionLifecycleListeners","RemotePlayer","_castRemotePlayerController","RemotePlayerController","addEventListener","RemotePlayerEventType","IS_CONNECTED_CHANGED","isConnected","_setupRemotePlayer","_setupLocalPlayer","_this4","getCurrentSession","addMessageListener","customChannel","customMessage","_onCustomMessage","CastTracksManager","CastPlaybackEngine","CastStateManager","CastAdsManager","_ui","CastUI","_attachListeners","snapshot","getPlayerSnapshot","_playerConfig","config","getSessionId","getCastDevice","friendlyName","getSessionState","SessionState","SESSION_STARTED","onRemoteDeviceConnected","resuming","_resumeSession","loadOptions","_getLoadOptions","onRemoteDeviceDisconnected","_this5","listenOnce","TRACKS_CHANGED","MEDIA_LOADED","_this6","listen","TIME_UPDATE","PAUSE","PLAY","VOLUME_CHANGE","MUTE_CHANGE","DURATION_CHANGE","ENDED","_onEnded","SEEKING","SEEKED","TEXT_TRACK_CHANGED","VIDEO_TRACK_CHANGED","AUDIO_TRACK_CHANGED","TEXT_STYLE_CHANGED","ERROR","PLAYER_STATE_CHANGED","_onPlayerStateChanged","_this7","allAdsCompleted","PLAYBACK_ENDED","ALL_ADS_COMPLETED","currentState","PLAYING","CHANGE_SOURCE_ENDED","PLAYBACK_START","FIRST_PLAY","FIRST_PLAYING","paused","_this8","setInterval","_triggerInitialPlayerEvents","parseTracks","_handleFirstPlay","SOURCE_SELECTED","selectedSource","url","contentUrl","mimetype","contentType","LOADED_METADATA","ABR_MODE_CHANGED","mode","AUTO","Severity","CRITICAL","Category","CAST","Code","CAST_LOAD_MEDIA_FAILED","_this9","CastContextEventType","SESSION_STATE_CHANGED","event","sessionState","SESSION_STARTING","onRemoteDeviceConnecting","SESSION_ENDING","onRemoteDeviceDisconnecting","SESSION_START_FAILED","onRemoteDeviceConnectFailed","autoplay","playback","startTime","textStyle","isEqual","textTrackStyle","toCastTextStyle","audioLanguage","textLanguage","advertising","adTagUrl","_adsController","CastAdsController","castAdvertising","vast","breakClipId","Generator","uniqueId","breakId","breakClips","id","position","vastAdsRequest","_getAdsRequest","breaks","breakClipIds","vmapAdsRequest","adsRequest","adsResponse","parsedCustomMessage","JSON","parse","EVENT","_handleCustomEvent","RECOVERABLE","CAST_CUSTOM_MESSAGE_PARSING_ERROR","customEvent","set","style","to","duration","vol","volume","seeking","mute","muted","metadata","images","playbackRate","Type","defaultConfig","NAME","VERSION","_castPlayer","registerRemotePlayer","isSupported","State","FakeEventTarget","_FakeEventTarget","remotePlayer","remotePlayerController","_remotePlayer","_remotePlayerController","_currentState","IDLE","_previousState","_updateState","bind","Date","now","playerState","toLowerCase","oldState","previousState","newState","removeEventListener","_defineProperty","obj","_TRACK_TYPE_TO_INSTAN","getLogger","AudioTrack","VideoTrack","TextTrack","TrackType","TRACK_TYPE_TO_INSTANCE","AUDIO","VIDEO","TEXT","_activeTrackIds","_tracks","_textStyle","_bindEvents","tracks","castTextTracks","filter","t","castVideoTracks","castAudioTracks","textTracks","_parseTextTracks","videoTracks","_parseVideoTracks","audioTracks","_parseAudioTracks","concat","_addTextTrackOffOption","_startOnMediaStatusUpdateInterval","_getTracksByType","video","find","active","audio","text","_selectVideoTrack","_selectAudioTrack","_selectTextTrack","offTrack","language","_stopOnMediaStatusUpdateInterval","_mediaStatusIntervalId","_onMediaStatusUpdate","settings","trackId","index","label","kind","subType","push","currentTrack","_selectTrack","selectedVideoTrack","EDIT_TRACKS_INFO_ERROR","selectedAudioTrack","CAST_EDIT_TRACKS_INFO_ERROR","selectedTextTrack","newTrack","onSuccess","onFailed","indexOf","splice","tracksInfoRequest","EditTracksInfoRequest","editTracksInfo","_markActiveTrack","origTrack","lastTrack","activeTrackIds","every","includes","localTextStyle","remoteTextStyle","backgroundColor","fontFamily","fontScale","foregroundColor","toPlayerTextStyle","clone","_muted","_volume","_paused","_currentTime","_duration","_seeking","_toggleListeners","_liveCurrentTimeIntervalId","_resetFlags","playOrPause","canPause","_onCurrentTimeChanged","_onIsPausedChanged","_onDurationChanged","_onVolumeLevelChanged","_onIsMutedChanged","_onIsMediaLoadedChanged","_onLiveCurrentTimeChanged","_listeners","listeners","IS_MEDIA_LOADED_CHANGED","IS_PAUSED_CHANGED","DURATION_CHANGED","VOLUME_LEVEL_CHANGED","IS_MUTED_CHANGED","CURRENT_TIME_CHANGED","isMediaLoadedEvent","onMediaInfoChanged","MEDIA_INFO_CHANGED","_mediaSession","_maybeDispatchTimeUpdate","_maybeEndPlayback","_maybeEndLivePlayback","isPaused","volumeLevel","isMuted","_seekTargetTime","_seekForward","delta","Math","round","isLiveDone","muteOrUnmute","canControlVolume","setVolumeLevel","canSeek","seek","savedPlayerState","ui","Components","RemotePlayerUI","_RemotePlayerUI","apply","arguments","h","className","playbackGuiWWrapper","KeyboardControl","player","Loading","playerGui","OverlayPortal","BottomBar","SeekBarPlaybackContainer","showFramePreview","showTimeBubble","playerContainer","leftControls","PlaybackControls","RewindControl","step","TimeDisplayPlaybackContainer","format","rightControls","VolumeControl","LanguageControl","CastControl","FullscreenControl","CastOverlay","OverlayAction","PrePlaybackPlayOverlay","SeekBarLivePlaybackContainer","LiveTag","adGuiWrapper","TopBar","AdNotice","AdLearnMore","AdSkip","TimeDisplayAdsContainer","window","isAvailable","_onGCastApiAvailable","_loadCastSDK","Dom","loadScriptAsync","toString","CustomActionMessage","CustomActionType","sendMessage","SKIP_AD","EventManager","castPlayer","_adBreak","_allAdsCompleted","AD_MANIFEST_LOADED","AD_BREAK_START","AD_BREAK_END","removeAll"],"mappings":"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","file":"playkit-cast-sender.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"kaltura-player-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sender\", [\"kaltura-player-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sender\"] = factory(require(\"kaltura-player-js\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"cast\"] = root[\"KalturaPlayer\"][\"cast\"] || {}, root[\"KalturaPlayer\"][\"cast\"][\"sender\"] = factory(root[\"KalturaPlayer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"kaltura-player-js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sender\", [\"kaltura-player-js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sender\"] = factory(require(\"kaltura-player-js\"));\n\telse\n\t\troot[\"KalturaPlayer\"] = root[\"KalturaPlayer\"] || {}, root[\"KalturaPlayer\"][\"cast\"] = root[\"KalturaPlayer\"][\"cast\"] || {}, root[\"KalturaPlayer\"][\"cast\"][\"sender\"] = factory(root[\"KalturaPlayer\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastPlayer = exports.CUSTOM_CHANNEL = exports.SECONDS_TO_MINUTES_DIVIDER = exports.INTERVAL_FREQUENCY = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _castStateManager = __webpack_require__(3);\n\nvar _castTracksManager = __webpack_require__(4);\n\nvar _castPlaybackEngine = __webpack_require__(5);\n\nvar _castUi = __webpack_require__(6);\n\nvar _castLoader = __webpack_require__(7);\n\nvar _castAdsController = __webpack_require__(8);\n\nvar _castAdsManager = __webpack_require__(9);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Env = _kalturaPlayerJs.core.Env,\n    Track = _kalturaPlayerJs.core.Track,\n    TextStyle = _kalturaPlayerJs.core.TextStyle,\n    EventType = _kalturaPlayerJs.core.EventType,\n    StateType = _kalturaPlayerJs.core.StateType,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    Utils = _kalturaPlayerJs.core.Utils,\n    EngineType = _kalturaPlayerJs.core.EngineType,\n    AbrMode = _kalturaPlayerJs.core.AbrMode,\n    Error = _kalturaPlayerJs.core.Error;\nvar BaseRemotePlayer = _kalturaPlayerJs.cast.BaseRemotePlayer,\n    PlayerSnapshot = _kalturaPlayerJs.cast.PlayerSnapshot,\n    RemoteControl = _kalturaPlayerJs.cast.RemoteControl,\n    RemoteConnectedPayload = _kalturaPlayerJs.cast.RemoteConnectedPayload,\n    RemoteDisconnectedPayload = _kalturaPlayerJs.cast.RemoteDisconnectedPayload,\n    RemoteAvailablePayload = _kalturaPlayerJs.cast.RemoteAvailablePayload,\n    RemoteSession = _kalturaPlayerJs.cast.RemoteSession,\n    TextStyleConverter = _kalturaPlayerJs.cast.TextStyleConverter,\n    CustomMessageType = _kalturaPlayerJs.cast.CustomMessageType,\n    CustomMessage = _kalturaPlayerJs.cast.CustomMessage,\n    CustomEventMessage = _kalturaPlayerJs.cast.CustomEventMessage;\nvar INTERVAL_FREQUENCY = exports.INTERVAL_FREQUENCY = 500;\nvar SECONDS_TO_MINUTES_DIVIDER = exports.SECONDS_TO_MINUTES_DIVIDER = 60;\nvar CUSTOM_CHANNEL = exports.CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\n\n/**\n * Cast Sender Player.\n * @class CastPlayer\n * @param {CastConfigObject} config - The cast configuration.\n * @param {RemoteControl} remoteControl - The remote control.\n * @extends BaseRemotePlayer\n */\n\nvar CastPlayer = function (_BaseRemotePlayer) {\n  _inherits(CastPlayer, _BaseRemotePlayer);\n\n  _createClass(CastPlayer, null, [{\n    key: 'isSupported',\n\n\n    /**\n     * @function isSupported\n     * @static\n     * @returns {boolean} - Whether the cast player is supported in the current runtime environment.\n     * @memberof CastPlayer\n     * @override\n     */\n    value: function isSupported() {\n      return Env.browser.name === 'Chrome';\n    }\n\n    /**\n     * The default cast configuration.\n     * @static\n     * @type {Object}\n     * @memberof CastPlayer\n     * @override\n     */\n\n    /**\n     * The remote player type.\n     * @static\n     * @type {string}\n     * @memberof CastPlayer\n     * @override\n     */\n\n  }]);\n\n  function CastPlayer(castConfig, remoteControl) {\n    _classCallCheck(this, CastPlayer);\n\n    var _this = _possibleConstructorReturn(this, (CastPlayer.__proto__ || Object.getPrototypeOf(CastPlayer)).call(this, 'CastPlayer', castConfig, remoteControl));\n\n    _this._readyPromise = null;\n    _this._mediaInfo = null;\n    _this._firstPlay = true;\n    _this._ended = false;\n    _this._playbackStarted = false;\n    _this._reset = true;\n    _this._destroyed = false;\n\n    _castLoader.CastLoader.load().then(function () {\n      _this._initializeCastApi();\n      _this._initializeRemotePlayer();\n    }).catch(function (e) {\n      _this._logger.error('Cast initialized error', e);\n    });\n    return _this;\n  }\n\n  /**\n   * Loads a media to the receiver application.\n   * @param {ProviderMediaInfoObject} mediaInfo - The entry media info.\n   * @param {Object} [options] - The request options. See {@link https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.LoadRequest|chrome.cast.media.LoadRequest}\n   * @returns {Promise<void>} - Promise to indicate load succeed or failed.\n   * @instance\n   * @memberof CastPlayer\n   */\n\n\n  _createClass(CastPlayer, [{\n    key: 'loadMedia',\n    value: function loadMedia(mediaInfo, options) {\n      var _this2 = this;\n\n      this._logger.debug('Load media', mediaInfo, options);\n      this.reset();\n      this._remoteControl.getUIWrapper().reset();\n      this._mediaInfo = mediaInfo;\n\n      if (this._playbackStarted) {\n        this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_STARTED));\n      }\n      var media = new chrome.cast.media.MediaInfo();\n      var request = new chrome.cast.media.LoadRequest(media);\n\n      if (options) {\n        Object.keys(options).forEach(function (option) {\n          if (option !== 'media') {\n            // $FlowFixMe\n            request[option] = options[option];\n          } else {\n            // $FlowFixMe\n            Object.keys(options.media).forEach(function (mediaOption) {\n              // $FlowFixMe\n              media[mediaOption] = options.media[mediaOption];\n            });\n          }\n        });\n      }\n\n      media.customData = media.customData || {};\n      media.customData.mediaInfo = mediaInfo;\n      return this._castSession.loadMedia(request).then(function () {\n        return _this2._onLoadMediaSuccess();\n      }, function (error) {\n        return _this2._onLoadMediaFailed(error);\n      });\n    }\n\n    /**\n     * Gets the media Info.\n     * @returns {ProviderMediaInfoObject} - The media info.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'getMediaInfo',\n    value: function getMediaInfo() {\n      return Utils.Object.copyDeep(this._mediaInfo);\n    }\n\n    /**\n     * The cast player readiness.\n     * @returns {Promise<*>} - Promise which resolved when the cast player is ready.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'ready',\n    value: function ready() {\n      return this._readyPromise ? this._readyPromise : Promise.resolve();\n    }\n\n    /**\n     * Start/resume playback.\n     * @instance\n     * @returns {void}\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      if (!this.ended || this._adsManager.adBreak) {\n        this._engine.play();\n      } else {\n        if (this._mediaInfo) {\n          this.loadMedia(this._mediaInfo);\n        }\n      }\n    }\n\n    /**\n     * Pause playback.\n     * @instance\n     * @returns {void}\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this._engine.pause();\n    }\n\n    /**\n     * Stops and reset the cast player.\n     * @instance\n     * @returns {void}\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'reset',\n    value: function reset() {\n      clearInterval(this._mediaInfoIntervalId);\n      if (this._reset) return;\n      this._reset = true;\n      this._firstPlay = true;\n      this._ended = false;\n      this._tracksManager.reset();\n      this._engine.reset();\n      this._adsManager.reset();\n      this._stateManager.reset();\n      this._readyPromise = this._createReadyPromise();\n      this.dispatchEvent(new FakeEvent(EventType.PLAYER_RESET));\n    }\n\n    /**\n     * Destroys the cast player.\n     * @instance\n     * @returns {void}\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      clearInterval(this._mediaInfoIntervalId);\n      if (this._destroyed) return;\n      this._destroyed = true;\n      this._firstPlay = true;\n      this._ended = false;\n      this._readyPromise = null;\n      this._eventManager.destroy();\n      this._tracksManager.destroy();\n      this._engine.destroy();\n      this._adsManager.destroy();\n      this._stateManager.destroy();\n      this.dispatchEvent(new FakeEvent(EventType.PLAYER_DESTROY));\n    }\n\n    /**\n     * @returns {boolean} - Whether the current playback is a live playback.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'isLive',\n    value: function isLive() {\n      var mediaInfo = this._castRemotePlayer.mediaInfo;\n      return mediaInfo ? mediaInfo.streamType === chrome.cast.media.StreamType.LIVE : false;\n    }\n\n    /**\n     * @returns {boolean} - Whether the current live playback has DVR window. In case of non-live playback will return false.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'isDvr',\n    value: function isDvr() {\n      if (this.isLive()) {\n        var mediaSession = this._castSession.getMediaSession();\n        if (mediaSession) {\n          var range = mediaSession.liveSeekableRange;\n          if (range) {\n            var startMinutes = range.start / SECONDS_TO_MINUTES_DIVIDER;\n            var endMinutes = range.end / SECONDS_TO_MINUTES_DIVIDER;\n            return endMinutes - startMinutes > this._castConfig.liveEdgeThreshold;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Seeks to the live edge.\n     * @instance\n     * @returns {void}\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'seekToLiveEdge',\n    value: function seekToLiveEdge() {\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        var range = mediaSession.liveSeekableRange;\n        if (range) {\n          this._engine.currentTime = range.end;\n        }\n      }\n    }\n\n    /**\n     * @returns {number} - The start time of the DVR window.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'getStartTimeOfDvrWindow',\n    value: function getStartTimeOfDvrWindow() {\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        var range = mediaSession.liveSeekableRange;\n        if (range) {\n          return range.start;\n        }\n      }\n      return 0;\n    }\n\n    /**\n     * @function enableAdaptiveBitrate\n     * @description Enables automatic adaptive bitrate switching.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n    /**\n     * @function isAdaptiveBitrateEnabled\n     * @returns {boolean} - Whether adaptive bitrate is enabled.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n    /**\n     * @param {string} [type] - Track type.\n     * @returns {Array<Track>} - The cast player tracks.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'getTracks',\n    value: function getTracks(type) {\n      return this._tracksManager.getTracks(type);\n    }\n\n    /**\n     * @returns {Object} - The cast player active tracks.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'getActiveTracks',\n    value: function getActiveTracks() {\n      return this._tracksManager.getActiveTracks();\n    }\n\n    /**\n     * Select a certain track to be active.\n     * @param {Track} track - The track to activate.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'selectTrack',\n    value: function selectTrack(track) {\n      this._tracksManager.selectTrack(track);\n    }\n\n    /**\n     * Hides the active text track.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'hideTextTrack',\n    value: function hideTextTrack() {\n      this._tracksManager.hideTextTrack();\n    }\n\n    /**\n     * Start casting.\n     * @returns {Promise<*>} - A promise to indicate session is starting, or failed\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'startCasting',\n    value: function startCasting() {\n      return cast && cast.framework ? cast.framework.CastContext.getInstance().requestSession() : Promise.reject();\n    }\n\n    /**\n     * @returns {boolean} - Whether casting is available.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'isCastAvailable',\n    value: function isCastAvailable() {\n      return !!this._castRemotePlayer;\n    }\n\n    /**\n     * Stops the current cast session.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'stopCasting',\n    value: function stopCasting() {\n      this._castSession.endSession(true);\n    }\n\n    /**\n     * Gets the current remote session.\n     * @returns {RemoteSession} - The remote session.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'getCastSession',\n    value: function getCastSession() {\n      return Utils.Object.copyDeep(this._remoteSession);\n    }\n\n    /**\n     * @return {CastAdsController} - The cast ads controller.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: '_initializeCastApi',\n\n\n    /**\n     * @name config\n     * @returns {Object} - The runtime cast player config.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n    value: function _initializeCastApi() {\n      var options = {};\n\n      options.receiverApplicationId = this._castConfig.receiverApplicationId || chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;\n      options.autoJoinPolicy = this._castConfig.autoJoinPolicy || chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n\n      this._logger.debug('Init cast API with options', options);\n      cast.framework.CastContext.getInstance().setOptions(options);\n\n      var payload = new RemoteAvailablePayload(this, true);\n      this._remoteControl.onRemoteDeviceAvailable(payload);\n    }\n  }, {\n    key: '_initializeRemotePlayer',\n    value: function _initializeRemotePlayer() {\n      var _this3 = this;\n\n      this._castContext = cast.framework.CastContext.getInstance();\n      this._addSessionLifecycleListeners();\n      this._castRemotePlayer = new cast.framework.RemotePlayer();\n      this._castRemotePlayerController = new cast.framework.RemotePlayerController(this._castRemotePlayer);\n      this._castRemotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, function () {\n        if (_this3._castRemotePlayer.isConnected) {\n          _this3._setupRemotePlayer();\n        } else {\n          _this3._setupLocalPlayer();\n        }\n      });\n    }\n  }, {\n    key: '_setupRemotePlayer',\n    value: function _setupRemotePlayer() {\n      var _this4 = this;\n\n      this._logger.debug('Setup remote player');\n      this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n      this._castSession.addMessageListener(CUSTOM_CHANNEL, function (customChannel, customMessage) {\n        return _this4._onCustomMessage(customChannel, customMessage);\n      });\n      this._tracksManager = new _castTracksManager.CastTracksManager(this._castRemotePlayer);\n      this._engine = new _castPlaybackEngine.CastPlaybackEngine(this._castRemotePlayer, this._castRemotePlayerController);\n      this._stateManager = new _castStateManager.CastStateManager(this._castRemotePlayer, this._castRemotePlayerController);\n      this._adsManager = new _castAdsManager.CastAdsManager(this);\n      this._ui = new _castUi.CastUI();\n      this._attachListeners();\n      var snapshot = this._remoteControl.getPlayerSnapshot();\n      this._playerConfig = snapshot.config;\n      this._remoteSession = new RemoteSession(this._castSession.getSessionId(), this._castSession.getCastDevice().friendlyName, this._castSession.getSessionState() !== cast.framework.SessionState.SESSION_STARTED);\n      var payload = new RemoteConnectedPayload(this, this._remoteSession, this._ui);\n      this._remoteControl.onRemoteDeviceConnected(payload);\n      if (this._remoteSession.resuming) {\n        this._resumeSession();\n      } else if (snapshot && snapshot.mediaInfo) {\n        var mediaInfo = snapshot.mediaInfo;\n        var loadOptions = this._getLoadOptions(snapshot);\n        this.loadMedia(mediaInfo, loadOptions);\n      }\n    }\n  }, {\n    key: '_setupLocalPlayer',\n    value: function _setupLocalPlayer() {\n      this._logger.debug('Setup local player');\n      var snapshot = new PlayerSnapshot(this);\n      var payload = new RemoteDisconnectedPayload(this, snapshot);\n      this.pause();\n      this.destroy();\n      this._remoteControl.onRemoteDeviceDisconnected(payload);\n    }\n  }, {\n    key: '_createReadyPromise',\n    value: function _createReadyPromise() {\n      var _this5 = this;\n\n      this._readyPromise = new Promise(function (resolve) {\n        _this5._eventManager.listenOnce(_this5, EventType.TRACKS_CHANGED, function () {\n          _this5.dispatchEvent(new FakeEvent(EventType.MEDIA_LOADED));\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: '_attachListeners',\n    value: function _attachListeners() {\n      var _this6 = this;\n\n      this._eventManager.listen(this._engine, EventType.TIME_UPDATE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.PAUSE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.PLAY, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.VOLUME_CHANGE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.MUTE_CHANGE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.DURATION_CHANGE, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.ENDED, function (e) {\n        return _this6._onEnded(e);\n      });\n      this._eventManager.listen(this._engine, EventType.SEEKING, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._engine, EventType.SEEKED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.TRACKS_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.TEXT_TRACK_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.VIDEO_TRACK_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.AUDIO_TRACK_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.TEXT_STYLE_CHANGED, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._tracksManager, EventType.ERROR, function (e) {\n        return _this6.dispatchEvent(e);\n      });\n      this._eventManager.listen(this._stateManager, EventType.PLAYER_STATE_CHANGED, function (e) {\n        return _this6._onPlayerStateChanged(e);\n      });\n    }\n  }, {\n    key: '_onEnded',\n    value: function _onEnded(e) {\n      var _this7 = this;\n\n      this._ended = true;\n      this.dispatchEvent(e);\n      if (this._adsManager.allAdsCompleted) {\n        this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n      } else {\n        this._eventManager.listenOnce(this, EventType.ALL_ADS_COMPLETED, function () {\n          _this7.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n        });\n      }\n    }\n  }, {\n    key: '_onPlayerStateChanged',\n    value: function _onPlayerStateChanged(e) {\n      if (this._ended) return;\n      if (this._stateManager.currentState.type === StateType.PLAYING) {\n        this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n      }\n      this.dispatchEvent(e);\n    }\n  }, {\n    key: '_handleFirstPlay',\n    value: function _handleFirstPlay() {\n      if (this._playbackStarted) {\n        this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_ENDED));\n      }\n      this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_START));\n      this.dispatchEvent(new FakeEvent(EventType.PLAY));\n      this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAY));\n      this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAYING));\n      this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n      if (this.paused) {\n        this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n      }\n      this._firstPlay = false;\n      this._playbackStarted = true;\n    }\n  }, {\n    key: '_resumeSession',\n    value: function _resumeSession() {\n      var _this8 = this;\n\n      this._readyPromise = this._createReadyPromise();\n      this._mediaInfoIntervalId = setInterval(function () {\n        var mediaSession = _this8._castSession.getMediaSession();\n        if (mediaSession && mediaSession.customData) {\n          clearInterval(_this8._mediaInfoIntervalId);\n          _this8._mediaInfo = mediaSession.customData.mediaInfo;\n          _this8._logger.debug('Resuming session with media info', _this8._mediaInfo);\n          _this8._onLoadMediaSuccess();\n        }\n      }, INTERVAL_FREQUENCY);\n    }\n  }, {\n    key: '_onLoadMediaSuccess',\n    value: function _onLoadMediaSuccess() {\n      this._logger.debug('Load media success');\n      this._reset = false;\n      this._triggerInitialPlayerEvents();\n      this._tracksManager.parseTracks();\n      this._handleFirstPlay();\n    }\n  }, {\n    key: '_triggerInitialPlayerEvents',\n    value: function _triggerInitialPlayerEvents() {\n      this.dispatchEvent(new FakeEvent(EventType.SOURCE_SELECTED, {\n        selectedSource: [{\n          url: this._castRemotePlayer.mediaInfo.contentUrl,\n          mimetype: this._castRemotePlayer.mediaInfo.contentType\n        }]\n      }));\n      this.dispatchEvent(new FakeEvent(EventType.LOADED_METADATA));\n      this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, { mode: AbrMode.AUTO }));\n    }\n  }, {\n    key: '_onLoadMediaFailed',\n    value: function _onLoadMediaFailed(error) {\n      this._logger.debug('Load media falied', error);\n      this.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.CRITICAL, Error.Category.CAST, Error.Code.CAST_LOAD_MEDIA_FAILED, error)));\n    }\n  }, {\n    key: '_addSessionLifecycleListeners',\n    value: function _addSessionLifecycleListeners() {\n      var _this9 = this;\n\n      this._castContext.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, function (event) {\n        switch (event.sessionState) {\n          case cast.framework.SessionState.SESSION_STARTING:\n            _this9._remoteControl.onRemoteDeviceConnecting();\n            break;\n          case cast.framework.SessionState.SESSION_ENDING:\n            _this9._remoteControl.onRemoteDeviceDisconnecting();\n            break;\n          case cast.framework.SessionState.SESSION_START_FAILED:\n            _this9._remoteControl.onRemoteDeviceConnectFailed();\n            break;\n        }\n      });\n    }\n  }, {\n    key: '_getLoadOptions',\n    value: function _getLoadOptions(snapshot) {\n      var loadOptions = {\n        autoplay: this._playerConfig.playback.autoplay,\n        currentTime: this._playerConfig.playback.startTime,\n        media: {}\n      };\n      if (this.textStyle && !this.textStyle.isEqual(snapshot.textStyle)) {\n        loadOptions.media.textTrackStyle = TextStyleConverter.toCastTextStyle(snapshot.textStyle);\n      }\n      loadOptions.media.customData = {\n        audioLanguage: this._playerConfig.playback.audioLanguage,\n        textLanguage: this._playerConfig.playback.textLanguage\n      };\n      if (snapshot.advertising && snapshot.advertising.adTagUrl) {\n        this._adsController = new _castAdsController.CastAdsController();\n        var castAdvertising = this._castConfig.advertising;\n        if (!castAdvertising || !castAdvertising.vast) {\n          loadOptions.media.vmapAdsRequest = this._getAdsRequest(snapshot.advertising);\n        } else {\n          var breakClipId = Utils.Generator.uniqueId(5);\n          var breakId = Utils.Generator.uniqueId(5);\n          var breakClips = [{\n            id: breakClipId,\n            position: 0,\n            vastAdsRequest: this._getAdsRequest(snapshot.advertising)\n          }];\n          var breaks = [{\n            breakClipIds: [breakClipId],\n            id: breakId,\n            position: 0\n          }];\n          loadOptions.media.breakClips = breakClips;\n          loadOptions.media.breaks = breaks;\n        }\n      }\n      return loadOptions;\n    }\n  }, {\n    key: '_getAdsRequest',\n    value: function _getAdsRequest(advertising) {\n      var adsRequest = {};\n      if (advertising.adTagUrl) {\n        adsRequest.adTagUrl = advertising.adTagUrl;\n      }\n      if (advertising.adsResponse) {\n        adsRequest.adsResponse = advertising.adsResponse;\n      }\n      return adsRequest;\n    }\n  }, {\n    key: '_onCustomMessage',\n    value: function _onCustomMessage(customChannel, customMessage) {\n      try {\n        var parsedCustomMessage = JSON.parse(customMessage);\n        this._logger.debug('Custom message received', parsedCustomMessage);\n        switch (parsedCustomMessage.type) {\n          case CustomMessageType.EVENT:\n            this._handleCustomEvent(parsedCustomMessage);\n            break;\n        }\n      } catch (e) {\n        this.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_CUSTOM_MESSAGE_PARSING_ERROR, e)));\n      }\n    }\n  }, {\n    key: '_handleCustomEvent',\n    value: function _handleCustomEvent(customEvent) {\n      this.dispatchEvent(new FakeEvent(customEvent.event, customEvent.payload));\n    }\n  }, {\n    key: 'ads',\n    get: function get() {\n      return this._adsController;\n    }\n\n    /**\n     * Setter.\n     * @param {TextStyle} style - The text style to set.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'textStyle',\n    set: function set(style) {\n      this._tracksManager.textStyle = style;\n    }\n\n    /**\n     * Getter.\n     * @returns {TextStyle} - The current text style.\n     * @instance\n     * @memberof CastPlayer\n     */\n    ,\n    get: function get() {\n      return this._tracksManager.textStyle;\n    }\n\n    /**\n     * Setter.\n     * @param {number} to - The number to set in seconds.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'currentTime',\n    set: function set(to) {\n      this._engine.currentTime = to;\n    }\n\n    /**\n     * Getter.\n     * @returns {number} - The current time in seconds.\n     * @instance\n     * @memberof CastPlayer\n     */\n    ,\n    get: function get() {\n      return this._engine.currentTime;\n    }\n\n    /**\n     * @returns {number} - The duration in seconds.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'duration',\n    get: function get() {\n      return this._engine.duration;\n    }\n\n    /**\n     * Setter.\n     * @param {number} vol - The volume to set in the range of 0-1.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'volume',\n    set: function set(vol) {\n      this._engine.volume = vol;\n    }\n\n    /**\n     * Getter.\n     * @returns {number} - The current volume in the range of 0-1.\n     * @instance\n     * @memberof CastPlayer\n     */\n    ,\n    get: function get() {\n      return this._engine.volume;\n    }\n\n    /**\n     * @returns {boolean} - Whether the cast player is in paused state.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'paused',\n    get: function get() {\n      return this._engine.paused;\n    }\n\n    /**\n     * @returns {boolean} - Whether the cast player is in ended state.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'ended',\n    get: function get() {\n      return this._ended;\n    }\n\n    /**\n     * @returns {boolean} - Whether the cast player is in seeking state.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'seeking',\n    get: function get() {\n      return this._engine.seeking;\n    }\n\n    /**\n     * Setter.\n     * @param {boolean} mute - The mute value to set.\n     * @returns {void}\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'muted',\n    set: function set(mute) {\n      this._engine.muted = mute;\n    }\n\n    /**\n     * Getter.\n     * @returns {boolean} - The muted state.\n     * @instance\n     * @memberof CastPlayer\n     */\n    ,\n    get: function get() {\n      return this._engine.muted;\n    }\n\n    /**\n     * @returns {string} - The current playing source url.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'src',\n    get: function get() {\n      if (this._castRemotePlayer.mediaInfo) {\n        return this._castRemotePlayer.mediaInfo.contentUrl;\n      }\n    }\n\n    /**\n     * @returns {string} - The current poster url.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'poster',\n    get: function get() {\n      try {\n        return this._castRemotePlayer.mediaInfo.metadata.images[0].url;\n      } catch (e) {\n        return '';\n      }\n    }\n\n    /**\n     * @returns {string} - The current playback rate.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'playbackRate',\n    get: function get() {\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        return mediaSession.playbackRate;\n      }\n    }\n\n    /**\n     * @returns {string} - The active engine type.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'engineType',\n    get: function get() {\n      return EngineType.CAST;\n    }\n\n    /**\n     * @returns {string} - The remote player type.\n     * @instance\n     * @memberof CastPlayer\n     */\n\n  }, {\n    key: 'type',\n    get: function get() {\n      return CastPlayer.Type;\n    }\n  }]);\n\n  return CastPlayer;\n}(BaseRemotePlayer);\n\nCastPlayer.Type = 'chromecast';\nCastPlayer.defaultConfig = {\n  liveEdgeThreshold: 5\n};\nexports.CastPlayer = CastPlayer;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NAME = exports.VERSION = exports.RemotePlayer = undefined;\n\nvar _castPlayer = __webpack_require__(1);\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar registerRemotePlayer = _kalturaPlayerJs.cast.registerRemotePlayer;\nexports.RemotePlayer = _castPlayer.CastPlayer;\nexports.VERSION = \"0.2.3\";\nexports.NAME = \"@playkit-js/playkit-js-cast-sender\";\n\n\nif (_castPlayer.CastPlayer.isSupported()) {\n  registerRemotePlayer(_castPlayer.CastPlayer.Type, _castPlayer.CastPlayer);\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastStateManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar State = _kalturaPlayerJs.core.State,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    EventType = _kalturaPlayerJs.core.EventType,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget,\n    StateType = _kalturaPlayerJs.core.StateType;\n\nvar CastStateManager = function (_FakeEventTarget) {\n  _inherits(CastStateManager, _FakeEventTarget);\n\n  function CastStateManager(remotePlayer, remotePlayerController) {\n    _classCallCheck(this, CastStateManager);\n\n    var _this = _possibleConstructorReturn(this, (CastStateManager.__proto__ || Object.getPrototypeOf(CastStateManager)).call(this));\n\n    _this._remotePlayer = remotePlayer;\n    _this._remotePlayerController = remotePlayerController;\n    _this._currentState = new State(StateType.IDLE);\n    _this._previousState = new State(StateType.IDLE);\n    _this._updateState = _this._updateState.bind(_this);\n    _this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, _this._updateState);\n    return _this;\n  }\n\n  _createClass(CastStateManager, [{\n    key: '_updateState',\n    value: function _updateState() {\n      this._currentState.duration = Date.now() / 1000;\n      this._previousState = this._currentState;\n      if (this._remotePlayer.playerState) {\n        this._currentState = new State(this._remotePlayer.playerState.toLowerCase());\n      } else {\n        this._currentState = new State(StateType.IDLE);\n      }\n      this.dispatchEvent(new FakeEvent(EventType.PLAYER_STATE_CHANGED, {\n        oldState: this.previousState,\n        newState: this.currentState\n      }));\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._currentState = new State(StateType.IDLE);\n      this._previousState = new State(StateType.IDLE);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n      this._currentState = new State(StateType.IDLE);\n      this._previousState = new State(StateType.IDLE);\n    }\n  }, {\n    key: 'currentState',\n    get: function get() {\n      return this._currentState;\n    }\n  }, {\n    key: 'previousState',\n    get: function get() {\n      return this._previousState;\n    }\n  }]);\n\n  return CastStateManager;\n}(FakeEventTarget);\n\nexports.CastStateManager = CastStateManager;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastTracksManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _TRACK_TYPE_TO_INSTAN;\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _castPlayer = __webpack_require__(1);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TextStyleConverter = _kalturaPlayerJs.cast.TextStyleConverter;\nvar Track = _kalturaPlayerJs.core.Track,\n    getLogger = _kalturaPlayerJs.core.getLogger,\n    TextStyle = _kalturaPlayerJs.core.TextStyle,\n    AudioTrack = _kalturaPlayerJs.core.AudioTrack,\n    VideoTrack = _kalturaPlayerJs.core.VideoTrack,\n    TextTrack = _kalturaPlayerJs.core.TextTrack,\n    Utils = _kalturaPlayerJs.core.Utils,\n    TrackType = _kalturaPlayerJs.core.TrackType,\n    EventType = _kalturaPlayerJs.core.EventType,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget,\n    Error = _kalturaPlayerJs.core.Error;\n\nvar TRACK_TYPE_TO_INSTANCE = (_TRACK_TYPE_TO_INSTAN = {}, _defineProperty(_TRACK_TYPE_TO_INSTAN, TrackType.AUDIO, AudioTrack), _defineProperty(_TRACK_TYPE_TO_INSTAN, TrackType.VIDEO, VideoTrack), _defineProperty(_TRACK_TYPE_TO_INSTAN, TrackType.TEXT, TextTrack), _TRACK_TYPE_TO_INSTAN);\n\nvar CastTracksManager = function (_FakeEventTarget) {\n  _inherits(CastTracksManager, _FakeEventTarget);\n\n  function CastTracksManager(remotePlayer) {\n    _classCallCheck(this, CastTracksManager);\n\n    var _this = _possibleConstructorReturn(this, (CastTracksManager.__proto__ || Object.getPrototypeOf(CastTracksManager)).call(this));\n\n    _this._activeTrackIds = [];\n    _this._tracks = [];\n\n    _this._remotePlayer = remotePlayer;\n    _this._logger = getLogger('CastTracksManager');\n    _this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    _this._textStyle = new TextStyle();\n    _this._bindEvents();\n    return _this;\n  }\n\n  _createClass(CastTracksManager, [{\n    key: 'parseTracks',\n    value: function parseTracks() {\n      var tracks = this._remotePlayer.mediaInfo.tracks;\n      if (tracks && tracks.length > 0) {\n        var castTextTracks = tracks.filter(function (t) {\n          return t.type === chrome.cast.media.TrackType.TEXT;\n        });\n        var castVideoTracks = tracks.filter(function (t) {\n          return t.type === chrome.cast.media.TrackType.VIDEO;\n        });\n        var castAudioTracks = tracks.filter(function (t) {\n          return t.type === chrome.cast.media.TrackType.AUDIO;\n        });\n        var textTracks = this._parseTextTracks(castTextTracks);\n        var videoTracks = this._parseVideoTracks(castVideoTracks);\n        var audioTracks = this._parseAudioTracks(castAudioTracks);\n        this._tracks = audioTracks.concat(videoTracks).concat(textTracks);\n        this._addTextTrackOffOption();\n      }\n      this._logger.debug('Parse tracks', this._tracks);\n      this._startOnMediaStatusUpdateInterval();\n      this.dispatchEvent(new FakeEvent(EventType.TRACKS_CHANGED, { tracks: this._tracks }));\n    }\n  }, {\n    key: 'getTracks',\n    value: function getTracks(type) {\n      return Utils.Object.copyDeep(this._getTracksByType(type));\n    }\n  }, {\n    key: 'getActiveTracks',\n    value: function getActiveTracks() {\n      return Utils.Object.copyDeep({\n        video: this._getTracksByType(TrackType.VIDEO).find(function (track) {\n          return track.active;\n        }),\n        audio: this._getTracksByType(TrackType.AUDIO).find(function (track) {\n          return track.active;\n        }),\n        text: this._getTracksByType(TrackType.TEXT).find(function (track) {\n          return track.active;\n        })\n      });\n    }\n  }, {\n    key: 'selectTrack',\n    value: function selectTrack(track) {\n      if (track instanceof VideoTrack) {\n        this._selectVideoTrack(track);\n      } else if (track instanceof AudioTrack) {\n        this._selectAudioTrack(track);\n      } else if (track instanceof TextTrack) {\n        this._selectTextTrack(track);\n      }\n    }\n  }, {\n    key: 'hideTextTrack',\n    value: function hideTextTrack() {\n      var offTrack = this._tracks.find(function (t) {\n        return t.language === 'off';\n      });\n      this.selectTrack(offTrack);\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._stopOnMediaStatusUpdateInterval();\n      this._tracks = [];\n      this._activeTrackIds = [];\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._stopOnMediaStatusUpdateInterval();\n      this._tracks = [];\n      this._activeTrackIds = [];\n    }\n  }, {\n    key: '_startOnMediaStatusUpdateInterval',\n    value: function _startOnMediaStatusUpdateInterval() {\n      this._mediaStatusIntervalId = setInterval(this._onMediaStatusUpdate, _castPlayer.INTERVAL_FREQUENCY);\n    }\n  }, {\n    key: '_stopOnMediaStatusUpdateInterval',\n    value: function _stopOnMediaStatusUpdateInterval() {\n      if (this._mediaStatusIntervalId) {\n        clearInterval(this._mediaStatusIntervalId);\n        this._mediaStatusIntervalId = null;\n      }\n    }\n  }, {\n    key: '_bindEvents',\n    value: function _bindEvents() {\n      this._onMediaStatusUpdate = this._onMediaStatusUpdate.bind(this);\n    }\n  }, {\n    key: '_parseTextTracks',\n    value: function _parseTextTracks(castTextTracks) {\n      var textTracks = [];\n      castTextTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          kind: track.subType || 'subtitles',\n          active: false\n        };\n        textTracks.push(new TextTrack(settings));\n      });\n      return textTracks;\n    }\n  }, {\n    key: '_parseVideoTracks',\n    value: function _parseVideoTracks(castVideoTracks) {\n      var videoTracks = [];\n      castVideoTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          active: false\n        };\n        videoTracks.push(new VideoTrack(settings));\n      });\n      return videoTracks;\n    }\n  }, {\n    key: '_parseAudioTracks',\n    value: function _parseAudioTracks(castAudioTracks) {\n      var audioTracks = [];\n      castAudioTracks.forEach(function (track) {\n        var settings = {\n          id: track.trackId,\n          index: track.trackId - 1,\n          label: track.name,\n          language: track.language,\n          active: false\n        };\n        audioTracks.push(new AudioTrack(settings));\n      });\n      return audioTracks;\n    }\n  }, {\n    key: '_selectVideoTrack',\n    value: function _selectVideoTrack(track) {\n      var _this2 = this;\n\n      this._stopOnMediaStatusUpdateInterval();\n      var currentTrack = this.getActiveTracks().video;\n      this._selectTrack(track, currentTrack, function () {\n        _this2.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, { selectedVideoTrack: track }));\n        _this2._startOnMediaStatusUpdateInterval();\n      }, function (error) {\n        _this2.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    }\n  }, {\n    key: '_selectAudioTrack',\n    value: function _selectAudioTrack(track) {\n      var _this3 = this;\n\n      this._stopOnMediaStatusUpdateInterval();\n      var currentTrack = this.getActiveTracks().audio;\n      this._selectTrack(track, currentTrack, function () {\n        _this3.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, { selectedAudioTrack: track }));\n        _this3._startOnMediaStatusUpdateInterval();\n      }, function (error) {\n        _this3.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    }\n  }, {\n    key: '_selectTextTrack',\n    value: function _selectTextTrack(track) {\n      var _this4 = this;\n\n      this._stopOnMediaStatusUpdateInterval();\n      var currentTrack = this.getActiveTracks().text;\n      this._selectTrack(track, currentTrack, function () {\n        _this4.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, { selectedTextTrack: track }));\n        _this4._startOnMediaStatusUpdateInterval();\n      }, function (error) {\n        _this4.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    }\n  }, {\n    key: '_selectTrack',\n    value: function _selectTrack(newTrack, currentTrack, onSuccess, onFailed) {\n      var _this5 = this;\n\n      this._logger.debug('Select track', newTrack, currentTrack, this._activeTrackIds);\n      if (currentTrack) {\n        var index = this._activeTrackIds.indexOf(currentTrack.id);\n        if (index > -1) {\n          this._activeTrackIds.splice(index, 1);\n        }\n      }\n      if (newTrack.id && newTrack.language !== 'off') {\n        this._activeTrackIds.push(newTrack.id);\n      }\n      var tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(this._activeTrackIds);\n      var mediaSession = this._castSession.getMediaSession();\n      mediaSession.editTracksInfo(tracksInfoRequest, function () {\n        _this5._logger.debug('Select track succeeded');\n        _this5._markActiveTrack(currentTrack, false);\n        _this5._markActiveTrack(newTrack, true);\n        onSuccess();\n      }, function (e) {\n        _this5._logger.debug('Select track failed', e);\n        onFailed(e);\n      });\n    }\n  }, {\n    key: '_markActiveTrack',\n    value: function _markActiveTrack(track, active) {\n      if (track) {\n        var id = track.id;\n        var origTrack = this._tracks.find(function (t) {\n          return t.id === id;\n        });\n        if (origTrack) {\n          origTrack.active = active;\n        }\n      }\n    }\n  }, {\n    key: '_addTextTrackOffOption',\n    value: function _addTextTrackOffOption() {\n      var textTracks = this._getTracksByType(TrackType.TEXT);\n      var lastTrack = textTracks[textTracks.length - 1];\n      if (textTracks && textTracks.length) {\n        this._tracks.push(new TextTrack({\n          id: lastTrack.id + 1,\n          active: true,\n          index: lastTrack.index + 1,\n          kind: 'subtitles',\n          label: 'Off',\n          language: 'off'\n        }));\n      }\n    }\n  }, {\n    key: '_getTracksByType',\n    value: function _getTracksByType(type) {\n      return !type ? this._tracks : this._tracks.filter(function (track) {\n        if (type && TRACK_TYPE_TO_INSTANCE[type]) {\n          return track instanceof TRACK_TYPE_TO_INSTANCE[type];\n        }\n        return true;\n      });\n    }\n  }, {\n    key: '_onMediaStatusUpdate',\n    value: function _onMediaStatusUpdate() {\n      var _this6 = this;\n\n      var mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        var isTextStyleChanged = function isTextStyleChanged() {\n          var localTextStyle = TextStyleConverter.toCastTextStyle(_this6.textStyle);\n          var remoteTextStyle = mediaSession.media.textTrackStyle;\n          if (remoteTextStyle) {\n            return !(localTextStyle.backgroundColor === remoteTextStyle.backgroundColor && localTextStyle.fontFamily === remoteTextStyle.fontFamily && localTextStyle.fontScale === remoteTextStyle.fontScale && localTextStyle.foregroundColor === remoteTextStyle.foregroundColor);\n          }\n          return false;\n        };\n        var isActiveTrackIdsChanged = function isActiveTrackIdsChanged() {\n          if (mediaSession.activeTrackIds) {\n            return !(_this6._activeTrackIds.length === mediaSession.activeTrackIds.length && _this6._activeTrackIds.every(function (value, index) {\n              return value === mediaSession.activeTrackIds[index];\n            }));\n          }\n          return false;\n        };\n        if (isActiveTrackIdsChanged()) {\n          var diffIds = mediaSession.activeTrackIds.filter(function (i) {\n            return !_this6._activeTrackIds.includes(i);\n          });\n          diffIds.forEach(function (id) {\n            var track = _this6._tracks.find(function (t) {\n              return t.id === id;\n            });\n            _this6.selectTrack(track);\n          });\n        }\n        if (isTextStyleChanged()) {\n          var style = TextStyleConverter.toPlayerTextStyle(mediaSession.media.textTrackStyle);\n          this._textStyle = style;\n          this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, { textStyle: style }));\n        }\n      }\n    }\n  }, {\n    key: 'textStyle',\n    set: function set(style) {\n      var _this7 = this;\n\n      this._logger.debug('Setting text style', style);\n      var textTrackStyle = TextStyleConverter.toCastTextStyle(style);\n      var tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(null, textTrackStyle);\n      var mediaSession = this._castSession.getMediaSession();\n      mediaSession.editTracksInfo(tracksInfoRequest, function () {\n        _this7._logger.debug('Setting text style succeed');\n        _this7._textStyle = style;\n        _this7.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, { textStyle: style }));\n      }, function (error) {\n        _this7._logger.debug('Setting text style failed', error);\n        _this7.dispatchEvent(new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error)));\n      });\n    },\n    get: function get() {\n      return this._textStyle.clone();\n    }\n  }]);\n\n  return CastTracksManager;\n}(FakeEventTarget);\n\nexports.CastTracksManager = CastTracksManager;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastPlaybackEngine = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nvar _castPlayer = __webpack_require__(1);\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventType = _kalturaPlayerJs.core.EventType,\n    FakeEvent = _kalturaPlayerJs.core.FakeEvent,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget;\n\nvar CastPlaybackEngine = function (_FakeEventTarget) {\n  _inherits(CastPlaybackEngine, _FakeEventTarget);\n\n  function CastPlaybackEngine(remotePlayer, remotePlayerController) {\n    _classCallCheck(this, CastPlaybackEngine);\n\n    var _this = _possibleConstructorReturn(this, (CastPlaybackEngine.__proto__ || Object.getPrototypeOf(CastPlaybackEngine)).call(this));\n\n    _this._muted = false;\n    _this._volume = 1;\n    _this._paused = false;\n    _this._currentTime = 0;\n    _this._duration = 0;\n    _this._seeking = false;\n\n    _this._remotePlayer = remotePlayer;\n    _this._remotePlayerController = remotePlayerController;\n    _this._bindEvents();\n    _this._toggleListeners(true);\n    return _this;\n  }\n\n  _createClass(CastPlaybackEngine, [{\n    key: 'reset',\n    value: function reset() {\n      this._toggleListeners(false);\n      clearInterval(this._liveCurrentTimeIntervalId);\n      this._resetFlags();\n      this._toggleListeners(true);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      clearInterval(this._liveCurrentTimeIntervalId);\n      this._toggleListeners(false);\n      this._muted = false;\n      this._volume = 1;\n      this._resetFlags();\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      this._remotePlayerController.playOrPause();\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this._remotePlayer.canPause) {\n        this._remotePlayerController.playOrPause();\n      }\n    }\n  }, {\n    key: '_resetFlags',\n    value: function _resetFlags() {\n      this._paused = false;\n      this._currentTime = 0;\n      this._duration = 0;\n      this._seeking = false;\n    }\n  }, {\n    key: '_bindEvents',\n    value: function _bindEvents() {\n      this._onCurrentTimeChanged = this._onCurrentTimeChanged.bind(this);\n      this._onIsPausedChanged = this._onIsPausedChanged.bind(this);\n      this._onDurationChanged = this._onDurationChanged.bind(this);\n      this._onVolumeLevelChanged = this._onVolumeLevelChanged.bind(this);\n      this._onIsMutedChanged = this._onIsMutedChanged.bind(this);\n      this._onIsMediaLoadedChanged = this._onIsMediaLoadedChanged.bind(this);\n      this._onLiveCurrentTimeChanged = this._onLiveCurrentTimeChanged.bind(this);\n    }\n  }, {\n    key: '_toggleListeners',\n    value: function _toggleListeners(listen) {\n      var _listeners,\n          _this2 = this;\n\n      var listeners = (_listeners = {}, _defineProperty(_listeners, cast.framework.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED, this._onIsMediaLoadedChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED, this._onIsPausedChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.DURATION_CHANGED, this._onDurationChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED, this._onVolumeLevelChanged), _defineProperty(_listeners, cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED, this._onIsMutedChanged), _listeners);\n      if (listen) {\n        Object.keys(listeners).forEach(function (e) {\n          return _this2._remotePlayerController.addEventListener(e, listeners[e]);\n        });\n      } else {\n        Object.keys(listeners).forEach(function (e) {\n          return _this2._remotePlayerController.removeEventListener(e, listeners[e]);\n        });\n        this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n      }\n    }\n  }, {\n    key: '_onIsMediaLoadedChanged',\n    value: function _onIsMediaLoadedChanged(isMediaLoadedEvent) {\n      var _this3 = this;\n\n      var onMediaInfoChanged = function onMediaInfoChanged() {\n        _this3._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n        if (_this3._remotePlayer.mediaInfo.streamType === chrome.cast.media.StreamType.LIVE) {\n          _this3._mediaSession = cast.framework.CastContext.getInstance().getCurrentSession().getMediaSession();\n          _this3._liveCurrentTimeIntervalId = setInterval(_this3._onLiveCurrentTimeChanged, _castPlayer.INTERVAL_FREQUENCY);\n        } else {\n          _this3._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, _this3._onCurrentTimeChanged);\n        }\n      };\n      if (isMediaLoadedEvent.value) {\n        this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n      }\n    }\n  }, {\n    key: '_onCurrentTimeChanged',\n    value: function _onCurrentTimeChanged() {\n      this._currentTime = this._remotePlayer.currentTime;\n      this._maybeDispatchTimeUpdate();\n      this._maybeEndPlayback();\n    }\n  }, {\n    key: '_onLiveCurrentTimeChanged',\n    value: function _onLiveCurrentTimeChanged() {\n      this._currentTime = this._mediaSession.currentTime;\n      this._maybeDispatchTimeUpdate();\n      this._maybeEndLivePlayback();\n    }\n  }, {\n    key: '_onIsPausedChanged',\n    value: function _onIsPausedChanged() {\n      this._paused = this._remotePlayer.isPaused;\n      if (this._paused) {\n        this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n      } else {\n        this.dispatchEvent(new FakeEvent(EventType.PLAY));\n      }\n    }\n  }, {\n    key: '_onDurationChanged',\n    value: function _onDurationChanged() {\n      this._duration = this._remotePlayer.duration;\n      this.dispatchEvent(new FakeEvent(EventType.DURATION_CHANGE));\n    }\n  }, {\n    key: '_onVolumeLevelChanged',\n    value: function _onVolumeLevelChanged() {\n      this._volume = this._remotePlayer.volumeLevel;\n      this.dispatchEvent(new FakeEvent(EventType.VOLUME_CHANGE));\n    }\n  }, {\n    key: '_onIsMutedChanged',\n    value: function _onIsMutedChanged() {\n      this._muted = this._remotePlayer.isMuted;\n      this.dispatchEvent(new FakeEvent(EventType.MUTE_CHANGE, { mute: this.muted }));\n    }\n  }, {\n    key: '_maybeDispatchTimeUpdate',\n    value: function _maybeDispatchTimeUpdate() {\n      if (!this._seeking) {\n        this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n      } else if (this._seekTargetTime && (this._seekForward && this.currentTime >= this._seekTargetTime || !this._seekForward && this.currentTime <= this._seekTargetTime)) {\n        this._seeking = false;\n        this._seekTargetTime = null;\n        this.dispatchEvent(new FakeEvent(EventType.SEEKED));\n        this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n      }\n    }\n  }, {\n    key: '_maybeEndPlayback',\n    value: function _maybeEndPlayback() {\n      var delta = Math.round(this._duration - this._currentTime);\n      if (this._currentTime !== 0 && this._duration !== 0 && delta <= 1) {\n        this._currentTime = this._duration;\n        this._paused = true;\n        this.dispatchEvent(new FakeEvent(EventType.ENDED));\n      }\n    }\n  }, {\n    key: '_maybeEndLivePlayback',\n    value: function _maybeEndLivePlayback() {\n      var range = this._mediaSession.liveSeekableRange;\n      if (range && range.isLiveDone) {\n        this._paused = true;\n        this.dispatchEvent(new FakeEvent(EventType.ENDED));\n      }\n    }\n  }, {\n    key: 'muted',\n    set: function set(value) {\n      if (value && !this.muted || !value && this.muted) {\n        this._remotePlayerController.muteOrUnmute();\n      }\n    },\n    get: function get() {\n      return this._muted;\n    }\n  }, {\n    key: 'volume',\n    set: function set(value) {\n      if (this._remotePlayer.canControlVolume) {\n        this._remotePlayer.volumeLevel = value;\n        this._remotePlayerController.setVolumeLevel();\n      }\n    },\n    get: function get() {\n      return this._volume;\n    }\n  }, {\n    key: 'currentTime',\n    set: function set(value) {\n      if (this._remotePlayer.canSeek) {\n        this._seeking = true;\n        this.dispatchEvent(new FakeEvent(EventType.SEEKING));\n        this._remotePlayer.currentTime = this._seekTargetTime = value;\n        this._seekForward = value > this.currentTime;\n        this._remotePlayerController.seek();\n      }\n    },\n    get: function get() {\n      if (this._remotePlayer.savedPlayerState) {\n        return this._remotePlayer.savedPlayerState.currentTime;\n      }\n      return this._currentTime;\n    }\n  }, {\n    key: 'duration',\n    get: function get() {\n      return this._duration;\n    }\n  }, {\n    key: 'paused',\n    get: function get() {\n      if (this._remotePlayer.savedPlayerState) {\n        return this._remotePlayer.savedPlayerState.isPaused;\n      }\n      return this._paused;\n    }\n  }, {\n    key: 'seeking',\n    get: function get() {\n      return this._seeking;\n    }\n  }]);\n\n  return CastPlaybackEngine;\n}(FakeEventTarget);\n\nexports.CastPlaybackEngine = CastPlaybackEngine;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastUI = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// eslint-disable-next-line no-unused-vars\nvar style = _kalturaPlayerJs.ui.style,\n    Components = _kalturaPlayerJs.ui.Components;\nvar RemotePlayerUI = _kalturaPlayerJs.cast.RemotePlayerUI;\n\nvar CastUI = function (_RemotePlayerUI) {\n  _inherits(CastUI, _RemotePlayerUI);\n\n  function CastUI() {\n    _classCallCheck(this, CastUI);\n\n    return _possibleConstructorReturn(this, (CastUI.__proto__ || Object.getPrototypeOf(CastUI)).apply(this, arguments));\n  }\n\n  _createClass(CastUI, [{\n    key: \"playbackUI\",\n    value: function playbackUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.playbackGuiWWrapper },\n        _kalturaPlayerJs.ui.h(Components.KeyboardControl, { player: props.player, config: props.config }),\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(\n          \"div\",\n          { className: style.playerGui, id: \"player-gui\" },\n          _kalturaPlayerJs.ui.h(Components.OverlayPortal, null),\n          _kalturaPlayerJs.ui.h(\n            Components.BottomBar,\n            null,\n            _kalturaPlayerJs.ui.h(Components.SeekBarPlaybackContainer, { showFramePreview: true, showTimeBubble: true, player: props.player, playerContainer: props.playerContainer }),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.leftControls },\n              _kalturaPlayerJs.ui.h(Components.PlaybackControls, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.RewindControl, { player: props.player, step: 10 }),\n              _kalturaPlayerJs.ui.h(Components.TimeDisplayPlaybackContainer, { format: \"current / total\" })\n            ),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.rightControls },\n              _kalturaPlayerJs.ui.h(Components.VolumeControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.LanguageControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.CastControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.FullscreenControl, { player: props.player })\n            )\n          ),\n          _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player }),\n          _kalturaPlayerJs.ui.h(Components.OverlayAction, { player: props.player }),\n          _kalturaPlayerJs.ui.h(Components.PlaybackControls, { player: props.player })\n        ),\n        _kalturaPlayerJs.ui.h(Components.PrePlaybackPlayOverlay, { player: props.player })\n      );\n    }\n  }, {\n    key: \"liveUI\",\n    value: function liveUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.playbackGuiWWrapper },\n        _kalturaPlayerJs.ui.h(Components.KeyboardControl, { player: props.player, config: props.config }),\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(\n          \"div\",\n          { className: style.playerGui, id: \"player-gui\" },\n          _kalturaPlayerJs.ui.h(Components.OverlayPortal, null),\n          _kalturaPlayerJs.ui.h(\n            Components.BottomBar,\n            null,\n            _kalturaPlayerJs.ui.h(Components.SeekBarLivePlaybackContainer, { showFramePreview: true, showTimeBubble: true, player: props.player, playerContainer: props.playerContainer }),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.leftControls },\n              _kalturaPlayerJs.ui.h(Components.PlaybackControls, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.LiveTag, { player: props.player })\n            ),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.rightControls },\n              _kalturaPlayerJs.ui.h(Components.VolumeControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.LanguageControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.CastControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.FullscreenControl, { player: props.player })\n            )\n          ),\n          _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player }),\n          _kalturaPlayerJs.ui.h(Components.OverlayAction, { player: props.player }),\n          _kalturaPlayerJs.ui.h(Components.PlaybackControls, { player: props.player })\n        ),\n        _kalturaPlayerJs.ui.h(Components.PrePlaybackPlayOverlay, { player: props.player })\n      );\n    }\n  }, {\n    key: \"idleUI\",\n    value: function idleUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.playbackGuiWWrapper },\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player })\n      );\n    }\n  }, {\n    key: \"adsUI\",\n    value: function adsUI(props) {\n      return _kalturaPlayerJs.ui.h(\n        \"div\",\n        { className: style.adGuiWrapper },\n        _kalturaPlayerJs.ui.h(Components.KeyboardControl, { player: props.player, config: props.config }),\n        _kalturaPlayerJs.ui.h(Components.Loading, { player: props.player }),\n        _kalturaPlayerJs.ui.h(\n          \"div\",\n          { className: style.playerGui, id: \"player-gui\" },\n          _kalturaPlayerJs.ui.h(Components.CastOverlay, { player: props.player }),\n          _kalturaPlayerJs.ui.h(Components.OverlayAction, { player: props.player }),\n          _kalturaPlayerJs.ui.h(\n            \"div\",\n            null,\n            _kalturaPlayerJs.ui.h(\n              Components.TopBar,\n              null,\n              _kalturaPlayerJs.ui.h(\n                \"div\",\n                { className: style.leftControls },\n                _kalturaPlayerJs.ui.h(Components.AdNotice, null)\n              ),\n              _kalturaPlayerJs.ui.h(\n                \"div\",\n                { className: style.rightControls },\n                _kalturaPlayerJs.ui.h(Components.AdLearnMore, null)\n              )\n            ),\n            _kalturaPlayerJs.ui.h(Components.AdSkip, { player: props.player })\n          ),\n          _kalturaPlayerJs.ui.h(\n            Components.BottomBar,\n            null,\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.leftControls },\n              _kalturaPlayerJs.ui.h(Components.PlaybackControls, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.TimeDisplayAdsContainer, null)\n            ),\n            _kalturaPlayerJs.ui.h(\n              \"div\",\n              { className: style.rightControls },\n              _kalturaPlayerJs.ui.h(Components.VolumeControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.CastControl, { player: props.player }),\n              _kalturaPlayerJs.ui.h(Components.FullscreenControl, { player: props.player })\n            )\n          ),\n          _kalturaPlayerJs.ui.h(Components.PlaybackControls, { player: props.player })\n        )\n      );\n    }\n  }]);\n\n  return CastUI;\n}(RemotePlayerUI);\n\nexports.CastUI = CastUI;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastLoader = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Utils = _kalturaPlayerJs.core.Utils,\n    getLogger = _kalturaPlayerJs.core.getLogger;\n\n\nvar SENDER_SDK_URL = '//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';\n\nvar CastLoader = function () {\n  function CastLoader() {\n    _classCallCheck(this, CastLoader);\n  }\n\n  _createClass(CastLoader, null, [{\n    key: 'load',\n    value: function load() {\n      return new Promise(function (resolve, reject) {\n        window['__onGCastApiAvailable'] = function (isAvailable) {\n          return CastLoader._onGCastApiAvailable(isAvailable, resolve);\n        };\n        CastLoader._loadCastSDK().then(function () {\n          return CastLoader._logger.debug('Cast sender lib has been loaded successfully');\n        }).catch(function (e) {\n          CastLoader._logger.debug('Cast sender lib loading failed', e);\n          reject(e);\n        });\n      });\n    }\n  }, {\n    key: '_loadCastSDK',\n    value: function _loadCastSDK() {\n      if (window['cast'] && window['cast']['framework']) {\n        return Promise.resolve();\n      }\n      return Utils.Dom.loadScriptAsync(SENDER_SDK_URL);\n    }\n  }, {\n    key: '_onGCastApiAvailable',\n    value: function _onGCastApiAvailable(isAvailable, resolve) {\n      CastLoader._logger.debug('onGCastApiAvailable, isAvailable: ' + isAvailable.toString());\n      if (isAvailable) {\n        resolve();\n      } else {\n        CastLoader._logger.debug('Google cast API isn\\'t available yet');\n      }\n    }\n  }]);\n\n  return CastLoader;\n}();\n\nCastLoader._logger = getLogger('CastLoader');\nexports.CastLoader = CastLoader;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastAdsController = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _castPlayer = __webpack_require__(1);\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CustomActionMessage = _kalturaPlayerJs.cast.CustomActionMessage,\n    CustomActionType = _kalturaPlayerJs.cast.CustomActionType;\n\n/**\n * Cast Ads Controller.\n * @class CastAdsController\n */\n\nvar CastAdsController = function () {\n  function CastAdsController() {\n    _classCallCheck(this, CastAdsController);\n\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n  }\n\n  /**\n   * Skips on an ad.\n   * @returns {void}\n   * @memberof CastAdsController\n   * @instance\n   */\n\n\n  _createClass(CastAdsController, [{\n    key: 'skipAd',\n    value: function skipAd() {\n      this._castSession.sendMessage(_castPlayer.CUSTOM_CHANNEL, new CustomActionMessage(CustomActionType.SKIP_AD));\n    }\n  }]);\n\n  return CastAdsController;\n}();\n\nexports.CastAdsController = CastAdsController;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CastAdsManager = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _castPlayer = __webpack_require__(1);\n\nvar _kalturaPlayerJs = __webpack_require__(0);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar EventManager = _kalturaPlayerJs.core.EventManager,\n    EventType = _kalturaPlayerJs.core.EventType,\n    FakeEventTarget = _kalturaPlayerJs.core.FakeEventTarget;\n\nvar CastAdsManager = function (_FakeEventTarget) {\n  _inherits(CastAdsManager, _FakeEventTarget);\n\n  function CastAdsManager(castPlayer) {\n    _classCallCheck(this, CastAdsManager);\n\n    var _this = _possibleConstructorReturn(this, (CastAdsManager.__proto__ || Object.getPrototypeOf(CastAdsManager)).call(this));\n\n    _this._adBreak = false;\n    _this._allAdsCompleted = true;\n\n    _this._castPlayer = castPlayer;\n    _this._eventManager = new EventManager();\n    _this._attachListeners();\n    return _this;\n  }\n\n  _createClass(CastAdsManager, [{\n    key: '_attachListeners',\n    value: function _attachListeners() {\n      var _this2 = this;\n\n      this._eventManager.listen(this._castPlayer, EventType.AD_MANIFEST_LOADED, function () {\n        _this2._allAdsCompleted = false;\n      });\n\n      this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_START, function () {\n        _this2._adBreak = true;\n      });\n\n      this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_END, function () {\n        _this2._adBreak = false;\n      });\n\n      this._eventManager.listen(this._castPlayer, EventType.ALL_ADS_COMPLETED, function () {\n        _this2._allAdsCompleted = true;\n      });\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this._eventManager.removeAll();\n      this._adBreak = false;\n      this._allAdsCompleted = true;\n      this._attachListeners();\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._adBreak = false;\n      this._allAdsCompleted = true;\n      this._eventManager.destroy();\n    }\n  }, {\n    key: 'adBreak',\n    get: function get() {\n      return this._adBreak;\n    }\n  }, {\n    key: 'allAdsCompleted',\n    get: function get() {\n      return this._allAdsCompleted;\n    }\n  }]);\n\n  return CastAdsManager;\n}(FakeEventTarget);\n\nexports.CastAdsManager = CastAdsManager;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// playkit-cast-sender.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0afbb7351e3d5135738e","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"kaltura-player-js\",\"commonjs2\":\"kaltura-player-js\",\"amd\":\"kaltura-player-js\",\"root\":[\"KalturaPlayer\"]}\n// module id = 0\n// module chunks = 0","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {CastStateManager} from './cast-state-manager';\nimport {CastTracksManager} from './cast-tracks-manager';\nimport {CastPlaybackEngine} from './cast-playback-engine';\nimport {CastUI} from './cast-ui';\nimport {CastLoader} from './cast-loader';\nimport {CastAdsController} from './cast-ads-controller';\nimport {CastAdsManager} from './cast-ads-manager';\n\nconst {Env, Track, TextStyle, EventType, StateType, FakeEvent, Utils, EngineType, AbrMode, Error} = core;\nconst {\n  BaseRemotePlayer,\n  PlayerSnapshot,\n  RemoteControl,\n  RemoteConnectedPayload,\n  RemoteDisconnectedPayload,\n  RemoteAvailablePayload,\n  RemoteSession,\n  TextStyleConverter,\n  CustomMessageType,\n  CustomMessage,\n  CustomEventMessage\n} = remote;\n\nexport const INTERVAL_FREQUENCY = 500;\nexport const SECONDS_TO_MINUTES_DIVIDER = 60;\nexport const CUSTOM_CHANNEL = 'urn:x-cast:com.kaltura.cast.playkit';\n\n/**\n * Cast Sender Player.\n * @class CastPlayer\n * @param {CastConfigObject} config - The cast configuration.\n * @param {RemoteControl} remoteControl - The remote control.\n * @extends BaseRemotePlayer\n */\nclass CastPlayer extends BaseRemotePlayer {\n  /**\n   * The remote player type.\n   * @static\n   * @type {string}\n   * @memberof CastPlayer\n   * @override\n   */\n  static Type: string = 'chromecast';\n\n  /**\n   * @function isSupported\n   * @static\n   * @returns {boolean} - Whether the cast player is supported in the current runtime environment.\n   * @memberof CastPlayer\n   * @override\n   */\n  static isSupported(): boolean {\n    return Env.browser.name === 'Chrome';\n  }\n\n  /**\n   * The default cast configuration.\n   * @static\n   * @type {Object}\n   * @memberof CastPlayer\n   * @override\n   */\n  static defaultConfig: Object = {\n    liveEdgeThreshold: 5\n  };\n\n  _remoteSession: RemoteSession;\n  _castSession: Object;\n  _castContext: Object;\n  _castRemotePlayer: Object;\n  _castRemotePlayerController: Object;\n  _ui: CastUI;\n  _stateManager: CastStateManager;\n  _tracksManager: CastTracksManager;\n  _engine: CastPlaybackEngine;\n  _readyPromise: ?Promise<*> = null;\n  _mediaInfo: ?Object = null;\n  _firstPlay: boolean = true;\n  _ended: boolean = false;\n  _playbackStarted: boolean = false;\n  _reset: boolean = true;\n  _destroyed: boolean = false;\n  _mediaInfoIntervalId: number;\n  _adsController: CastAdsController;\n  _adsManager: CastAdsManager;\n\n  constructor(castConfig: CastConfigObject, remoteControl: RemoteControl) {\n    super('CastPlayer', castConfig, remoteControl);\n    CastLoader.load()\n      .then(() => {\n        this._initializeCastApi();\n        this._initializeRemotePlayer();\n      })\n      .catch(e => {\n        this._logger.error('Cast initialized error', e);\n      });\n  }\n\n  /**\n   * Loads a media to the receiver application.\n   * @param {ProviderMediaInfoObject} mediaInfo - The entry media info.\n   * @param {Object} [options] - The request options. See {@link https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.LoadRequest|chrome.cast.media.LoadRequest}\n   * @returns {Promise<void>} - Promise to indicate load succeed or failed.\n   * @instance\n   * @memberof CastPlayer\n   */\n  loadMedia(mediaInfo: Object, options?: Object): Promise<*> {\n    this._logger.debug('Load media', mediaInfo, options);\n    this.reset();\n    this._remoteControl.getUIWrapper().reset();\n    this._mediaInfo = mediaInfo;\n\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_STARTED));\n    }\n    const media = new chrome.cast.media.MediaInfo();\n    const request = new chrome.cast.media.LoadRequest(media);\n\n    if (options) {\n      Object.keys(options).forEach(option => {\n        if (option !== 'media') {\n          // $FlowFixMe\n          request[option] = options[option];\n        } else {\n          // $FlowFixMe\n          Object.keys(options.media).forEach(mediaOption => {\n            // $FlowFixMe\n            media[mediaOption] = options.media[mediaOption];\n          });\n        }\n      });\n    }\n\n    media.customData = media.customData || {};\n    media.customData.mediaInfo = mediaInfo;\n    return this._castSession.loadMedia(request).then(() => this._onLoadMediaSuccess(), error => this._onLoadMediaFailed(error));\n  }\n\n  /**\n   * Gets the media Info.\n   * @returns {ProviderMediaInfoObject} - The media info.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getMediaInfo(): ?Object {\n    return Utils.Object.copyDeep(this._mediaInfo);\n  }\n\n  /**\n   * The cast player readiness.\n   * @returns {Promise<*>} - Promise which resolved when the cast player is ready.\n   * @instance\n   * @memberof CastPlayer\n   */\n  ready(): Promise<*> {\n    return this._readyPromise ? this._readyPromise : Promise.resolve();\n  }\n\n  /**\n   * Start/resume playback.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  play(): void {\n    if (!this.ended || this._adsManager.adBreak) {\n      this._engine.play();\n    } else {\n      if (this._mediaInfo) {\n        this.loadMedia(this._mediaInfo);\n      }\n    }\n  }\n\n  /**\n   * Pause playback.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  pause(): void {\n    this._engine.pause();\n  }\n\n  /**\n   * Stops and reset the cast player.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  reset(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._reset) return;\n    this._reset = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._tracksManager.reset();\n    this._engine.reset();\n    this._adsManager.reset();\n    this._stateManager.reset();\n    this._readyPromise = this._createReadyPromise();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_RESET));\n  }\n\n  /**\n   * Destroys the cast player.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  destroy(): void {\n    clearInterval(this._mediaInfoIntervalId);\n    if (this._destroyed) return;\n    this._destroyed = true;\n    this._firstPlay = true;\n    this._ended = false;\n    this._readyPromise = null;\n    this._eventManager.destroy();\n    this._tracksManager.destroy();\n    this._engine.destroy();\n    this._adsManager.destroy();\n    this._stateManager.destroy();\n    this.dispatchEvent(new FakeEvent(EventType.PLAYER_DESTROY));\n  }\n\n  /**\n   * @returns {boolean} - Whether the current playback is a live playback.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isLive(): boolean {\n    const mediaInfo = this._castRemotePlayer.mediaInfo;\n    return mediaInfo ? mediaInfo.streamType === chrome.cast.media.StreamType.LIVE : false;\n  }\n\n  /**\n   * @returns {boolean} - Whether the current live playback has DVR window. In case of non-live playback will return false.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isDvr(): boolean {\n    if (this.isLive()) {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession) {\n        const range = mediaSession.liveSeekableRange;\n        if (range) {\n          const startMinutes = range.start / SECONDS_TO_MINUTES_DIVIDER;\n          const endMinutes = range.end / SECONDS_TO_MINUTES_DIVIDER;\n          return endMinutes - startMinutes > this._castConfig.liveEdgeThreshold;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Seeks to the live edge.\n   * @instance\n   * @returns {void}\n   * @memberof CastPlayer\n   */\n  seekToLiveEdge(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        this._engine.currentTime = range.end;\n      }\n    }\n  }\n\n  /**\n   * @returns {number} - The start time of the DVR window.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getStartTimeOfDvrWindow(): number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const range = mediaSession.liveSeekableRange;\n      if (range) {\n        return range.start;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * @function enableAdaptiveBitrate\n   * @description Enables automatic adaptive bitrate switching.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  /**\n   * @function isAdaptiveBitrateEnabled\n   * @returns {boolean} - Whether adaptive bitrate is enabled.\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  /**\n   * @param {string} [type] - Track type.\n   * @returns {Array<Track>} - The cast player tracks.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getTracks(type?: string): Array<Track> {\n    return this._tracksManager.getTracks(type);\n  }\n\n  /**\n   * @returns {Object} - The cast player active tracks.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getActiveTracks(): Object {\n    return this._tracksManager.getActiveTracks();\n  }\n\n  /**\n   * Select a certain track to be active.\n   * @param {Track} track - The track to activate.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  selectTrack(track: ?Track): void {\n    this._tracksManager.selectTrack(track);\n  }\n\n  /**\n   * Hides the active text track.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  hideTextTrack(): void {\n    this._tracksManager.hideTextTrack();\n  }\n\n  /**\n   * Start casting.\n   * @returns {Promise<*>} - A promise to indicate session is starting, or failed\n   * @instance\n   * @memberof CastPlayer\n   */\n  startCasting(): Promise<*> {\n    return cast && cast.framework ? cast.framework.CastContext.getInstance().requestSession() : Promise.reject();\n  }\n\n  /**\n   * @returns {boolean} - Whether casting is available.\n   * @instance\n   * @memberof CastPlayer\n   */\n  isCastAvailable(): boolean {\n    return !!this._castRemotePlayer;\n  }\n\n  /**\n   * Stops the current cast session.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  stopCasting(): void {\n    this._castSession.endSession(true);\n  }\n\n  /**\n   * Gets the current remote session.\n   * @returns {RemoteSession} - The remote session.\n   * @instance\n   * @memberof CastPlayer\n   */\n  getCastSession(): RemoteSession {\n    return Utils.Object.copyDeep(this._remoteSession);\n  }\n\n  /**\n   * @return {CastAdsController} - The cast ads controller.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get ads(): ?CastAdsController {\n    return this._adsController;\n  }\n\n  /**\n   * Setter.\n   * @param {TextStyle} style - The text style to set.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set textStyle(style: TextStyle): void {\n    this._tracksManager.textStyle = style;\n  }\n\n  /**\n   * Getter.\n   * @returns {TextStyle} - The current text style.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get textStyle(): ?TextStyle {\n    return this._tracksManager.textStyle;\n  }\n\n  /**\n   * Setter.\n   * @param {number} to - The number to set in seconds.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set currentTime(to: number): void {\n    this._engine.currentTime = to;\n  }\n\n  /**\n   * Getter.\n   * @returns {number} - The current time in seconds.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get currentTime(): ?number {\n    return this._engine.currentTime;\n  }\n\n  /**\n   * @returns {number} - The duration in seconds.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get duration(): ?number {\n    return this._engine.duration;\n  }\n\n  /**\n   * Setter.\n   * @param {number} vol - The volume to set in the range of 0-1.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set volume(vol: number): void {\n    this._engine.volume = vol;\n  }\n\n  /**\n   * Getter.\n   * @returns {number} - The current volume in the range of 0-1.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get volume(): ?number {\n    return this._engine.volume;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in paused state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get paused(): ?boolean {\n    return this._engine.paused;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in ended state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get ended(): ?boolean {\n    return this._ended;\n  }\n\n  /**\n   * @returns {boolean} - Whether the cast player is in seeking state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get seeking(): ?boolean {\n    return this._engine.seeking;\n  }\n\n  /**\n   * Setter.\n   * @param {boolean} mute - The mute value to set.\n   * @returns {void}\n   * @instance\n   * @memberof CastPlayer\n   */\n  set muted(mute: boolean): void {\n    this._engine.muted = mute;\n  }\n\n  /**\n   * Getter.\n   * @returns {boolean} - The muted state.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get muted(): ?boolean {\n    return this._engine.muted;\n  }\n\n  /**\n   * @returns {string} - The current playing source url.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get src(): ?string {\n    if (this._castRemotePlayer.mediaInfo) {\n      return this._castRemotePlayer.mediaInfo.contentUrl;\n    }\n  }\n\n  /**\n   * @returns {string} - The current poster url.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get poster(): string {\n    try {\n      return this._castRemotePlayer.mediaInfo.metadata.images[0].url;\n    } catch (e) {\n      return '';\n    }\n  }\n\n  /**\n   * @returns {string} - The current playback rate.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get playbackRate(): ?number {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      return mediaSession.playbackRate;\n    }\n  }\n\n  /**\n   * @returns {string} - The active engine type.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get engineType(): ?string {\n    return EngineType.CAST;\n  }\n\n  /**\n   * @returns {string} - The remote player type.\n   * @instance\n   * @memberof CastPlayer\n   */\n  get type(): string {\n    return CastPlayer.Type;\n  }\n\n  /**\n   * @name config\n   * @returns {Object} - The runtime cast player config.\n   * @instance\n   * @memberof CastPlayer\n   */\n\n  _initializeCastApi(): void {\n    const options: Object = {};\n\n    options.receiverApplicationId = this._castConfig.receiverApplicationId || chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID;\n    options.autoJoinPolicy = this._castConfig.autoJoinPolicy || chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED;\n\n    this._logger.debug('Init cast API with options', options);\n    cast.framework.CastContext.getInstance().setOptions(options);\n\n    const payload = new RemoteAvailablePayload(this, true);\n    this._remoteControl.onRemoteDeviceAvailable(payload);\n  }\n\n  _initializeRemotePlayer(): void {\n    this._castContext = cast.framework.CastContext.getInstance();\n    this._addSessionLifecycleListeners();\n    this._castRemotePlayer = new cast.framework.RemotePlayer();\n    this._castRemotePlayerController = new cast.framework.RemotePlayerController(this._castRemotePlayer);\n    this._castRemotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.IS_CONNECTED_CHANGED, () => {\n      if (this._castRemotePlayer.isConnected) {\n        this._setupRemotePlayer();\n      } else {\n        this._setupLocalPlayer();\n      }\n    });\n  }\n\n  _setupRemotePlayer(): void {\n    this._logger.debug('Setup remote player');\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._castSession.addMessageListener(CUSTOM_CHANNEL, (customChannel, customMessage) => this._onCustomMessage(customChannel, customMessage));\n    this._tracksManager = new CastTracksManager(this._castRemotePlayer);\n    this._engine = new CastPlaybackEngine(this._castRemotePlayer, this._castRemotePlayerController);\n    this._stateManager = new CastStateManager(this._castRemotePlayer, this._castRemotePlayerController);\n    this._adsManager = new CastAdsManager(this);\n    this._ui = new CastUI();\n    this._attachListeners();\n    const snapshot = this._remoteControl.getPlayerSnapshot();\n    this._playerConfig = snapshot.config;\n    this._remoteSession = new RemoteSession(\n      this._castSession.getSessionId(),\n      this._castSession.getCastDevice().friendlyName,\n      this._castSession.getSessionState() !== cast.framework.SessionState.SESSION_STARTED\n    );\n    const payload = new RemoteConnectedPayload(this, this._remoteSession, this._ui);\n    this._remoteControl.onRemoteDeviceConnected(payload);\n    if (this._remoteSession.resuming) {\n      this._resumeSession();\n    } else if (snapshot && snapshot.mediaInfo) {\n      const mediaInfo = snapshot.mediaInfo;\n      const loadOptions = this._getLoadOptions(snapshot);\n      this.loadMedia(mediaInfo, loadOptions);\n    }\n  }\n\n  _setupLocalPlayer(): void {\n    this._logger.debug('Setup local player');\n    const snapshot = new PlayerSnapshot(this);\n    const payload = new RemoteDisconnectedPayload(this, snapshot);\n    this.pause();\n    this.destroy();\n    this._remoteControl.onRemoteDeviceDisconnected(payload);\n  }\n\n  _createReadyPromise(): void {\n    this._readyPromise = new Promise(resolve => {\n      this._eventManager.listenOnce(this, EventType.TRACKS_CHANGED, () => {\n        this.dispatchEvent(new FakeEvent(EventType.MEDIA_LOADED));\n        resolve();\n      });\n    });\n  }\n\n  _attachListeners(): void {\n    this._eventManager.listen(this._engine, EventType.TIME_UPDATE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.PAUSE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.PLAY, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.VOLUME_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.MUTE_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.DURATION_CHANGE, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.ENDED, e => this._onEnded(e));\n    this._eventManager.listen(this._engine, EventType.SEEKING, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._engine, EventType.SEEKED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TRACKS_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.VIDEO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.AUDIO_TRACK_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.TEXT_STYLE_CHANGED, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._tracksManager, EventType.ERROR, e => this.dispatchEvent(e));\n    this._eventManager.listen(this._stateManager, EventType.PLAYER_STATE_CHANGED, e => this._onPlayerStateChanged(e));\n  }\n\n  _onEnded(e: FakeEvent): void {\n    this._ended = true;\n    this.dispatchEvent(e);\n    if (this._adsManager.allAdsCompleted) {\n      this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n    } else {\n      this._eventManager.listenOnce(this, EventType.ALL_ADS_COMPLETED, () => {\n        this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_ENDED));\n      });\n    }\n  }\n\n  _onPlayerStateChanged(e: FakeEvent): void {\n    if (this._ended) return;\n    if (this._stateManager.currentState.type === StateType.PLAYING) {\n      this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    }\n    this.dispatchEvent(e);\n  }\n\n  _handleFirstPlay(): void {\n    if (this._playbackStarted) {\n      this.dispatchEvent(new FakeEvent(EventType.CHANGE_SOURCE_ENDED));\n    }\n    this.dispatchEvent(new FakeEvent(EventType.PLAYBACK_START));\n    this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAY));\n    this.dispatchEvent(new FakeEvent(EventType.FIRST_PLAYING));\n    this.dispatchEvent(new FakeEvent(EventType.PLAYING));\n    if (this.paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    }\n    this._firstPlay = false;\n    this._playbackStarted = true;\n  }\n\n  _resumeSession(): void {\n    this._readyPromise = this._createReadyPromise();\n    this._mediaInfoIntervalId = setInterval(() => {\n      const mediaSession = this._castSession.getMediaSession();\n      if (mediaSession && mediaSession.customData) {\n        clearInterval(this._mediaInfoIntervalId);\n        this._mediaInfo = mediaSession.customData.mediaInfo;\n        this._logger.debug('Resuming session with media info', this._mediaInfo);\n        this._onLoadMediaSuccess();\n      }\n    }, INTERVAL_FREQUENCY);\n  }\n\n  _onLoadMediaSuccess(): void {\n    this._logger.debug('Load media success');\n    this._reset = false;\n    this._triggerInitialPlayerEvents();\n    this._tracksManager.parseTracks();\n    this._handleFirstPlay();\n  }\n\n  _triggerInitialPlayerEvents(): void {\n    this.dispatchEvent(\n      new FakeEvent(EventType.SOURCE_SELECTED, {\n        selectedSource: [\n          {\n            url: this._castRemotePlayer.mediaInfo.contentUrl,\n            mimetype: this._castRemotePlayer.mediaInfo.contentType\n          }\n        ]\n      })\n    );\n    this.dispatchEvent(new FakeEvent(EventType.LOADED_METADATA));\n    this.dispatchEvent(new FakeEvent(EventType.ABR_MODE_CHANGED, {mode: AbrMode.AUTO}));\n  }\n\n  _onLoadMediaFailed(error: Object): void {\n    this._logger.debug('Load media falied', error);\n    this.dispatchEvent(\n      new FakeEvent(EventType.ERROR, new Error(Error.Severity.CRITICAL, Error.Category.CAST, Error.Code.CAST_LOAD_MEDIA_FAILED, error))\n    );\n  }\n\n  _addSessionLifecycleListeners(): void {\n    this._castContext.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, event => {\n      switch (event.sessionState) {\n        case cast.framework.SessionState.SESSION_STARTING:\n          this._remoteControl.onRemoteDeviceConnecting();\n          break;\n        case cast.framework.SessionState.SESSION_ENDING:\n          this._remoteControl.onRemoteDeviceDisconnecting();\n          break;\n        case cast.framework.SessionState.SESSION_START_FAILED:\n          this._remoteControl.onRemoteDeviceConnectFailed();\n          break;\n      }\n    });\n  }\n\n  _getLoadOptions(snapshot: PlayerSnapshot): Object {\n    const loadOptions = {\n      autoplay: this._playerConfig.playback.autoplay,\n      currentTime: this._playerConfig.playback.startTime,\n      media: {}\n    };\n    if (this.textStyle && !this.textStyle.isEqual(snapshot.textStyle)) {\n      loadOptions.media.textTrackStyle = TextStyleConverter.toCastTextStyle(snapshot.textStyle);\n    }\n    loadOptions.media.customData = {\n      audioLanguage: this._playerConfig.playback.audioLanguage,\n      textLanguage: this._playerConfig.playback.textLanguage\n    };\n    if (snapshot.advertising && snapshot.advertising.adTagUrl) {\n      this._adsController = new CastAdsController();\n      const castAdvertising = this._castConfig.advertising;\n      if (!castAdvertising || !castAdvertising.vast) {\n        loadOptions.media.vmapAdsRequest = this._getAdsRequest(snapshot.advertising);\n      } else {\n        const breakClipId = Utils.Generator.uniqueId(5);\n        const breakId = Utils.Generator.uniqueId(5);\n        const breakClips = [\n          {\n            id: breakClipId,\n            position: 0,\n            vastAdsRequest: this._getAdsRequest(snapshot.advertising)\n          }\n        ];\n        const breaks = [\n          {\n            breakClipIds: [breakClipId],\n            id: breakId,\n            position: 0\n          }\n        ];\n        loadOptions.media.breakClips = breakClips;\n        loadOptions.media.breaks = breaks;\n      }\n    }\n    return loadOptions;\n  }\n\n  _getAdsRequest(advertising: Object): Object {\n    const adsRequest = {};\n    if (advertising.adTagUrl) {\n      adsRequest.adTagUrl = advertising.adTagUrl;\n    }\n    if (advertising.adsResponse) {\n      adsRequest.adsResponse = advertising.adsResponse;\n    }\n    return adsRequest;\n  }\n\n  _onCustomMessage(customChannel: string, customMessage: CustomMessage): void {\n    try {\n      const parsedCustomMessage = JSON.parse(customMessage);\n      this._logger.debug('Custom message received', parsedCustomMessage);\n      switch (parsedCustomMessage.type) {\n        case CustomMessageType.EVENT:\n          this._handleCustomEvent(parsedCustomMessage);\n          break;\n      }\n    } catch (e) {\n      this.dispatchEvent(\n        new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_CUSTOM_MESSAGE_PARSING_ERROR, e))\n      );\n    }\n  }\n\n  _handleCustomEvent(customEvent: CustomEventMessage): void {\n    this.dispatchEvent(new FakeEvent(customEvent.event, customEvent.payload));\n  }\n}\n\nexport {CastPlayer};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-player.js","// @flow\nimport {CastPlayer} from './cast-player';\nimport {cast} from 'kaltura-player-js';\n\nconst {registerRemotePlayer} = cast;\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\nexport {CastPlayer as RemotePlayer};\nexport {__VERSION__ as VERSION, __NAME__ as NAME};\n\nif (CastPlayer.isSupported()) {\n  registerRemotePlayer(CastPlayer.Type, CastPlayer);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","//@flow\nimport {core} from 'kaltura-player-js';\n\nconst {State, FakeEvent, EventType, FakeEventTarget, StateType} = core;\n\nclass CastStateManager extends FakeEventTarget {\n  _currentState: State;\n  _previousState: State;\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _updateState: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n    this._updateState = this._updateState.bind(this);\n    this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n  }\n\n  _updateState(): void {\n    this._currentState.duration = Date.now() / 1000;\n    this._previousState = this._currentState;\n    if (this._remotePlayer.playerState) {\n      this._currentState = new State(this._remotePlayer.playerState.toLowerCase());\n    } else {\n      this._currentState = new State(StateType.IDLE);\n    }\n    this.dispatchEvent(\n      new FakeEvent(EventType.PLAYER_STATE_CHANGED, {\n        oldState: this.previousState,\n        newState: this.currentState\n      })\n    );\n  }\n\n  reset(): void {\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  destroy(): void {\n    this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.PLAYER_STATE_CHANGED, this._updateState);\n    this._currentState = new State(StateType.IDLE);\n    this._previousState = new State(StateType.IDLE);\n  }\n\n  get currentState(): State {\n    return this._currentState;\n  }\n\n  get previousState(): State {\n    return this._previousState;\n  }\n}\n\nexport {CastStateManager};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-state-manager.js","// @flow\nimport {cast as remote, core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {TextStyleConverter} = remote;\nconst {Track, getLogger, TextStyle, AudioTrack, VideoTrack, TextTrack, Utils, TrackType, EventType, FakeEvent, FakeEventTarget, Error} = core;\nconst TRACK_TYPE_TO_INSTANCE: {[type: string]: Track} = {\n  [TrackType.AUDIO]: AudioTrack,\n  [TrackType.VIDEO]: VideoTrack,\n  [TrackType.TEXT]: TextTrack\n};\n\nclass CastTracksManager extends FakeEventTarget {\n  _remotePlayer: Object;\n  _castSession: Object;\n  _textStyle: TextStyle;\n  _activeTrackIds: Array<number> = [];\n  _tracks: Array<Track> = [];\n  _mediaStatusIntervalId: ?number;\n  _onMediaStatusUpdate: Function;\n  _logger: any;\n\n  constructor(remotePlayer: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._logger = getLogger('CastTracksManager');\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n    this._textStyle = new TextStyle();\n    this._bindEvents();\n  }\n\n  parseTracks(): void {\n    const tracks = this._remotePlayer.mediaInfo.tracks;\n    if (tracks && tracks.length > 0) {\n      const castTextTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.TEXT);\n      const castVideoTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.VIDEO);\n      const castAudioTracks = tracks.filter(t => t.type === chrome.cast.media.TrackType.AUDIO);\n      const textTracks = this._parseTextTracks(castTextTracks);\n      const videoTracks = this._parseVideoTracks(castVideoTracks);\n      const audioTracks = this._parseAudioTracks(castAudioTracks);\n      this._tracks = audioTracks.concat(videoTracks).concat(textTracks);\n      this._addTextTrackOffOption();\n    }\n    this._logger.debug('Parse tracks', this._tracks);\n    this._startOnMediaStatusUpdateInterval();\n    this.dispatchEvent(new FakeEvent(EventType.TRACKS_CHANGED, {tracks: this._tracks}));\n  }\n\n  getTracks(type?: string): Array<Track> {\n    return Utils.Object.copyDeep(this._getTracksByType(type));\n  }\n\n  getActiveTracks(): Object {\n    return Utils.Object.copyDeep({\n      video: this._getTracksByType(TrackType.VIDEO).find(track => track.active),\n      audio: this._getTracksByType(TrackType.AUDIO).find(track => track.active),\n      text: this._getTracksByType(TrackType.TEXT).find(track => track.active)\n    });\n  }\n\n  selectTrack(track: ?Track): void {\n    if (track instanceof VideoTrack) {\n      this._selectVideoTrack(track);\n    } else if (track instanceof AudioTrack) {\n      this._selectAudioTrack(track);\n    } else if (track instanceof TextTrack) {\n      this._selectTextTrack(track);\n    }\n  }\n\n  hideTextTrack(): void {\n    const offTrack = this._tracks.find(t => t.language === 'off');\n    this.selectTrack(offTrack);\n  }\n\n  reset(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  destroy(): void {\n    this._stopOnMediaStatusUpdateInterval();\n    this._tracks = [];\n    this._activeTrackIds = [];\n  }\n\n  set textStyle(style: TextStyle): void {\n    this._logger.debug('Setting text style', style);\n    const textTrackStyle = TextStyleConverter.toCastTextStyle(style);\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(null, textTrackStyle);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Setting text style succeed');\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      },\n      error => {\n        this._logger.debug('Setting text style failed', error);\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  get textStyle(): ?TextStyle {\n    return this._textStyle.clone();\n  }\n\n  _startOnMediaStatusUpdateInterval(): void {\n    this._mediaStatusIntervalId = setInterval(this._onMediaStatusUpdate, INTERVAL_FREQUENCY);\n  }\n\n  _stopOnMediaStatusUpdateInterval(): void {\n    if (this._mediaStatusIntervalId) {\n      clearInterval(this._mediaStatusIntervalId);\n      this._mediaStatusIntervalId = null;\n    }\n  }\n\n  _bindEvents(): void {\n    this._onMediaStatusUpdate = this._onMediaStatusUpdate.bind(this);\n  }\n\n  _parseTextTracks(castTextTracks: Array<Object>): Array<TextTrack> {\n    const textTracks = [];\n    castTextTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        kind: track.subType || 'subtitles',\n        active: false\n      };\n      textTracks.push(new TextTrack(settings));\n    });\n    return textTracks;\n  }\n\n  _parseVideoTracks(castVideoTracks: Array<Object>): Array<VideoTrack> {\n    const videoTracks = [];\n    castVideoTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      videoTracks.push(new VideoTrack(settings));\n    });\n    return videoTracks;\n  }\n\n  _parseAudioTracks(castAudioTracks: Array<Object>): Array<AudioTrack> {\n    const audioTracks = [];\n    castAudioTracks.forEach(track => {\n      const settings: Object = {\n        id: track.trackId,\n        index: track.trackId - 1,\n        label: track.name,\n        language: track.language,\n        active: false\n      };\n      audioTracks.push(new AudioTrack(settings));\n    });\n    return audioTracks;\n  }\n\n  _selectVideoTrack(track: VideoTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().video;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.VIDEO_TRACK_CHANGED, {selectedVideoTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectAudioTrack(track: AudioTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().audio;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.AUDIO_TRACK_CHANGED, {selectedAudioTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.CAST_EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTextTrack(track: TextTrack): void {\n    this._stopOnMediaStatusUpdateInterval();\n    const currentTrack = this.getActiveTracks().text;\n    this._selectTrack(\n      track,\n      currentTrack,\n      () => {\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_TRACK_CHANGED, {selectedTextTrack: track}));\n        this._startOnMediaStatusUpdateInterval();\n      },\n      error => {\n        this.dispatchEvent(\n          new FakeEvent(EventType.ERROR, new Error(Error.Severity.RECOVERABLE, Error.Category.CAST, Error.Code.EDIT_TRACKS_INFO_ERROR, error))\n        );\n      }\n    );\n  }\n\n  _selectTrack(newTrack: Track, currentTrack: ?Track, onSuccess: Function, onFailed: Function): void {\n    this._logger.debug('Select track', newTrack, currentTrack, this._activeTrackIds);\n    if (currentTrack) {\n      const index = this._activeTrackIds.indexOf(currentTrack.id);\n      if (index > -1) {\n        this._activeTrackIds.splice(index, 1);\n      }\n    }\n    if (newTrack.id && newTrack.language !== 'off') {\n      this._activeTrackIds.push(newTrack.id);\n    }\n    const tracksInfoRequest = new chrome.cast.media.EditTracksInfoRequest(this._activeTrackIds);\n    const mediaSession = this._castSession.getMediaSession();\n    mediaSession.editTracksInfo(\n      tracksInfoRequest,\n      () => {\n        this._logger.debug('Select track succeeded');\n        this._markActiveTrack(currentTrack, false);\n        this._markActiveTrack(newTrack, true);\n        onSuccess();\n      },\n      e => {\n        this._logger.debug('Select track failed', e);\n        onFailed(e);\n      }\n    );\n  }\n\n  _markActiveTrack(track: ?Track, active: boolean): void {\n    if (track) {\n      const id = track.id;\n      const origTrack = this._tracks.find(t => t.id === id);\n      if (origTrack) {\n        origTrack.active = active;\n      }\n    }\n  }\n\n  _addTextTrackOffOption(): void {\n    const textTracks = this._getTracksByType(TrackType.TEXT);\n    const lastTrack = textTracks[textTracks.length - 1];\n    if (textTracks && textTracks.length) {\n      this._tracks.push(\n        new TextTrack({\n          id: lastTrack.id + 1,\n          active: true,\n          index: lastTrack.index + 1,\n          kind: 'subtitles',\n          label: 'Off',\n          language: 'off'\n        })\n      );\n    }\n  }\n\n  _getTracksByType(type?: string): Array<Track> {\n    return !type\n      ? this._tracks\n      : this._tracks.filter(track => {\n          if (type && TRACK_TYPE_TO_INSTANCE[type]) {\n            return track instanceof TRACK_TYPE_TO_INSTANCE[type];\n          }\n          return true;\n        });\n  }\n\n  _onMediaStatusUpdate(): void {\n    const mediaSession = this._castSession.getMediaSession();\n    if (mediaSession) {\n      const isTextStyleChanged = () => {\n        const localTextStyle = TextStyleConverter.toCastTextStyle(this.textStyle);\n        const remoteTextStyle = mediaSession.media.textTrackStyle;\n        if (remoteTextStyle) {\n          return !(\n            localTextStyle.backgroundColor === remoteTextStyle.backgroundColor &&\n            localTextStyle.fontFamily === remoteTextStyle.fontFamily &&\n            localTextStyle.fontScale === remoteTextStyle.fontScale &&\n            localTextStyle.foregroundColor === remoteTextStyle.foregroundColor\n          );\n        }\n        return false;\n      };\n      const isActiveTrackIdsChanged = () => {\n        if (mediaSession.activeTrackIds) {\n          return !(\n            this._activeTrackIds.length === mediaSession.activeTrackIds.length &&\n            this._activeTrackIds.every((value, index) => value === mediaSession.activeTrackIds[index])\n          );\n        }\n        return false;\n      };\n      if (isActiveTrackIdsChanged()) {\n        const diffIds = mediaSession.activeTrackIds.filter(i => !this._activeTrackIds.includes(i));\n        diffIds.forEach(id => {\n          const track = this._tracks.find(t => t.id === id);\n          this.selectTrack(track);\n        });\n      }\n      if (isTextStyleChanged()) {\n        const style = TextStyleConverter.toPlayerTextStyle(mediaSession.media.textTrackStyle);\n        this._textStyle = style;\n        this.dispatchEvent(new FakeEvent(EventType.TEXT_STYLE_CHANGED, {textStyle: style}));\n      }\n    }\n  }\n}\n\nexport {CastTracksManager};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-tracks-manager.js","// @flow\nimport {core} from 'kaltura-player-js';\nimport {INTERVAL_FREQUENCY} from './cast-player';\n\nconst {EventType, FakeEvent, FakeEventTarget} = core;\n\nclass CastPlaybackEngine extends FakeEventTarget {\n  _remotePlayer: Object;\n  _remotePlayerController: Object;\n  _mediaSession: Object;\n  _muted: boolean = false;\n  _volume: number = 1;\n  _paused: boolean = false;\n  _currentTime: number = 0;\n  _duration: number = 0;\n  _seeking: boolean = false;\n  _seekForward: boolean;\n  _seekTargetTime: ?number;\n  _liveCurrentTimeIntervalId: number;\n  _onCurrentTimeChanged: Function;\n  _onIsPausedChanged: Function;\n  _onDurationChanged: Function;\n  _onVolumeLevelChanged: Function;\n  _onIsMutedChanged: Function;\n  _onIsMediaLoadedChanged: Function;\n  _onLiveCurrentTimeChanged: Function;\n\n  constructor(remotePlayer: Object, remotePlayerController: Object) {\n    super();\n    this._remotePlayer = remotePlayer;\n    this._remotePlayerController = remotePlayerController;\n    this._bindEvents();\n    this._toggleListeners(true);\n  }\n\n  reset(): void {\n    this._toggleListeners(false);\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._resetFlags();\n    this._toggleListeners(true);\n  }\n\n  destroy(): void {\n    clearInterval(this._liveCurrentTimeIntervalId);\n    this._toggleListeners(false);\n    this._muted = false;\n    this._volume = 1;\n    this._resetFlags();\n  }\n\n  play(): void {\n    this._remotePlayerController.playOrPause();\n  }\n\n  pause(): void {\n    if (this._remotePlayer.canPause) {\n      this._remotePlayerController.playOrPause();\n    }\n  }\n\n  set muted(value: boolean) {\n    if ((value && !this.muted) || (!value && this.muted)) {\n      this._remotePlayerController.muteOrUnmute();\n    }\n  }\n\n  set volume(value: number) {\n    if (this._remotePlayer.canControlVolume) {\n      this._remotePlayer.volumeLevel = value;\n      this._remotePlayerController.setVolumeLevel();\n    }\n  }\n\n  set currentTime(value: number) {\n    if (this._remotePlayer.canSeek) {\n      this._seeking = true;\n      this.dispatchEvent(new FakeEvent(EventType.SEEKING));\n      this._remotePlayer.currentTime = this._seekTargetTime = value;\n      this._seekForward = value > this.currentTime;\n      this._remotePlayerController.seek();\n    }\n  }\n\n  get duration(): ?number {\n    return this._duration;\n  }\n\n  get paused(): ?boolean {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.isPaused;\n    }\n    return this._paused;\n  }\n\n  get seeking(): ?boolean {\n    return this._seeking;\n  }\n\n  get muted(): ?boolean {\n    return this._muted;\n  }\n\n  get currentTime(): ?number {\n    if (this._remotePlayer.savedPlayerState) {\n      return this._remotePlayer.savedPlayerState.currentTime;\n    }\n    return this._currentTime;\n  }\n\n  get volume(): ?number {\n    return this._volume;\n  }\n\n  _resetFlags(): void {\n    this._paused = false;\n    this._currentTime = 0;\n    this._duration = 0;\n    this._seeking = false;\n  }\n\n  _bindEvents(): void {\n    this._onCurrentTimeChanged = this._onCurrentTimeChanged.bind(this);\n    this._onIsPausedChanged = this._onIsPausedChanged.bind(this);\n    this._onDurationChanged = this._onDurationChanged.bind(this);\n    this._onVolumeLevelChanged = this._onVolumeLevelChanged.bind(this);\n    this._onIsMutedChanged = this._onIsMutedChanged.bind(this);\n    this._onIsMediaLoadedChanged = this._onIsMediaLoadedChanged.bind(this);\n    this._onLiveCurrentTimeChanged = this._onLiveCurrentTimeChanged.bind(this);\n  }\n\n  _toggleListeners(listen: boolean): void {\n    const listeners = {\n      [cast.framework.RemotePlayerEventType.IS_MEDIA_LOADED_CHANGED]: this._onIsMediaLoadedChanged,\n      [cast.framework.RemotePlayerEventType.IS_PAUSED_CHANGED]: this._onIsPausedChanged,\n      [cast.framework.RemotePlayerEventType.DURATION_CHANGED]: this._onDurationChanged,\n      [cast.framework.RemotePlayerEventType.VOLUME_LEVEL_CHANGED]: this._onVolumeLevelChanged,\n      [cast.framework.RemotePlayerEventType.IS_MUTED_CHANGED]: this._onIsMutedChanged\n    };\n    if (listen) {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.addEventListener(e, listeners[e]));\n    } else {\n      Object.keys(listeners).forEach(e => this._remotePlayerController.removeEventListener(e, listeners[e]));\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n    }\n  }\n\n  _onIsMediaLoadedChanged(isMediaLoadedEvent: Object): void {\n    const onMediaInfoChanged = () => {\n      this._remotePlayerController.removeEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n      if (this._remotePlayer.mediaInfo.streamType === chrome.cast.media.StreamType.LIVE) {\n        this._mediaSession = cast.framework.CastContext.getInstance()\n          .getCurrentSession()\n          .getMediaSession();\n        this._liveCurrentTimeIntervalId = setInterval(this._onLiveCurrentTimeChanged, INTERVAL_FREQUENCY);\n      } else {\n        this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.CURRENT_TIME_CHANGED, this._onCurrentTimeChanged);\n      }\n    };\n    if (isMediaLoadedEvent.value) {\n      this._remotePlayerController.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, onMediaInfoChanged);\n    }\n  }\n\n  _onCurrentTimeChanged(): void {\n    this._currentTime = this._remotePlayer.currentTime;\n    this._maybeDispatchTimeUpdate();\n    this._maybeEndPlayback();\n  }\n\n  _onLiveCurrentTimeChanged(): void {\n    this._currentTime = this._mediaSession.currentTime;\n    this._maybeDispatchTimeUpdate();\n    this._maybeEndLivePlayback();\n  }\n\n  _onIsPausedChanged(): void {\n    this._paused = this._remotePlayer.isPaused;\n    if (this._paused) {\n      this.dispatchEvent(new FakeEvent(EventType.PAUSE));\n    } else {\n      this.dispatchEvent(new FakeEvent(EventType.PLAY));\n    }\n  }\n\n  _onDurationChanged(): void {\n    this._duration = this._remotePlayer.duration;\n    this.dispatchEvent(new FakeEvent(EventType.DURATION_CHANGE));\n  }\n\n  _onVolumeLevelChanged(): void {\n    this._volume = this._remotePlayer.volumeLevel;\n    this.dispatchEvent(new FakeEvent(EventType.VOLUME_CHANGE));\n  }\n\n  _onIsMutedChanged(): void {\n    this._muted = this._remotePlayer.isMuted;\n    this.dispatchEvent(new FakeEvent(EventType.MUTE_CHANGE, {mute: this.muted}));\n  }\n\n  _maybeDispatchTimeUpdate(): void {\n    if (!this._seeking) {\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    } else if (\n      this._seekTargetTime &&\n      ((this._seekForward && this.currentTime >= this._seekTargetTime) || (!this._seekForward && this.currentTime <= this._seekTargetTime))\n    ) {\n      this._seeking = false;\n      this._seekTargetTime = null;\n      this.dispatchEvent(new FakeEvent(EventType.SEEKED));\n      this.dispatchEvent(new FakeEvent(EventType.TIME_UPDATE));\n    }\n  }\n\n  _maybeEndPlayback(): void {\n    const delta = Math.round(this._duration - this._currentTime);\n    if (this._currentTime !== 0 && this._duration !== 0 && delta <= 1) {\n      this._currentTime = this._duration;\n      this._paused = true;\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n\n  _maybeEndLivePlayback(): void {\n    const range = this._mediaSession.liveSeekableRange;\n    if (range && range.isLiveDone) {\n      this._paused = true;\n      this.dispatchEvent(new FakeEvent(EventType.ENDED));\n    }\n  }\n}\n\nexport {CastPlaybackEngine};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-playback-engine.js","// @flow\nimport {cast, ui} from 'kaltura-player-js';\n\n// eslint-disable-next-line no-unused-vars\nconst {style, Components} = ui;\nconst {RemotePlayerUI} = cast;\n\nclass CastUI extends RemotePlayerUI {\n  playbackUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.OverlayPortal />\n          <Components.BottomBar>\n            <Components.SeekBarPlaybackContainer showFramePreview showTimeBubble player={props.player} playerContainer={props.playerContainer} />\n            <div className={style.leftControls}>\n              <Components.PlaybackControls player={props.player} />\n              <Components.RewindControl player={props.player} step={10} />\n              <Components.TimeDisplayPlaybackContainer format=\"current / total\" />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.LanguageControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n          <Components.CastOverlay player={props.player} />\n          <Components.OverlayAction player={props.player} />\n          <Components.PlaybackControls player={props.player} />\n        </div>\n        <Components.PrePlaybackPlayOverlay player={props.player} />\n      </div>\n    );\n  }\n\n  liveUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.OverlayPortal />\n          <Components.BottomBar>\n            <Components.SeekBarLivePlaybackContainer showFramePreview showTimeBubble player={props.player} playerContainer={props.playerContainer} />\n            <div className={style.leftControls}>\n              <Components.PlaybackControls player={props.player} />\n              <Components.LiveTag player={props.player} />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.LanguageControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n          <Components.CastOverlay player={props.player} />\n          <Components.OverlayAction player={props.player} />\n          <Components.PlaybackControls player={props.player} />\n        </div>\n        <Components.PrePlaybackPlayOverlay player={props.player} />\n      </div>\n    );\n  }\n\n  idleUI(props: Object): any {\n    return (\n      <div className={style.playbackGuiWWrapper}>\n        <Components.Loading player={props.player} />\n        <Components.CastOverlay player={props.player} />\n      </div>\n    );\n  }\n\n  adsUI(props: Object): any {\n    return (\n      <div className={style.adGuiWrapper}>\n        <Components.KeyboardControl player={props.player} config={props.config} />\n        <Components.Loading player={props.player} />\n        <div className={style.playerGui} id=\"player-gui\">\n          <Components.CastOverlay player={props.player} />\n          <Components.OverlayAction player={props.player} />\n          <div>\n            <Components.TopBar>\n              <div className={style.leftControls}>\n                <Components.AdNotice />\n              </div>\n              <div className={style.rightControls}>\n                <Components.AdLearnMore />\n              </div>\n            </Components.TopBar>\n            <Components.AdSkip player={props.player} />\n          </div>\n          <Components.BottomBar>\n            <div className={style.leftControls}>\n              <Components.PlaybackControls player={props.player} />\n              <Components.TimeDisplayAdsContainer />\n            </div>\n            <div className={style.rightControls}>\n              <Components.VolumeControl player={props.player} />\n              <Components.CastControl player={props.player} />\n              <Components.FullscreenControl player={props.player} />\n            </div>\n          </Components.BottomBar>\n          <Components.PlaybackControls player={props.player} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport {CastUI};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-ui.js","// @flow\nimport {core} from 'kaltura-player-js';\n\nconst {Utils, getLogger} = core;\n\nconst SENDER_SDK_URL: string = '//www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1';\n\nclass CastLoader {\n  static _logger: any = getLogger('CastLoader');\n\n  static load(): Promise<*> {\n    return new Promise((resolve, reject) => {\n      window['__onGCastApiAvailable'] = isAvailable => CastLoader._onGCastApiAvailable(isAvailable, resolve);\n      CastLoader._loadCastSDK()\n        .then(() => CastLoader._logger.debug('Cast sender lib has been loaded successfully'))\n        .catch(e => {\n          CastLoader._logger.debug('Cast sender lib loading failed', e);\n          reject(e);\n        });\n    });\n  }\n\n  static _loadCastSDK(): Promise<*> {\n    if (window['cast'] && window['cast']['framework']) {\n      return Promise.resolve();\n    }\n    return Utils.Dom.loadScriptAsync(SENDER_SDK_URL);\n  }\n\n  static _onGCastApiAvailable(isAvailable: boolean, resolve: Function): void {\n    CastLoader._logger.debug(`onGCastApiAvailable, isAvailable: ${isAvailable.toString()}`);\n    if (isAvailable) {\n      resolve();\n    } else {\n      CastLoader._logger.debug(`Google cast API isn't available yet`);\n    }\n  }\n}\n\nexport {CastLoader};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-loader.js","// @flow\nimport {CUSTOM_CHANNEL} from './cast-player';\nimport {cast as remote} from 'kaltura-player-js';\n\nconst {CustomActionMessage, CustomActionType} = remote;\n\n/**\n * Cast Ads Controller.\n * @class CastAdsController\n */\nclass CastAdsController {\n  _castSession: Object;\n\n  constructor() {\n    this._castSession = cast.framework.CastContext.getInstance().getCurrentSession();\n  }\n\n  /**\n   * Skips on an ad.\n   * @returns {void}\n   * @memberof CastAdsController\n   * @instance\n   */\n  skipAd(): void {\n    this._castSession.sendMessage(CUSTOM_CHANNEL, new CustomActionMessage(CustomActionType.SKIP_AD));\n  }\n}\n\nexport {CastAdsController};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-ads-controller.js","// @flow\nimport {CastPlayer} from './cast-player';\nimport {core} from 'kaltura-player-js';\n\nconst {EventManager, EventType, FakeEventTarget} = core;\n\nclass CastAdsManager extends FakeEventTarget {\n  _castPlayer: CastPlayer;\n  _adBreak: boolean = false;\n  _allAdsCompleted: boolean = true;\n  _eventManager: EventManager;\n\n  constructor(castPlayer: CastPlayer) {\n    super();\n    this._castPlayer = castPlayer;\n    this._eventManager = new EventManager();\n    this._attachListeners();\n  }\n\n  _attachListeners(): void {\n    this._eventManager.listen(this._castPlayer, EventType.AD_MANIFEST_LOADED, () => {\n      this._allAdsCompleted = false;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_START, () => {\n      this._adBreak = true;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.AD_BREAK_END, () => {\n      this._adBreak = false;\n    });\n\n    this._eventManager.listen(this._castPlayer, EventType.ALL_ADS_COMPLETED, () => {\n      this._allAdsCompleted = true;\n    });\n  }\n\n  get adBreak(): boolean {\n    return this._adBreak;\n  }\n\n  get allAdsCompleted(): boolean {\n    return this._allAdsCompleted;\n  }\n\n  reset(): void {\n    this._eventManager.removeAll();\n    this._adBreak = false;\n    this._allAdsCompleted = true;\n    this._attachListeners();\n  }\n\n  destroy(): void {\n    this._adBreak = false;\n    this._allAdsCompleted = true;\n    this._eventManager.destroy();\n  }\n}\n\nexport {CastAdsManager};\n\n\n\n// WEBPACK FOOTER //\n// ./cast-ads-manager.js"],"sourceRoot":""}